<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Novalys.VisualGuard.Security</name>
    </assembly>
    <members>
        <member name="T:Novalys.VisualGuard.Security.Action.VGActionDisplayNameAttribute">
            <summary>
            Defines the UI editor used to create or edit a <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGActionDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGActionDisplayNameAttribute"/>.
            </summary>
            <param name="name">The name of the action at design time.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGActionDisplayNameAttribute.Name">
            <summary>
            Gets the name of the action display at design time.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGActionEditorAttribute">
            <summary>
            Specifies the editor to use to create or edit a <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGActionEditorAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGActionEditorAttribute"/>.
            </summary>
            <param name="typeName">The type of the class use as Editor. This class must derive from Novalys.VisualGuard.Security.Action.Design.VGSecurityActionEditor</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGActionEditorAttribute.TypeName">
            <summary>
            Gets the name of the editor class in the <see cref="P:System.Type.AssemblyQualifiedName"/> format.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGConditionalExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGConditionalExpression.EvaluateCondition(System.Object,System.Object[],Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Type)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="eventArgs"></param>
            <param name="permission"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGConditionalExpression.Check(System.Type,System.Type,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.Type@,System.CodeDom.Compiler.CompilerErrorCollection,System.Type)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="eventArgsType"></param>
            <param name="permission"></param>
            <param name="returnType"></param>
            <param name="errors"></param>
            <param name="currentValueType"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGDynamicScript">
            <summary>
            Base class for dynamic script.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGDynamicScript.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGDynamicScript"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGDynamicScript.Execute(System.Object,Novalys.VisualGuard.Security.VGIPermission,System.Object[])">
            <summary>
            When overridden by a derived class, execute the script defines at design time.
            </summary>
            <param name="target">the object on which the script will be executed.</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="eventArgs">An array of objects corresponding to the arguments of the event for which the action is executed. The array is empty if the action is executed when the security is loading.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGDynamicScript.DebugBreak">
            <summary>
            Signals a breakpoint to an attached debugger (<see cref="P:System.Diagnostics.Debugger.IsAttached"/>).
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction">
            <summary>
            This security action executes a script at runtime.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.Execute(System.Object,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object[],System.Type)">
            <summary>
            Sets the target the properties of the target or the properties of the target field.
            </summary>
            <param name="target">the object on which the script will be executed.</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="eventArgs">An array of objects corresponding to the arguments of the event for which the action is executed. The array is empty if the action is executed when the security is loading.</param>
            <param name="targetType">the type of the target</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.CheckArguments(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            Checks if the specified arguments are valid.
            </summary>
            <param name="type">the target object to which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="condition">the condition used to evaluate when the action must be executed</param>
            <returns>null if all the arguments are valid. the text of the error if one or more arguments are not valid.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.CheckArguments(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="permission"></param>
            <param name="condition"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetDisplayName(System.Type,System.String,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the display name of the action for Visual Guard  console at design time.
            </summary>
            <param name="targetType">the target object to which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="targetDisplayName">the name of the target used to generate the displayname of the action</param>
            <returns>the display name of the action for Visual Guard  console at design time.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetDisplayName(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the display name of the action for Visual Guard  console at design time.
            </summary>
            <param name="targetType">the target object to which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">The permission for which the action is executed</param>
            <returns>the display name of the action for Visual Guard  console at design time.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetDescription(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the description of the action used at design time by the Visual Guard console.
            </summary>
            <param name="targetType">the type of the target on which the action will be executed.</param>
            <param name="args">The list of argument used by the action</param>
            <param name="permission">the permission for which the action must be executed.</param>
            <returns>The description of the action used at design time by the Visual Guard console.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetDescription(System.Type,System.String,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the description of the action used at design time by the Visual Guard console.
            </summary>
            <param name="targetType">the type of the target on which the action will be executed.</param>
            <param name="targetDisplayName">the display name of the target type.</param>
            <param name="args">The list of argument used by the action</param>
            <param name="permission">the permission for which the action must be executed.</param>
            <returns>The description of the action used at design time by the Visual Guard console.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetTypeNameFromArgs(Novalys.VisualGuard.Security.Common.VGHashtable)">
            <summary>
            Extracts the type name from the specified argument list.
            </summary>
            <param name="args">an <see cref="T:System.Collections.Hashtable"/> object containing the list of the argument.</param>
            <returns>The type name (with its namespace) if the arguments are valid, otherwise null.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetFullTypeNameFromArgs(Novalys.VisualGuard.Security.Common.VGHashtable)">
            <summary>
            Extracts the full type name from the specified argument list.
            </summary>
            <param name="args">an <see cref="T:System.Collections.Hashtable"/> object containing the list of the argument.</param>
            <returns>The full type name (with its namespace) if the arguments are valid, otherwise null.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetScriptFromArgs(Novalys.VisualGuard.Security.Common.VGHashtable)">
            <summary>
            Extracts a <see cref="T:Novalys.VisualGuard.Security.Scripting.VGScript"/> object from the specified argument list.
            </summary>
            <param name="args">an <see cref="T:System.Collections.Hashtable"/> object containing the list of the argument.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Scripting.VGScript"/> object if the arguments are valid, otherwise null.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GetDynamicScriptNameSpace">
            <summary>
            Gets the namespace used by Visual Guard for create dynamic script.
            </summary>
            <returns>A string value containing the namespace.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.GenerateTypeName">
            <summary>
            Generates a new Type Name for the generated class.
            </summary>
            <returns>a new Type Name for the generated class.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.CloneArguments(Novalys.VisualGuard.Security.Common.VGHashtable)">
            <summary>
            Copies the arguments of the action and generates a new type name for the generated class.
            </summary>
            <param name="args">An <see>Hashtable</see> containing the argument to clone.</param>
            <returns>A deeply copy of the specified arguments.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExecuteScriptAction.PrepareAction">
            <summary>
            Prepare the script to be compiled
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGExpression">
            <summary>
            Represents an argument based on an expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.#ctor(System.String,System.Guid[],System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGExpression"/>.
            </summary>
            <param name="expression">a string value containing the expression. The expression must be used a valid value for <see cref="M:System.String.Format(System.String,System.Object)"/>.</param>
            <param name="argumentIds"></param>
            <param name="argumentNames"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.ToString">
            <summary>
            Converts the expression into a string value
            </summary>
            <returns>a string value representing the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#SetValue(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object,System.Type,System.Object[])">
            <summary>
            Sets the specified property with the value represented by the object.
            </summary>
            <param name="field">the object for which the property must be changed</param>
            <param name="prop">the property to change</param>
            <param name="permission">the permission for which the modification is applied.</param>
            <param name="eventArgs"></param>
            <param name="target"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#CheckArguments(System.String,System.Type,System.Reflection.PropertyInfo,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            Check whether the arguments of the specified permission are valid for this object
            </summary>
            <param name="fieldName">the name of the field that will be modified by the value</param>
            <param name="prop">the <see cref="T:System.Reflection.PropertyInfo"/> object representing the property that must be modified</param>
            <param name="permission">the permission for which the modification will be applied.</param>
            <param name="eventName"></param>
            <param name="TargetType"></param>
            <returns>The text of the error when the argument is not valid, an empty string otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGExpression.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#Expression">
            <summary>
            Gets the expression used to calculate the value of this object
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.GetDisplayExpression">
            <summary>
            Gets the expression as a string
            </summary>
            <returns>the expression as a string</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.GetDisplayExpression(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the expression to display at design time
            </summary>
            <param name="permission">the permission for which the modification will be applied.</param>
            <returns>the expression to display at design time</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.EvaluateExpression(System.Object,System.Reflection.PropertyInfo,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="prop"></param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.EvaluateExpression(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Evaluates the expression for the specified context
            </summary>
            <param name="field">the object for which the property must be changed</param>
            <param name="prop">the property to change</param>
            <param name="permission">the permission for which the modification is applied.</param>
            <returns>the value of the expression after evaluation.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.RenamePermissionArgument(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Rename permission argument used as parameter if needed
            </summary>
            <param name="permission">the permission for which the value is parameterized</param>
            <returns>true when an argument is renamed;false otherwise</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGExpression.ConvertDisplayExpressionToExpression(System.String,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Convert an expression displayed to the user as a valid expression
            </summary>
            <param name="expression">the expression to convert</param>
            <param name="permission">the permission for which the expression was displayed</param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGInvalidConditionException">
            <summary>
            Exception thrown when the specified condition is not valid.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGInvalidConditionException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGInvalidConditionException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGInvalidConditionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGInvalidConditionException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGInvalidConditionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGIParameterizedValue">
            <summary>
            Represents a parameterized value used by a security action
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGIParameterizedValue.SetValue(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object,System.Type,System.Object[])">
            <summary>
            Sets the specified property with the value represented by the object.
            </summary>
            <param name="field">the object for which the property must be changed</param>
            <param name="prop">the property to change</param>
            <param name="permission">the permission for which the modification is applied.</param>
            <param name="eventArgs"></param>
            <param name="target"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGIParameterizedValue.CheckArguments(System.String,System.Type,System.Reflection.PropertyInfo,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            Check whether the arguments of the specified permission are valid for this object
            </summary>
            <param name="fieldName">the name of the field that will be modified by the value</param>
            <param name="prop">the <see cref="T:System.Reflection.PropertyInfo"/> object representing the property that must be modified</param>
            <param name="permission">the permission for which the modification will be applied.</param>
            <param name="eventName">the name of the event on which the action is raised</param>
            <param name="targetType">the type of the target on which the action is raised.</param>
            <returns>The text of the error when the argument is not valid, an empty string otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGIParameterizedValue.Expression">
            <summary>
            Gets the expression used to calculate the value of this object
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGIParameterizedValue.RenamePermissionArgument(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Rename permission argument used as parameter if needed
            </summary>
            <param name="permission">the permission for which the value is parameterized</param>
            <returns>true when an argument is renamed; false otherwise</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGISupportCondition">
            <summary>
            Allows an action to support conditions
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGISupportCondition.GetPredefinedConditionList(System.Type)">
            <summary>
            Gets the list of predefined condition
            </summary>
            <param name="targetType">The type of the target for which the action will be executed.</param>
            <returns>a string array containing the list of predefined condition. null (Nothing in VB) if the target type does not support condition.</returns>
            <remarks>this list will be used to populate the condition combobox at design time.</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGParameterizedValue">
            <summary>
            Represents a value of an argument of action based on arguments permission.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.UserNameArgumentId">
            <summary>
            The id of the argument containing the name of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.UserNameArgumentName">
            <summary>
            The name of the argument containing the name of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.UserIdArgumentId">
            <summary>
            The id of the argument containing the list of roles of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.UserIdArgumentName">
            <summary>
            The name of the argument containing the list of roles of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.RoleNamesArgumentId">
            <summary>
            The id of the argument containing the list of roles of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.RoleNamesArgumentName">
            <summary>
            The name of the argument containing the list of roles of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.CurrentValueArgumentId">
            <summary>
            The id of the argument containing the list of roles of the current user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGParameterizedValue.CurrentValueArgumentName">
            <summary>
            The name of the argument containing the current value of the property.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValue.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGParameterizedValue"/> class
            </summary>
            <param name="id">the id of the argument</param>
            <param name="argumentName">the name of the argument</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValue.ToString">
            <summary>
            Converts the cuurent object to string
            </summary>
            <returns>the current object as string</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValue.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#RenamePermissionArgument(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Rename permission argument used as parameter if needed
            </summary>
            <param name="permission">the permission for which the value is parameterized</param>
            <returns>true when an argument is renamed; false otherwise</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGParameterizedValueConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Novalys.VisualGuard.Security.Action.VGParameterizedValueConverter"></see> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValueConverter.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CharConverter"></see> class. </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValueConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to a Unicode character object using the arguments.</summary>
            <returns>An <see cref="T:System.Object"></see> that represents the converted value.</returns>
            <param name="culture">The culture into which value will be converted.</param>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context. </param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to. </param>
            <param name="value">The <see cref="T:System.Object"></see> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks whether a <see cref="T:Novalys.VisualGuard.Security.Action.VGParameterizedValue"/> can be converted from the specified type.
            </summary>
            <param name="context">the context of the conversion</param>
            <param name="sourceType">the source type</param>
            <returns>true if a <see cref="T:Novalys.VisualGuard.Security.Action.VGParameterizedValue"/> can be converted from the specified type, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGParameterizedValueConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks whether a <see cref="T:Novalys.VisualGuard.Security.Action.VGParameterizedValue"/> can be converted to the specified type.
            </summary>
            <param name="context">the context of the conversion</param>
            <param name="destinationType">the destination type.</param>
            <returns>true if a <see cref="T:Novalys.VisualGuard.Security.Action.VGParameterizedValue"/> can be converted to the specified type, false otherwise.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGRuntimeExpression">
            <summary>
            Represents an expression at runtime
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.Evaluate(System.Object,System.Object[],Novalys.VisualGuard.Security.Permission.VGRuntimePermission)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="eventArgs"></param>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.Evaluate(System.Object,System.Object[],Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="eventArgs"></param>
            <param name="permission"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.Evaluate(System.Object,System.Object[],Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="eventArgs"></param>
            <param name="permission"></param>
            <param name="currentValue"></param>
            <param name="allowAssignment"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.Check(System.Type,System.Type,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.Type@,System.CodeDom.Compiler.CompilerErrorCollection,System.Type)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="eventArgsType"></param>
            <param name="permission"></param>
            <param name="returnType"></param>
            <param name="errors"></param>
            <param name="currentValueType"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.Check(System.Type,System.Type,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.Type@,System.CodeDom.Compiler.CompilerErrorCollection,System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="eventArgsType"></param>
            <param name="permission"></param>
            <param name="returnType"></param>
            <param name="errors"></param>
            <param name="currentValueType"></param>
            <param name="allowAssignment"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGRuntimeExpression.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGSecurityAction">
            <summary>
            The base class for Visual Guard security action.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.Execute(System.Object,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object[],System.Type)">
            <summary>
            When overridden by a derived class, executes the action to the target object
            </summary>
            <param name="target">the target object for which the action is executed</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="eventArgs">An array of objects corresponding to the arguments of the event for which the action is executed. The array is empty if the action is executed when the security is loading.</param>
            <param name="targetType">the type of the target</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.CheckArguments(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            When overridden by a derived class, checks if the specified arguments are valid.
            </summary>
            <param name="targetType">the type of target for which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="condition">the condition used to evaluate when the action must be executed</param>
            <returns>null if all the arguments are valid. the text of the error if one or more arguments are not valid.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.CheckArguments(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String,System.String)">
            <summary>
            When overridden by a derived class, checks if the specified arguments are valid.
            </summary>
            <param name="targetType">the type of target for which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="condition">the condition used to evaluate when the action must be executed</param>
            <param name="eventName"></param>
            <returns>null if all the arguments are valid. the text of the error if one or more arguments are not valid.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetDisplayName(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            When overridden by a derived class, returns the display name of the action. This name is used at design time in the User Manager Console.
            </summary>
            <param name="targetType">the type of target for which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">the permission associated to the action.</param>
            <returns>Returns display name of the action for the user manager console at design-time.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetDisplayName(System.Type,System.String,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            When overridden by a derived class, returns the display name of the action. This name is used at design time in the User Manager Console.
            </summary>
            <param name="targetType">the type of target for which the action is executed</param>
            <param name="targetDisplayName">the display name of target type</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">the permission associated to the action.</param>
            <returns>Returns display name of the action for the user manager console at design-time.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetDescription(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            When overridden by a derived class, returns the description of the action. This description is used at design time in the User Manager Console.
            </summary>
            <param name="targetType">the type of target for which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">the permission associated to the action.</param>
            <returns>Returns the description of the action for the user manager console at design-time.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetDescription(System.Type,System.String,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            When overridden by a derived class, returns the description of the action. This description is used at design time in the User Manager Console.
            </summary>
            <param name="targetType">the type of target for which the action is executed</param>
            <param name="targetDisplayName">the display name of target type</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">the permission associated to the action.</param>
            <returns>Returns the description of the action for the user manager console at design-time.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetSupportedTypes(System.Boolean)">
            <summary>
            Gets the list of supported types as target for this action
            </summary>
            <param name="showOnlyDefault">Indicates if the list must contains only default supported types or all supported types</param>
            <returns>An array of <see cref="T:System.Type"/> objects representing the list of supported types.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetSelectedSupportedType(System.AppDomain,System.String)">
            <summary>
            Gets selected supported type from typeDetails object.
            </summary>
            <param name="domain">Domain in which we need to find the type</param>
            <param name="typeFullName">typeFullName</param>
            <returns>selected supported type</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.IsVisibleAssembly(System.Reflection.AssemblyName)">
            <summary>
            Inidcates whether an assembly is visible in a security action designer
            </summary>
            <param name="assName">the assembly to check</param>
            <returns>true if the assembly is visible, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction._IsVisibleAssembly(System.Reflection.AssemblyName)">
            <summary>
            Indicates if an assembly is visible for this action at design time.
            </summary>
            <param name="assName">A <see cref="T:System.Reflection.AssemblyName"/> representing the assembly to check.</param>
            <returns><c>true</c> if visible; <c>false</c> otherwise.</returns>
            <remarks>This method is used at design time by the user manager console when the list of target types must be loaded for this action.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.IsVisiblePublicKeyToken(System.Reflection.AssemblyName)">
            <summary>
            Indicates whether the public key of an assembly correspond to a visible assembly
            </summary>
            <param name="assName">the <see cref="T:System.Reflection.AssemblyName"/> object corresponding to the assembly</param>
            <returns>an AssemblyBrowsable value indicating whether the assembly is visible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.IsVisibleAssembly(System.Reflection.Assembly)">
            <summary>
            Indicates if an assembly is visible for this action at design time.
            </summary>
            <param name="ass">A <see cref="T:System.Reflection.Assembly"/> representing the assembly to check.</param>
            <returns><c>true</c> if visible; <c>false</c> otherwise.</returns>
            <remarks>This method is used at design time by the user manager console when the list of target types must be loaded for this action.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.IsSupportedType(System.Type,System.Boolean)">
            <summary>
            Indicates if a type is visible as target for this action at design time.
            </summary>
            <param name="type">The type to check.</param>
            <param name="showOnlyDefault">Indicates if the returned list must contain only default class or all supported class.</param>
            <returns><c>true</c> if visible; <c>false</c> otherwise.</returns>
            <remarks>This method is used at design time by the user manager console when the list of target types must be loaded for this action.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.IsSupportedEvent(System.Reflection.EventInfo)">
            <summary>
            Indicates if an event is supported by Visual Guard at design time.
            </summary>
            <param name="eventInfo">The event to check.</param>
            <returns><c>true</c> if visible; <c>false</c> otherwise.</returns>
            <remarks>This method is used at design time by the console when the list of supported events must be loaded for this action.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.CloneArguments(Novalys.VisualGuard.Security.Common.VGHashtable)">
            <summary>
            Creates a copy of the arguments.  This method is used when a VGGrantedAction is copied.
            </summary>
            <returns>A new copy of the arguments.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.DuplicateArguments(System.Collections.Hashtable)">
            <summary>
            Duplicates the argument for an action.  This method is used when a VGGrantedAction is duplicated.
            </summary>
            <returns>A new copy of the arguments.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.PrepareAction">
            <summary>
            Prepares the action to be executed at runtime
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.Initialize(Novalys.VisualGuard.Security.Permission.VGGrantedAction)">
            <summary>
            Initializes the object with the specified granted action.
            </summary>
            <param name="action">a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> containing the argument of the action.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.RenamePermissionArgument(System.String,System.String)">
            <summary>
            Rename permission argument used in the action
            </summary>
            <param name="oldName">the old name of the argument</param>
            <param name="newName">the new name of the argument</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGSecurityAction.GrantedAction">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> object associated with this action.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGSecurityAction.HasCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.EvaluateCondition(System.Object,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object[],System.Type)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="permission"></param>
            <param name="eventArgs"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.CheckCondition(System.Type,System.String,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String@)">
            <summary>
            Check if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection"/> object contains valid values
            </summary>
            <param name="type">the type to check.</param>
            <param name="condition">the conditional expression to check.</param>
            <param name="message">the message generated by the check.</param>
            <param name="permission">the permission associated to the action.</param>
            <returns>true if the values are correct, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.CheckCondition(System.Type,System.String,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="condition"></param>
            <param name="permission"></param>
            <param name="eventName"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.GetStandardPredefinedConditionList(System.Type)">
            <summary>
            Gets the list of properties valid for a condition
            </summary>
            <param name="type">the type for which the list is extracted</param>
            <returns>the list of valid properties</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSecurityAction.CheckEvent(System.Type,System.String,System.String@)">
            <summary>
            Check if the an event is valid for the specified type
            </summary>
            <param name="targetType">the type of the target for which the event must exist.</param>
            <param name="eventName">the name of the event.</param>
            <param name="message">the message generated by the check.</param>
            <returns>true if the event exists, false otherwise.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction">
            <summary>
            This security action sets the properties of the target or properties of target fields.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.EventArgsName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.Execute(System.Object,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object[],System.Type)">
            <summary>
            Sets the target the properties of the target or the properties of the target fiedls.
            </summary>
            <param name="target">the object on which the properties will be modified.</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="eventArgs">An array of objects corresponding to the arguments of the event for which the action is executed. The array is empty if the action is executed when the security is loading.</param>
            <param name="targetType">the type of the target</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CheckArguments(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            Checks if the specified arguments are valid.
            </summary>
            <param name="type">the target object to which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">The permission for which the action is executed</param>
            <param name="condition">the condition used to evaluate when the action must be executed</param>
            <returns>null if all the arguments are valid. the text of the error if one or more arguments are not valid.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CheckPropertyValuesArgument(System.Type,Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection[],Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String@)">
            <summary>
            Check if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection"/> object contains valid values
            </summary>
            <param name="type">the type to check.</param>
            <param name="list">the list of values to check.</param>
            <param name="message">the message generated by the check.</param>
            <param name="permission">the permission associated to the action.</param>
            <returns>true if the values are correct, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CheckPropertyValuesArgument(System.Type,Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection[],Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String@,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="list"></param>
            <param name="permission"></param>
            <param name="message"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CheckPropertyValuesArgument(System.Type,Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection[],Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String@,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="list"></param>
            <param name="permission"></param>
            <param name="message"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CleanUpPropertyValues(System.Type,Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection[],Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Cleans up the list of properties
            </summary>
            <param name="type">the type of the class for which the properties must be cleaned up</param>
            <param name="list">the list of properties to clean up</param>
            <param name="permission">the permission associated to the action</param>
            <returns>the new list of properties.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CleanUpPropertyValues(System.Type,Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection[],Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            Cleans up the list of properties
            </summary>
            <param name="type">the type of the class for which the properties must be cleaned up</param>
            <param name="list">the list of properties to clean up</param>
            <param name="permission">the permission associated to the action</param>
            <param name="eventName"></param>
            <returns>the new list of properties.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.GetDisplayName(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the display name of the action for Visual Guard console at design time.
            </summary>
            <param name="targetType">the target object to which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">the permission for which the action must be executed.</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.GetDisplayName(System.Type,System.String,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the display name of the action for Visual Guard console at design time.
            </summary>
            <param name="targetType">the target object to which the action is executed</param>
            <param name="args">the list of arguments of the action</param>
            <param name="permission">the permission for which the action must be executed.</param>
            <param name="targetDisplayName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.GetDescription(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the description of the action used at design time by the Visual Guard console.
            </summary>
            <param name="targetType">the type of the target on which the action will be executed.</param>
            <param name="args">The list of argument used by the action</param>
            <param name="permission">the permission for which the action must be executed.</param>
            <returns>The description of the action used at design time by the Visual Guard console.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.GetDescription(System.Type,System.String,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the description of the action used at design time by the Visual Guard console.
            </summary>
            <param name="targetType">the type of the target on which the action will be executed.</param>
            <param name="targetDisplayName">the display name of the target type.</param>
            <param name="args">The list of argument used by the action</param>
            <param name="permission">the permission for which the action must be executed.</param>
            <returns>The description of the action used at design time by the Visual Guard console.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.GetPredefinedConditionList(System.Type)">
            <summary>
            Gets the list of predefined conditions that can be applied on the specified type.
            </summary>
            <param name="targetType">type for which the list is requested</param>
            <returns>The list of predefined conditions that can be applied on the specified type.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSetPropertiesAction.CheckArguments(System.Type,Novalys.VisualGuard.Security.Common.VGHashtable,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="permission"></param>
            <param name="condition"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGSupportedActionDesignerVersionAttribute">
            <summary>Indicates the minimum file version of security action designer supported by this version of Visual Guard runtime</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGSupportedActionDesignerVersionAttribute.Equals(System.Object)">
            <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.</summary>
            <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
            <param name="obj">The object to test the value equality of. </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGSupportedActionDesignerVersionAttribute.MinimumVersion">
            <summary>Gets the minimum supported file version of security action designer stored in this attribute.</summary>
            <returns>the minimum supported version stored in this attribute.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGUnsupportedActionTypeException">
            <summary>
            Exception thrown when the specified action is not supported.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGUnsupportedActionTypeException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGUnsupportedActionTypeException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGUnsupportedActionTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGUnsupportedActionTypeException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGUnsupportedActionTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript">
            <summary>
            Represents a value that result of an expression
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.#ctor(System.String,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Action.VGExpression"/>.
            </summary>
            <param name="expression">a string value containing the expression. The expression must be used a valid value for <see cref="M:System.String.Format(System.String,System.Object)"/>.</param>
            <param name="permission"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.ToString">
            <summary>
            Converts the expression into a string value
            </summary>
            <returns>a string value representing the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#SetValue(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object,System.Type,System.Object[])">
            <summary>
            Sets the specified property with the value represented by the object.
            </summary>
            <param name="field">the object for which the property must be changed</param>
            <param name="prop">the property to change</param>
            <param name="permission">the permission for which the modification is applied.</param>
            <param name="eventArgs"></param>
            <param name="target"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#CheckArguments(System.String,System.Type,System.Reflection.PropertyInfo,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,System.String)">
            <summary>
            Check whether the arguments of the specified permission are valid for this object
            </summary>
            <param name="fieldName">the name of the field that will be modified by the value</param>
            <param name="prop">the <see cref="T:System.Reflection.PropertyInfo"/> object representing the property that must be modified</param>
            <param name="permission">the permission for which the modification will be applied.</param>
            <param name="eventName"></param>
            <param name="targetType"></param>
            <returns>The text of the error when the argument is not valid, an empty string otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.Novalys#VisualGuard#Security#Action#VGIParameterizedValue#Expression">
            <summary>
            Gets the expression used to calculate the value of this object
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.GetDisplayExpression">
            <summary>
            Gets the expression as a string
            </summary>
            <returns>the expression as a string</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.GetDisplayExpression(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Gets the expression to display at design time
            </summary>
            <param name="permission">the permission for which the modification will be applied.</param>
            <returns>the expression to display at design time</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Action.VGValueBasedOnScript.RenamePermissionArgument(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Rename permission argument used as parameter if needed
            </summary>
            <param name="permission">the permission for which the value is parameterized</param>
            <returns>true when an argument is renamed;false otherwise</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.App.VGAnonymousAccessLevel">
            <summary>
            Specifies Annynomous access level to Membership API for an application 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGAnonymousAccessLevel.NoAccess">
            <summary>
            Anonymous user cannot be used to edit, create, delete or grant roles to the users of the application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGAnonymousAccessLevel.Read">
            <summary>
            Anonymous user can be used only to read all users.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGAnonymousAccessLevel.Create">
            <summary>
            Anonymous user can be used only to create users and assign the default role to these users.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGAnonymousAccessLevel.Update">
            <summary>
            Anonymous user can be used only to update all user.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGAnonymousAccessLevel.Delete">
            <summary>
            Anonymous user can be used only to delete all user.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.App.VGApplicationFrameworkType">
            <summary>
            This enum represents a framework Type for Application, ex. .NetFramework, Core.Net, Xamarin, etc.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGApplicationFrameworkType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGApplicationFrameworkType.NetFramework">
            <summary>
            Represents a .Net Framework application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGApplicationFrameworkType.CoreFramework">
            <summary>
            Represents a Core .Net Framework application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGApplicationFrameworkType.Xamarin">
            <summary>
            Represents a Xamarin Framework application
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.App.VGApplicationInformation">
            <summary>
            Provides the permission set associated to an application and all information about the application.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.App.VGApplicationInformation.#ctor(System.String,Novalys.VisualGuard.Security.VGApplicationType,System.Guid)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.App.VGApplicationInformation"/> without permission set
            </summary>
            <param name="name">The name of the application.</param>
            <param name="applicationType">A value of <see cref="T:Novalys.VisualGuard.Security.VGApplicationType"/> the type of the application.</param>
            <param name="id">the id of the application.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.App.VGApplicationInformation.#ctor(System.String,System.String,System.Boolean,Novalys.VisualGuard.Security.VGApplicationType,System.Guid)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.App.VGApplicationInformation"/>
            </summary>
            <param name="name">The name of the application.</param>
            <param name="description">The description of the application.</param>
            <param name="isBuiltIn">Indicates if the application is generated by Visual Guard and cannot be deleted.</param>
            <param name="applicationType">A value of <see cref="T:Novalys.VisualGuard.Security.VGApplicationType"/> the type of the application.</param>
            <param name="id">the id of the application.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.App.VGApplicationInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.App.VGApplicationInformation"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.App.VGApplicationInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Name">
            <summary>
            Gets or sets the name of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Description">
            <summary>
            Gets or sets the description of the application.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.App.VGApplicationInformation.Clone">
            <summary>
            Creates a new VGApplicationInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGApplicationInformation that is a copy of the current instance.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.IsBuiltIn">
            <summary>
            Indicates if the application is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Id">
            <summary>
            Gets or sets the unique identifier of this application .
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.SecuredAssemblyPath">
            <summary>
            Returns the path of the entry assembly corresponding to the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Language">
            <summary>
            Gets or sets the language (C# or VB.Net) used to create script action.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.AnonymousRole">
            <summary>
             Gets or sets the Visual Guard unique identifier of the role granted by default to each created user.
            </summary>
            <remarks>If the value is null, then the application do not have a default role.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.DefaultRole">
            <summary>
             Gets or sets the Visual Guard unique identifier of the role granted by default to each created user.
            </summary>
            <remarks>If the value is null, then the application do not have a default role.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.ApplicationType">
            <summary>
             Gets or sets a <see cref="T:Novalys.VisualGuard.Security.VGApplicationType"/> value indicating the type of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.Version">
            <summary>
             Gets or sets the version of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.OriginalId">
            <summary>
             Gets or sets the Visual Guard unique identifier of the application used to create this application.
            </summary>
            <value>A <see cref="T:System.Guid"/> value representing the id the orginal application when the application is a new version of another application; <see cref="F:System.Guid.Empty"/> if the application is not a copy of another application.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.App.VGApplicationInformation.CreateNewVersion(System.Guid)">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.App.VGApplicationInformation"/> object that is a new version of the application.
            </summary>
            <param name="newApplicationId">the id of the new of version of the application.</param>
            <returns>A new <see cref="T:Novalys.VisualGuard.Security.App.VGApplicationInformation"/> object that is a new version of the application.</returns>
            <exception cref="T:System.InvalidOperationException">The application is a built-in application.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.CopyOf">
            <summary>
             Gets the id of the application used to create this version of the application.
            </summary>
            <value>The id of the application used to create this version of the application if it is a new version of an application. <see cref="F:System.Guid.Empty"/> when the application is the original version</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.OtherAssemblies">
            <summary>
            Gets the reference paths used at design time to find secured assemblies
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.WebPortalId">
            <summary>
            Gets the reference of Web Portal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.AnonymousSystemRole">
            <summary>
            Gets or Sets a console role for anonymous users of this application 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.MembershipAccessLevel">
            <summary>
            Gets or sets a boolean value indicating wether the membership permissions are enabled for the application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGApplicationInformation.FrameworkType">
            <summary>
            Represents a Framework type of the application
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.App.VGIApplicationInformation">
            <summary>
            Defines the basic functionality of an application information
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.Description">
            <summary>
            Gets or sets the description of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.SecuredAssemblyPath">
            <summary>
             Gets or sets the path of the assembly corresponding to the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.Language">
            <summary>
             Gets or sets the language (C# or VB.Net) used to create script action.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.AnonymousRole">
            <summary>
             Gets or sets a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> the role used for anonymous session.
            </summary>
            <remarks>The value is equal to null (Nothing), then the application do not allow the anonymous session.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.DefaultRole">
            <summary>
             Gets or sets the Visual Guard unique identifier of the role granted by default to each created user.
            </summary>
            <remarks>If the value is null, then the application do not have a default role.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.ApplicationType">
            <summary>
             Gets or sets a <see cref="T:Novalys.VisualGuard.Security.VGApplicationType"/> value indicating the type of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.Version">
            <summary>
             Gets or sets the version of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.MembershipAccessLevel">
            <summary>
             Gets or sets a boolean values indicating whether the membership permissions are enabled for the application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.AnonymousSystemRole">
            <summary>
            Gets or Sets a console role for anonymous users of this application 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.OtherAssemblies">
            <summary>
            Gets the reference paths used at design time to find secured assemblies
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.App.VGIApplicationInformation.FrameworkType">
            <summary>
            Gets the framework type of the application.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.App.VGMembershipAccessLevel">
            <summary>
            Specifies access level to Membership API for an application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGMembershipAccessLevel.Default">
            <summary>
            The current user can Create/Read/Update/Delete depending of the permissions, he have in Visual Guard Console
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGMembershipAccessLevel.ReadAllMembersOnly">
            <summary>
            The current user authenticate or not, can read all users and all roles of the current application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.App.VGMembershipAccessLevel.AddMembersOnly">
            <summary>
            Membership API can be used only to create users and assign the default role to these users.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader">
            <summary>
            Represents an Interface loading application details.
            Ex. Implemented by NetFrameworkAssemblyLoader, NetCoreAssemblyLoader.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.ApplicationName">
            <summary>
            Gets application name.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.SecuredApplicationFilePath">
            <summary>
            Gets filepath for the application to be secured.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.OtherFilesPath">
            <summary>
            Gets filepath for other files if any.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.ApplicationType">
            <summary>
            Gets application type
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.FrameworkType">
            <summary>
            Gets Framework type of the application. ex. .NetCore, .NetFramework, Xamarin etc.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.GetApplicationLanguage">
            <summary>
            Gets application's language
            </summary>
            <returns>Application's language as VGLanguages</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.EditAction(Novalys.VisualGuard.Security.Permission.VGGrantedAction,Novalys.VisualGuard.Security.Membership.VGPermission,Novalys.VisualGuard.Security.Scripting.VGLanguages)">
            <summary>
            This function will Edit an action for given permission.
            </summary>
            <param name="action">action</param>
            <param name="permission">permission</param>
            <param name="language">language</param>
            <returns>Action</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.CheckAction(Novalys.VisualGuard.Security.Permission.VGGrantedAction,Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            This function will Check An Action for given permission.
            </summary>
            <param name="action">action</param>
            <param name="permission">permission</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.DuplicateAction(Novalys.VisualGuard.Security.Permission.VGGrantedAction,Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            Duplicates the action.
            </summary>
            <param name="action">action</param>
            <param name="permission">permission</param>
            <returns>Duplicated action</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.GetSecurityActionList">
            <summary>
            This function will get a list of security actions.
            </summary>
            <returns>A list of security actions</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.IsApplicationModified">
            <summary>
            Gets if application is modified
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.IsDisposed">
            <summary>
            Gets whether assemblyloader is disposed or not
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.Dispose(System.Boolean)">
            <summary>
            Function used To dispose other objects before disposing assemblyloader
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.UnloadResourcesIfAnyWhileUnloadingDomain">
            <summary>
            This method will unload resources while unloading domain.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.SetApplicatioNameInDomain(System.String)">
            <summary>
            Sets application Name in domain
            </summary>
            <param name="applicationName"></param>
        </member>
        <member name="E:Novalys.VisualGuard.Security.AssemblySystem.ApplicationLoader.VGIApplicationLoader.Disposed">
            <summary>
            This event will be notified when applicationLoader is disposed.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor">
            <summary>
            AssemblyProcessor for .net Core. (Responsible for loading .net core library information)
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor.#ctor">
            <summary>
            VGNetCoreAssemblyProcessor Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor.InitializeLifetimeService">
            <summary>
            Initialize lifetime service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor.Load(System.String,System.Reflection.AssemblyName,System.String[])">
            <summary>
            Loads assemblies.
            </summary>
            <param name="filePath"></param>
            <param name="applicationVGRuntimeRef"></param>
            <param name="otherAssembliesPath"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor.GetSecurityActionList">
            <summary>
            Gets supported security actions list for .net core.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor.Initialize">
            <summary>
            Initializes the VGNetCoreAssemblyProcessor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessor.GetProvider">
            <summary>
            Gets Asssembly Processor Provider.
            </summary>
            <returns>VGIAssemblyProcessorProvider</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider">
            <summary>
            Represents a class to provide info about .Net Core Assembly, It provides an information about the .net core's assembly's
            types, events, fields, properties and other required information.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetTypes(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isSupportedOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetApplicationName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetLanguageType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetSelectedType(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            Gets Information about Type for give typeName
            </summary>
            <param name="args">Args containing typeName information to find the type</param>
            <returns>Information about Type for give typeName</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetEvents(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetEventsFromField(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetFields(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetProperties(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.NetCore.VGNetCoreApplicationProcessorProvider.GetSecurityActionList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess">
            <summary>
            Enum to represent member access modifiers types ex. Private, Internal, Public
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess.None">
            <summary>
            AccessModifer - None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess.Private">
            <summary>
            AccessModifer - Private
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess.Internal">
            <summary>
            AccessModifer - Internal
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess.Public">
            <summary>
            AccessModifer - Public
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess.Protected">
            <summary>
            AccessModifer - Protected
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberAccess.InternalProtected">
            <summary>
            AccessModifer - InternalProtected
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails">
            <summary>
            Represents a class for containing information about type's members like properties, fields, events, methods.
            </summary>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.MemberName">
            <summary>
            Gets or sets the memberName
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.MemberFullName">
            <summary>
            Gets or sets member's full name.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.MemberDataType">
            <summary>
            Gets or sets member's datatype
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.MemberType">
            <summary>
            Gets or sets member's type whether it is field, property, method.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.MemberAccess">
            <summary>
            Gets or sets member's data access whether it is Private, Public, ex.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberDetails.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get object data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberType">
            <summary>
            Enum to represent Member types of class. ex. Properties, Methods, Events etc.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberType.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberType.Methods">
            <summary>
            Methods
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberType.Events">
            <summary>
            Events
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferMemberType.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails">
            <summary>
            Represents a class containing information about type. ex. Namespace, AssemblyName, typename 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.Namespace">
            <summary>
            Gets or sets Namespace of type.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.AssemblyName">
            <summary>
            Gets or sets AssemblyName of type.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.AssemblyLocation">
            <summary>
            Gets or sets AssemblyLocation of type.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.TypeName">
            <summary>
            Gets or sets typeName of type.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.TypeAssemblyQualifiedName">
            <summary>
            Gets or sets type's AssemblyQualifiedName
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.TypeFullName">
            <summary>
            Gets or sets type full name.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.BaseTypeFullName">
            <summary>
            Gets or sets type's BaseType full name if any.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGActionTransferTypeDetails.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets objectdata
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs">
            <summary>
            Represents a class containing arguments to transfer data about querying for information from processor provider. 
            (This might be transferring data from one app domain to another appdomain)
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs.ContainsKey(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGAssemblyProcessorProviderParameterType)">
            <summary>
            Checks if args contains specific parameter type.
            </summary>
            <param name="key">VGAssemblyProcessorProviderParameterType</param>
            <returns>True if contains given parameter type, else false</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs.SetParam``1(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGAssemblyProcessorProviderParameterType,``0)">
            <summary>
            Sets value of specific parameter type in args.
            </summary>
            <typeparam name="T">parameter value type</typeparam>
            <param name="key">parameter type key</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs.GetParam``1(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGAssemblyProcessorProviderParameterType)">
            <summary>
            Gets value of specific parameter type in args.
            </summary>
            <typeparam name="T">parameter value type to return</typeparam>
            <param name="key">parameter type key</param>
            <returns>parameter value</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGAssemblyProcessorProviderParameterType">
            <summary>
            Enum for AssemblyProcessorProvider parameter type args.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderType">
            <summary>
            Represents an enum for types of assembly processor providers. ex. .NetFramework, Java, .NetCore etc.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderType.NetFramework">
            <summary>
            NetFramework Provider
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderType.NetCore">
            <summary>
            NetCore Provider
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessor">
            <summary>
            Represents an interface for assembly processor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessor.GetProvider">
            <summary>
            Gets provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider">
            <summary>
            Represents an interface for AssemblyProcessor Provider, It is responsible for providing methods to explore all details of assembly. (Types,properties,events, etc)
            Ex. processor providers For - .net framework, .net core or other.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.Type">
            <summary>
            Type of AssemblyProcessor Provider
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetLanguageType">
            <summary>
            Get Language Type of the assembly
            </summary>
            <returns>Language Type of assembly</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetApplicationName">
            <summary>
            Gets application name via appDomainName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetTypes(System.Boolean)">
            <summary>
            Gets types of assembly.
            </summary>
            <param name="isSupportedOnly">True if want to get supported types else false for all types</param>
            <returns>Types of assembly depending on parameter (all or supported)</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetSelectedType(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            Gets Information about Type for give typeName
            </summary>
            <param name="args">Args containing typeName information to find the type</param>
            <returns>Information about Type for give typeName</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetFields(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            Gets fields for given type.
            </summary>
            <param name="args">arguments</param>
            <returns>fields for given type</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetProperties(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            Gets properties for given type.
            </summary>
            <param name="args">arguments</param>
            <returns>properties for given type</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetEvents(Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGApplicationProcessorProviderArgs)">
            <summary>
            Gets events for given type.
            </summary>
            <param name="args">arguments</param>        
            <returns>events for given type.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider.GetSecurityActionList">
            <summary>
            Gets security Actions available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider">
            <summary>
            Represents a class for providing VGRuntimeInformation.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.InitializeLifetimeService">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.Dispose">
            <summary>
            Dispose object.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.GetMinimumConsoleVersion(System.Reflection.AssemblyName)">
            <summary>
            Gets Min Console version from VGRuntime Reference.
            </summary>
            <param name="runtimeRef">VGRuntimeReference</param>
            <returns> Min Console version from VGRuntime Reference</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.GetRuntimeAssemblyReference(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Gets RuntimeAssemblyReference from given assemblyRef.
            </summary>
            <param name="assemblyRef">Assembly in which to check for runtimeRef </param>
            <param name="rutimeRef">Assembly to compare</param>
            <returns> RuntimeAssemblyReference from given assemblyRef</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.GetAssemblyReference(System.String)">
            <summary>
            Gets AssemblyName after loading it in domain from assemblyFilePath.
            </summary>
            <param name="assemblyPath">assemblyPath</param>
            <returns>AssemblyName after loading assembly in domain</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.GetFileVersion(System.Reflection.AssemblyName)">
            <summary>
            Gets fileversion of Assembly.
            </summary>
            <param name="runtimeRef"></param>
            <returns>fileversion of Assembly.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.GetAssemblyLanguage(System.Reflection.AssemblyName)">
            <summary>
            Gets AssemblyLanguage of application from assembly.
            </summary>
            <param name="assRef"></param>
            <returns>AssemblyLanguage of application</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGRuntimeInformationProvider.GetVGRuntimeAssemblyReferenceFromApplication(System.String,System.Reflection.AssemblyName,System.Collections.Generic.List{System.Reflection.AssemblyName})">
            <summary>
            Gets VGRuntimeAssemblyReference from Application.
            </summary>
            <param name="appFilePath">ApplicationFilePath</param>
            <param name="consoleVGRuntimeAssembly">ConsoleVGRuntimeReference AssemblyName</param>
            <param name="lstOtherVGRuntimeAssemblies">List of OtherVGRuntimeReference AssemblyName</param>
            <returns>VGRuntimeAssemblyReference from Application.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AssemblySystem.VGIRuntimeIntegrationChecker">
            <summary>
            Represents an interface for VGRuntime integration checker.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.VGIRuntimeIntegrationChecker.FrameworkType">
            <summary>
            Gets Framework of the application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.VGIRuntimeIntegrationChecker.ApplicationType">
            <summary>
            Gets type of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AssemblySystem.VGIRuntimeIntegrationChecker.FilePath">
            <summary>
            Gets the filepath of the application.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.VGIRuntimeIntegrationChecker.CheckRuntimeIntegration(System.String,Novalys.VisualGuard.Security.VGApplicationType,Novalys.VisualGuard.Security.App.VGApplicationFrameworkType,System.Version,System.Boolean)">
            <summary>
            This function checks if VGRuntime integration is valid or not.
            </summary>
            <param name="filepath">FilePath of the applicaton</param>
            <param name="appType">Type of Application</param>
            <param name="frameworkType">Type of framework for application</param>
            <param name="minimumRuntimeSupported">Min Runtime version supported</param>
            <param name="throwOnError">Throw error or not</param>
            <returns>VGRuntime integration is valid or not.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.AssemblySystem.VGIRuntimeIntegrationChecker.GetAssemblyLanguage(System.String,Novalys.VisualGuard.Security.VGApplicationType,Novalys.VisualGuard.Security.App.VGApplicationFrameworkType)">
            <summary>
            This function gets an assembly language of application.
            </summary>
            <param name="filepath">FilePath of the applicaton</param>
            <param name="appType">Type of Application</param>
            <param name="frameworkType">Type of framework for application</param>
            <returns>language of application</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.AuthenticationModule.VGAuthentificationModuleResponse.UserId">
            <summary>
            Current User Id of the authentication 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.AuthenticationModule.VGWindowsCredential">
            <summary>
            Represente a windows credential
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation">
            <summary>
            Provides credential information of a Visual Guard user
            </summary>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation"/>
            </summary>
            <param name="userName">the name of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="utcNow">the date and time form the based on date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.#ctor(System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation"/>
            </summary>
            <param name="userName">the name of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="isBuiltIn">a value indicating whether the credential is created by Visual Guard.</param>
            <param name="utcNow">the date and time form the based on date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation"/>
            </summary>
            <param name="userName">the name of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="question">The password question of the user.</param>
            <param name="answer">The password answer of the user.</param>
            <param name="isBuiltIn">a value indicating whether the credential is created by Visual Guard.</param>
            <param name="utcNow">the date and time form the based on date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.#ctor(System.String,System.String,System.DateTime,System.DateTime,System.Int32,Novalys.VisualGuard.Security.Authentication.VGPasswordCollection,System.Boolean,System.Boolean,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation"/>
            </summary>
            <param name="userName">the name of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="lastChangedTime">The time that the password was last changed</param>
            <param name="lastAccessedTime">The time that the password was last accessed</param>
            <param name="consecutiveBadLoginCount">The number of consecutive bad logins</param>
            <param name="passwordHistory">A <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection"/> object containing an history of old hashed passwords (the first item is the most recent).</param>
            <param name="locked">Indicates the password is locked</param>
            <param name="isApproved">Indicates the password is locked</param>
            <param name="graceLoginCount">The number of grace logon used since the password has expired.</param>
            <param name="start">The start date of the credential.</param>
            <param name="end">The end date of the credential. Must be greater than the start date. If the date is equal to <see cref="F:System.DateTime.MaxValue"/>, the credential does not expire.</param>
            <param name="isBuiltIn">a value indicating whether the credential is created by Visual Guard.</param>
            <param name="utcNow">the date and time based on date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.UserName">
            <summary>
            Gets the name of this credential.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Check(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy,System.String,System.Boolean,System.DateTime)">
            <summary>
            Checks the credential if a password is valid according to the password policy and the stored credentials.
            </summary>
            <param name="passwordPolicyProvider">The password policy used to check the credential. <c>null</c> if there is no password policy.</param>
            <param name="password">The plaintext password to check as string</param>
            <param name="changeState"><code>true</code> if you want to increment (if necessary) the number of consecutive bad logins <code>false</code> otherwise.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <returns><code>true</code> if the password matches, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.SetLastAccessedTime(System.DateTime)">
            <summary>
            Changes last accessed time
            </summary>
            <param name="dt_lastAccessedtime"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.CheckPassword(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy,System.String,System.Boolean,System.DateTime)">
            <summary>
            Checks if a password matches the password stored in the credential.
            </summary>
            <param name="passwordPolicyProvider">The password policy used to validate the password.</param>
            <param name="password">The password to check as byte array</param>
            <param name="changeState"><code>true</code> if you want to increment (if necessary) the number of consecutive bad logins <code>false</code> otherwise.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <returns><code>true</code> if the password matches, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.SetPassword(System.String,System.DateTime)">
            <summary>
            Changes the password in the credential
            </summary>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <param name="password">A hashed password as byte array.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.LastChangedTime">
            <summary>
            Gets the time that the credential (the password) was last changed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.LastAccessedTime">
            <summary>
            Gets the time that the credential was last accessed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.LastLoginTime">
            <summary>
            Gets the time that the credential was last accessed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.LastLockOutTime">
            <summary>
            Gets the time that the credential was last accessed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.ConsecutiveBadLoginCount">
            <summary>
            Gets the number of consecutive invalid password was used to authenticate this credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.PasswordHistory">
            <summary>
            Gets list of password used by this credential (the first occurrence is the most recent and the current password).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Locked">
            <summary>
            Gets a value indicating whether the credential is locked.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.IsApproved">
            <summary>
            Gets a value indicating whether the credential can be authenticated.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.GraceLoginCount">
            <summary>
            Gets the number of grace logon used.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.System#ICloneable#Clone">
            <summary>
            Creates a new VGCredentialInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGCredentialInformation that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Clone">
            <summary>
            Creates a new VGCredentialInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGCredentialInformation that is a copy of the current instance.</returns>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Start">
            <summary>
            Gets or sets the start date for the credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.End">
            <summary>
            Gets or sets the end date for the credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Id">
            <summary>
            Gets or sets the unique identifier of this credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.IsBuiltIn">
            <summary>
            Gets a value that indicates whether the information is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>this value will be used to change the <see cref="N:Novalys.VisualGuard.Security.Repository"/> the next time the information will be saved.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.Duplicate(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Duplicates the credential information, reset the statistics
            </summary>
            <param name="userName">The username of the duplicated credential</param>
            <param name="password">The password of the duplicated credential</param>
            <param name="question">The password question of the duplicated credential</param>
            <param name="answer">The password answer of the duplicated credential</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <returns>a new instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.SetPasswordQuestionAndAnswer(System.String,System.String,System.DateTime)">
            <summary>
            Changes the password question and answer in the credential
            </summary>
            <param name="question">the password question.</param>
            <param name="answer">A password answer as string.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.PasswordQuestion">
            <summary>
            Gets the password question.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.CheckPasswordAnswer(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy,System.String,System.Boolean,System.DateTime)">
            <summary>
            Checks if a password answer matches the password answer stored in the credential.
            </summary>
            <param name="passwordPolicyProvider">The password policy used to validate the password.</param>
            <param name="passwordAnswer">The password answer to check as byte array</param>
            <param name="changeState"><c>true</c> if you want to increment (if necessary) the number of consecutive bad logins <c>false</c> otherwise.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <returns><c>true</c> if the password matches, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.MustChangePasswordAtNextLogon">
            <summary>
            Gets or sets a boolean value indicating when the password must be changed at next logon.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.CreateHashedPassword(System.Byte[])">
            <summary>
            Creates an hashed password
            </summary>
            <param name="password">the plain text password as byte array.</param>
            <returns>A hashed password as byte array.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.HashProvider">
            <summary>
            Gets the an <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/> used to hash the password.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.CompareHash(System.Byte[],System.Byte[])">
            <summary>
            Compares a plaintext password to an hashed text
            </summary>
            <param name="plainText">the plaintext password</param>
            <param name="hashedText">The hashed password</param>
            <returns><c>true</c> if the password is equals to the hashed password</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGCredentialInformation.HashedPassword">
            <summary>
            Gets the current hashed password as byte array
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGCryptographyConfigurationView">
            <summary>
            <para>Represents a view to navigate the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/> configuration data.</para>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Authentication.VGCryptographyConfigurationView.PasswordHashProviderName">
            <summary>
            The name of HashProvider used by Visual Guard to store password.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGCryptographyConfigurationView.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="context">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGDatabaseCredential">
            <summary>
            Represents an authentication credential consisting of a
            name and password associated with a user database account.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential">
            <summary>
            Represents an authentication credential consisting of a
            email and password associated with a user.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential"/>
            class with the specified email and password.
            </summary>
            <param name="email">An email associated with a user or system account.</param>
            <param name="password">A password associated with a user or system</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential"/>
            class with the specified email and password.
            </summary>
            <param name="email">A name associated with a user or system account.</param>
            <param name="password">A password associated with a user or system account.</param>
            <remarks>
            It is recommended that you use <see cref="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.#ctor(System.String,System.Byte[])"/>
            so that you can overwrite the password bytes when you are done using them.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential"/>
            class with the specified name and securePassword.
            </summary>
            <param name="email">An email associated with a user or system account.</param>
            <param name="securePassword">A securePassword associated with a user or system account in secureString format.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.VGModuleName">
            <summary>
            Gets a Module name
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.IdentityName">
            <summary>
            Gets an identity name
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.Email">
            <summary>
            Gets email
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.GetHashID">
            <summary>
            Get HashId of email address
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.IsSameCredential(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential)">
            <summary>
            Gets if credential is same
            </summary>
            <param name="credential"></param>
            <returns>If credential is same or not</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.Password">
            <summary>
            Gets the password of this credential as a string.
            </summary>
            <remarks>
            It is recommended that you use PasswordBytes so that you can overwrite the password bytes
            when you are done using them.
            </remarks>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGEmailPasswordCredential.PasswordBytes">
            <summary>
            Gets the password of this credential as a byte array.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGHashProviderFactory">
            <summary>
            Represents a factory for creating instances of a class which implements <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGHashProviderFactory.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGHashProviderFactory"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGHashProviderFactory.CreateHashProvider(System.String)">
            <summary>
            Returns a configured <c>IHashProvider</c> instance.
            </summary>
            <param name="hashProviderName">Name of hash provider from configuration</param>
            <returns>The configured <c>IHashProvider</c> object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGHashProviderFactory.CreateConfigurationView">
            <summary>
            <para>Creates the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> for the factory.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> for the factory.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGHashProviderFactory.GetConfigurationType(System.String)">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/> to create based on the name.</para>
            </summary>
            <param name="instanceName">
            <para>The name of the configuration object to create.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/> to create.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider">
            <summary>
            Defines the basic functionality of an authentication provider.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.Authenticate(Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential,System.Security.Principal.IIdentity@,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Verifies the specified credentials and constructs an
            <see cref="T:System.Security.Principal.IIdentity"/> object.
            </summary>
            <param name="credential">A credential object such as a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential"/>.</param>
            <param name="identity">An <see cref="T:System.Security.Principal.IIdentity"/> object.</param>
            <param name="mode">Indicates the mode of authentication.</param>
            <returns>
            a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationStatus"/> representing the state of the authentication
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.ChangePassword(Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential,System.String,System.String)">
            <summary>
            Changes the password of the user identified by the given credentials
            </summary>
            <param name="credential">the credentials identifying the user.</param>
            <param name="newPassword">the new password</param>
            <param name="confirmation">the confirmation of the new password</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> object representing the state of the password modification.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the user identified by the given credentials and authenticated by the password answer
            </summary>
            <param name="userName">the username identifying the account.</param>
            <param name="answer">the password answer authenticating the user.</param>
            <param name="newPassword">the new password</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> object representing the state of the password modification.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.ChangePassword(System.String,System.String)">
            <summary>
            Changes the password of the user identified by the given credentials
            </summary>
            <param name="credential">the credentials identifying the user.</param>
            <param name="newPassword">the new password</param>
            <param name="confirmation">the confirmation of the new password</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> object representing the state of the password modification.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.ChangePasswordQuestionAndAnswer(Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential,System.String,System.String)">
            <summary>
            Changes the password question and answer.
            </summary>
            <param name="credential">A credential object such as a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential"/>.</param>
            <param name="newQuestion">The new password question of the user as string.</param>
            <param name="newAnswer">The newpassword answer of the given question as string.</param>
            <returns>a <see cref="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.Success"/> if the password is successfully changed, another <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus"/> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String)">
            <summary>
            Changes the password question and answer.
            </summary>
            <param name="userName">The userName of the user.</param>
            <param name="newQuestion">The new password question of the user as string.</param>
            <param name="newAnswer">The newpassword answer of the given question as string.</param>
            <returns>a <see cref="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.Success"/> if the password is successfully changed, another <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus"/> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.GetPasswordQuestion(System.String)">
            <summary>
            Gets the password question of the specified user.
            </summary>
            <param name="username">the name of the user.</param>
            <returns>the password question of the specified user. null (Nothing) if the user does not exist or the user does not have any password question.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.PasswordPolicyMessage">
            <summary>
            Gets the message displayed to the user if the password does not match the validation rules.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.PasswordPolicyProvider">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy"/> object used to check the password policy for the authentication provider.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.CredentialManager">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> object used to read or save credential information.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.CreateHashedPassword(System.Byte[])">
            <summary>
            Creates an hashed password
            </summary>
            <param name="password">the plain text password as byte array.</param>
            <returns>A hashed password as byte array.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.SupportedAuthenticationModes">
            <summary>
            Gets the authentication modes supported by the repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGIAuthenticationProvider.Duplicate(Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager)">
            <summary>
            Allows to duplicate the current provider for the specified cache manager
            </summary>
            <param name="cacheManager">the cache manager associated to the duplicated provider.</param>
            <returns>A copy of the current provider associated to the specified cache manager</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation">
            <summary>
            Defines the basic functionality for a Visual Guard credential information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.UserName">
            <summary>
            Gets or sets the name of this credential.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.Check(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy,System.String,System.Boolean,System.DateTime)">
            <summary>
            Checks the credential if a password is valid according to the password policy and the stored credentials.
            </summary>
            <param name="passwordPolicyProvider">The password policy used to check the credential. <c>null</c> if there is no password policy.</param>
            <param name="password">The plaintext password to check as string</param>
            <param name="changeState"><c>true</c> if you want to increment (if necessary) the number of consecutive bad logins <c>false</c> otherwise.</param>
            <param name="now">the date and time form the based on date and time of the server</param>
            <returns><c>true</c> if the password matches, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.CheckPassword(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy,System.String,System.Boolean,System.DateTime)">
            <summary>
            Checks if a password matches the password stored in the credential.
            </summary>
            <param name="passwordPolicyProvider">The password policy used to validate the password.</param>
            <param name="password">The password to check as string</param>
            <param name="changeState"><c>true</c> if you want to increment (if necessary) the number of consecutive bad logins <c>false</c> otherwise.</param>
            <param name="now">the date and time form the based on date and time of the server</param>
            <returns><c>true</c> if the password matches, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.CheckPasswordAnswer(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy,System.String,System.Boolean,System.DateTime)">
            <summary>
            Checks if a password answer matches the password answer stored in the credential.
            </summary>
            <param name="passwordPolicyProvider">The password policy used to validate the password.</param>
            <param name="passwordAnswer">The password answer to check as string</param>
            <param name="changeState"><c>true</c> if you want to increment (if necessary) the number of consecutive bad logins <c>false</c> otherwise.</param>
            <returns><c>true</c> if the password matches, <c>false</c> otherwise.</returns>
            <param name="now">the date and time form the based on date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.SetPassword(System.String,System.DateTime)">
            <summary>
            Changes the password in the credential
            </summary>
            <param name="password">A hashed password as byte array.</param>
            <param name="now">the date and time form the based on date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.SetPasswordQuestionAndAnswer(System.String,System.String,System.DateTime)">
            <summary>
            Changes the password answer in the credential
            </summary>
            <param name="question">The password question.</param>
            <param name="answer">A hashed password answer as byte array.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.LastChangedTime">
            <summary>
            Gets the time that the credential (the password) was last changed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.PasswordQuestion">
            <summary>
            Gets the password question.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.LastAccessedTime">
            <summary>
            Gets the time that the credential (the password) was last checked.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.LastLoginTime">
            <summary>
            Gets or sets the date and time when the user was last authenticated.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.LastLockOutTime">
            <summary>
            Gets the most recent date and time that the membership user was locked out
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.ConsecutiveBadLoginCount">
            <summary>
            Gets the number of consecutive invalid password was used to authenticate this credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.PasswordHistory">
            <summary>
            Gets the list of password used by this credential (the first occurrence is the most recent password).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.Locked">
            <summary>
            Gets or sets a value indicating whether the credential is locked.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.IsApproved">
            <summary>
            Gets or sets a value indicating whether the credential can be authenticated.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.GraceLoginCount">
            <summary>
            Gets the number of grace logon used.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.Start">
            <summary>
            Gets or sets the start date for the credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.End">
            <summary>
            Gets or sets the end date for the credential.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.MustChangePasswordAtNextLogon">
            <summary>
            Gets or sets a boolean value indicating when the password must be changed at next logon.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.Duplicate(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Duplicates the credential information, reset the statistics
            </summary>
            <param name="userName">The username of the duplicated credential</param>
            <param name="password">The password of the duplicated credential</param>
            <param name="question">The password question of the duplicated credential</param>
            <param name="answer">The password answer of the duplicated credential</param>
            <param name="now">the date and time form the based on date and time of the server</param>
            <returns>a new instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.SetLock(System.Boolean,System.DateTime)">
            <summary>
            Locks or unlocks an account
            </summary>
            <param name="value">true to lock, false to unlock</param>
            <param name="utcNow">the current date of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>A copy of the current instance</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.SyncRoot">
            <summary>
            Gets an object for synchronization of the object
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGICredentialInformation.HashedPassword">
            <summary>
            Gets the current hashed password as byte array
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential">
            <summary>
            Represents an authentication credential consisting of a
            name and password associated with a user or system account.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential"/>
            class with the specified name and password.
            </summary>
            <param name="name">A name associated with a user or system account.</param>
            <param name="password">A password associated with a user or system</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential"/>
            class with the specified name and password.
            </summary>
            <param name="name">A name associated with a user or system account.</param>
            <param name="password">A password associated with a user or system account.</param>
            <remarks>
            It is recommended that you use <see cref="M:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.#ctor(System.String,System.Byte[])"/>
            so that you can overwrite the password bytes when you are done using them.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential"/>
            class with the specified name and securePassword.
            </summary>
            <param name="name">A name associated with a user or system account.</param>
            <param name="password">A password associated with a user or system account in secureString format.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.Name">
            <summary>
            Gets the name of this credential.
            </summary>
            <value>A string.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.PasswordBytes">
            <summary>
            Gets the password of this credential as a byte array.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.Password">
            <summary>
            Gets the password of this credential as a string.
            </summary>
            <remarks>
            It is recommended that you use PasswordBytes so that you can overwrite the password bytes
            when you are done using them.
            </remarks>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGNamePasswordCredential.VGModuleName">
            <summary>
            Gets a Module name
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection">
            <summary>
            Represents a Visual Guard hashed password collection
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection.#ctor">
            <summary>
            Creates an instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection"/> class
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection.#ctor(Novalys.VisualGuard.Security.Authentication.VGPasswordCollection)">
            <summary>
            Creates an instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection"/> class and copy the content of the specified collection.
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection.#ctor(Novalys.VisualGuard.Security.Authentication.VGPasswordCollection,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection"/> class and copy the content of the specified collection.
            </summary>
            <param name="col">the collection used to create a new collection</param>
            <param name="maxLength">the number of item to copy from the specified collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordCollection.Add(System.Byte[])">
            <summary>
            Adds an hashed password to the collection
            </summary>
            <param name="hashedPassword"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy">
            <summary>
            Password Policy Providers in the Visual Guard security infrastructure. This class encapsulates the
            basic policy of how password policies are retrieved from the underlying store and calls instrumentation. Details of how this all
            happens are left to subclasses.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.LastLoadedTime">
            <summary>
            Indicates the date and time of the creation of an instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.#ctor(Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.CheckPassword(System.String)">
            <summary>
            Checks the password against password policy
            </summary>
            <param name="plaintextPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.CheckPassword(System.String,Novalys.VisualGuard.Security.VGPasswordModificationStatus@)">
            <summary>
            Checks the password against password policy
            </summary>
            <param name="plaintextPassword">Plain password to check the password</param>
            <param name="passwordStatus">Password policy check status against the plain password</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.CheckPassword(Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet,System.String)">
            <summary>
            <para>Controls if password match all the rules of the policy</para>
            </summary>
            <param name="credential">Credential information stored in the repository</param>
            <param name="plaintextPassword">the password to check as byte array</param>
            <returns><c>true</c> if the password pass the validation rule, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.CheckNewPassword(Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleSupportedVGPasswordPolicy,System.String)">
            <summary>
            <para>Controls if a new password is valid according to the password policy</para>
            </summary>
            <param name="credential">Credential information stored in the repository</param>
            <param name="plaintextPassword">the password to check as string</param>
            <returns><c>true</c> if the password pass the validation rule, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.IsPasswordMustBeLocked(Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet)">
            <summary>
            <para>Indicates if the password must be locked according to the password policy.</para>
            </summary>
            <param name="credential">Credential information stored in the repository</param>
            <returns><c>true</c> if the password must be locked, <c>false</c> otherwise</returns>
            <remarks>the Built-In users (like the default master administrator) are never locked by the password policy.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.GetGraceLogOnRemaining(Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet,System.Boolean)">
            <summary>
            <para>Gets the number of logons allowed before the account is locked out.</para>
            </summary>
            <param name="credential">Credential information stored in the repository</param>
            <returns>the number of logons allowed before the password is locked if the password has expired.
            Returns 0 if the password is already locked.
            Returns <see cref="F:System.Int32.MaxValue"/> if the password has not expired or if the number of grace logins is unlimited.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.GetBadLogOnRemaining(Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet)">
            <summary>
            <para>Gets the number of bad logons allowed before the password is locked.</para>
            </summary>
            <param name="credential">Credential information stored in the repository</param>
            <returns>the number of bad logons allowed before the password is locked. Returns 0 if the password is already locked.
            Returns <see cref="F:System.Int32.MaxValue"/> if the number of bad logons is unlimited.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.IsPasswordExpired(Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet,System.DateTime)">
            <summary>
            <para>indicates if the password is expired</para>
            </summary>
            <param name="claims">Claims information </param>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <returns><c>true</c> if the password is expired, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.GetPasswordExpirationDate(Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet)">
            <summary>
            <para>Gets the password expiration date and time</para>
            </summary>
            <param name="credential">Credential information stored in the repository</param>
            <returns><see cref="F:System.DateTime.MaxValue"/> when the password never expire, the expiration date and time otherwise</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.ValidationMsg">
            <summary>
            Gets the message displayed to the user if the password does not match the validation rules.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets or sets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.MinRequiredPasswordLength">
            <summary>
            Gets or sets the minimum length required for a password.
            </summary>
            <value>The minimum length required for a password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.PasswordAttemptWindow">
            <summary>
            Gets the time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.
            </summary>
            <value>The time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.</value>
            <remarks>This property works in conjunction with the <see cref="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.MaxInvalidPasswordAttempts"/> property to help guard against an unwanted source guessing the password or password answer of a membership user through repeated attempts.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the user is locked out.
            </summary>
            <value>The number of invalid password or password-answer attempts allowed before the user is locked out.</value>
            <remarks>This property works in conjunction with the <see cref="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.PasswordAttemptWindow"/> property to help guard against an unwanted source guessing the password or password answer of a membership user through repeated attempts.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate if the password.
            </summary>
            <value>A regular expression used to evaluate a password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.RequiresUniqueEmail">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <value>The number of failed password answer attempts a user is allowed before the account is locked.</value>
            <remarks></remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the repository requires the user to answer a password question for password reset.
            </summary>
            <value>true if a password answer is required for password reset; otherwise, false.</value>
            <remarks>Requiring a password question and answer provides an additional layer of security when retrieving or resetting a user's password. Users can supply a question and answer when their user name is created that they can later use to reset a forgotten password.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the repository is configured to allow users to reset their passwords.
            </summary>
            <value>true the repository supports password reset; otherwise, false.</value>
            <remarks>Password reset is the ability for ASP.NET application to replace the current password for a user name with a new, randomly generated password when a user has forgotten their password or the current password is no longer valid.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.GraceLoginsAllowed">
            <summary>
            Gets the number of times the user can log on after the password has expired.
            </summary>
            <value>the number of times the user can log on after the password has expired. <see cref="F:System.Int32.MaxValue"/> means that the grace logins are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.ConsecutiveBadLoginsAllowed">
            <summary>
            Gets the number of times the user can try to log.
            </summary>
            <value>the number of times the user can try to log. <see cref="F:System.Int32.MaxValue"/> means that the grace logins are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.PasswordValidation">
            <summary>
            Gets or sets the configured regular expression used for validating the password format.
            </summary>
            <value>The configured regular expression used for validating the password format.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.IsAutoUnlockBlockedAccountAllowed">
            <summary>
            Gets a value indicating if auto unlock blocked account is allowed or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy.AutoUnlockBlockedAccountAfterDelayInMinutes">
            <summary>
            Gets a value indicating Auto 
            Unlock blocked account after delay in minutes.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData">
            <summary>
            Configuration data for the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicy"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.#ctor(System.String,System.String,System.String,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
            <param name="passwordValidation">
            <para>The regular expression used to validate the password.</para>
            </param>
            <param name="passwordValidationMsg">
            <para>The error message displayed if the password does not match the validation rules.</para>
            </param>
            <param name="maxAge">
            <para>the maximum number of milliseconds that a password is valid (<see cref="F:System.Int64.MaxValue"/> if the password never expires)</para>
            </param>
            <param name="historyLength">
            <para>The maximum number of most recent password that will not be able to reuse (0 if a password is always reusable).</para>
            </param>
            <param name="consecutiveBadLoginsAllowed">
            <para>The maximum number of consecutive invalid password before locking an account.</para>
            </param>
            <param name="graceLoginsAllowed">
            <para>The number of times the user can log on after the password has expired.</para>
            </param>
            <param name="minRequiredNonAlphanumericCharacters">
            <para>The minimum number of special characters that must be present in a valid password.</para>
            </param>
            <param name="minRequiredPasswordLength">
            <para>The minimum length required for a password.</para>
            </param>
            <param name="passwordAttemptWindow">The time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.PasswordValidation">
            <summary>
            Gets or sets the configured regular expression used for validating the password format.
            </summary>
            <value>The configured regular expression used for validating the password format.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.PasswordPolicyMessage">
            <summary>
            Gets or sets the message displayed to the user if the password does not match the validation rules.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.MaxAge">
            <summary>
            Gets or sets the number of ticks (100 nanoseconds) after which a password will expire.
            </summary>
            <value>The configured number of ticks (100 nanoseconds) after which a password will expire. <see cref="F:System.Int64.MaxValue"/> means that the passwords will never expire.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.ConsecutiveBadLoginsAllowed">
            <summary>
            Gets or sets the maximum number of consecutive invalid password.
            </summary>
            <value>the maximum number of consecutive invalid password. <see cref="F:System.Int32.MaxValue"/> means that invalid password attempts are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.HistoryLength">
            <summary>
            Gets or sets the length of the old password history. This history is used to check if a new password is the same as an old password.
            </summary>
            <value>The length of the history. 0 if a user can reuse an old password as new password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.PasswordAttemptWindow">
            <summary>
            Gets or sets the time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.
            </summary>
            <value>The time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.</value>
            <remarks>This property works in conjunction with the <see cref="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.ConsecutiveBadLoginsAllowed"/> property to help guard against an unwanted source guessing the password or password answer of a membership user through repeated attempts.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets or sets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.MinRequiredPasswordLength">
            <summary>
            Gets or sets the minimum length required for a password.
            </summary>
            <value>The minimum length required for a password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.GraceLoginsAllowed">
            <summary>
            Gets or sets the number of times the user can log on after the password has expired.
            </summary>
            <value>the number of times the user can log on after the password has expired. <see cref="F:System.Int32.MaxValue"/> means that the grace logins are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.RequiresUniqueEmail">
            <summary>
            Gets or sets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <value>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</value>
            <remarks>
            This value is defined in the Visual Guard repository and can be modified by editing the password policy in the Visual Guard console. 
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.RequiresQuestionAndAnswer">
            <summary>
            Gets or sets a value indicating whether the repository requires the user to answer a password question for password reset.
            </summary>
            <value>true if a password answer is required for password reset; otherwise, false.</value>
            <remarks>Requiring a password question and answer provides an additional layer of security when retrieving or resetting a user's password. Users can supply a question and answer when their user name is created that they can later use to reset a forgotten password.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.EnablePasswordReset">
            <summary>
            Gets or sets a value indicating whether the repository is configured to allow users to reset their passwords.
            </summary>
            <value>true the repository supports password reset; otherwise, false.</value>
            <remarks>Password reset is the ability for ASP.NET application to replace the current password for a user name with a new, randomly generated password when a user has forgotten their password or the current password is no longer valid.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.AutoUnlockBlockedAccountAfterDelayInMinutes">
            <summary>
            Gets or sets a value indicating Auto unlock blocked account after delay of minutes specified.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the serialization info of the object
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.SaltLength">
            <summary>
            Returns the salt length used by the provider.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.CreateHash(System.Byte[])">
            <summary>
            Computes the hash value of plain text.
            </summary>
            <param name="plaintext">The input for which to compute the hash.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.CompareHash(System.Byte[],System.Byte[])">
            <summary>
            Compares plain text input with a computed hash.
            </summary>
            <param name="plaintext">The input for which you want to compare the hash to.</param>
            <param name="hashedtext">The hash value for which you want to compare the input to.</param>
            <returns><c>true</c> if plainText hashed is equal to the hashedText. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.CreateHashWithSalt(System.Byte[],System.Byte[])">
            <summary>
            Creates a hash with a specified salt.
            </summary>
            <param name="plaintext">The plaintext to hash.</param>
            <param name="salt">The hash salt.</param>
            <returns>The computed hash.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.ExtractSalt(System.Byte[])">
            <summary>
            Extracts the salt from the hashedText.
            </summary>
            <param name="hashedtext">The hash in which to extract the salt.</param>
            <returns>The extracted salt.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.GetHashCryptographer">
            <summary>
            Gets the cryptographer used for hashing.
            </summary>
            <returns>
            A <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer"/> object.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Authentication.VGSHA256CryptoHashProvider.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:HashAlgorithmProvider"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:HashAlgorithmProvider"></see>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Authentication.VGUserNotFoundException">
            <summary>
            Exception thrown when the user's credentials are not found in the given repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGUserNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGUserNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGUserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Authentication.VGUserNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Authentication.VGUserNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.DefaultValue">
            <summary>
            DefaultValue for the attribute
            </summary>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.ValidateAttributeDefinitionCore(System.Exception@)">
            <summary>
            When the customer changes the object, before to save in database, we check if the data is correct.
            It Validates Attribute definition. ex. If Default value of the attribute meets criteria, or any specific condition for attribute definition object.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.ValidateAttributeValue(System.Object,System.Exception@)">
            <summary>
            Validates attribute value against its datatype, if attribute value passed is corresponding to attribute's datatype.
            ex. For Integer attribute, passed value is integer or other datatype (double, string )
            </summary>
            <param name="value"></param>
            <param name="ex"></param>
            <returns>True if attribute value passed is corresponding to attribute's datatype</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.Parse(System.Object)">
            <summary>
            Parses the Attribute Value based on its type
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.CheckValue(`0,System.Exception@)">
            <summary>
            Checks value agains parameters set for the attribute.
            ex. MinValue, MaxValue specified for integer attribute. Then passed value is within range of MinValue and MaxValue.
            </summary>
            <param name="propertyValue">Attribute's propertyValue</param>
            <param name="ex">Exception object</param>
            <returns>true if attribute value supports all criterias specified for it, else returns false. </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.AttributeDefinitionDescription">
            <summary>
             ProfileAttribute definition description
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.DataTypeEnum">
            <summary>
            DataType Enum value of the ProfileAttribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.IsDefaultValueSupported">
            <summary>
            IsDefaultValue supported for attribute
            </summary>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.CanParse(System.Object)">
            <summary>
            returns true if attribute value can be parsed else false.
            </summary>
            <param name="value">attributeValue</param>
            <returns>returns true if attribute value can be parsed else false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.CheckValue(`0)">
            <summary>
            Checks value agains parameters or criterias set for the attribute.
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.CheckValue(System.Object,System.Exception@)">
            <summary>
            Checks value agains parameters or criterias set for the attribute.
            </summary>
            <param name="value"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.GetDefaultValue">
            <summary>
            Gets default value for attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinition`1.ValidateAttributeDefinition(System.Exception@)">
            <summary>
            Validates Attribute definition object.
            ex. If Default value of the attribute meets criteria, MinValue is greaterthan MaxValue. or any specific condition for attribute definition object.
            </summary>
            <param name="ex"></param>
            <returns>True if attribute definition corresponds to criteria else false</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDateTime.MinDate">
            <summary>
            Minimum Value
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDateTime.MaxDate">
            <summary>
            Maximum Value
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDateTime.CheckValue(System.DateTime,System.Exception@)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDouble.MinValue">
            <summary>
            Minimum Value
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDouble.MaxValue">
            <summary>
            Maximum Value
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDouble.CheckValue(System.Double,System.Exception@)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionDropDownList.Items">
            <summary>
            List of Items.
            </summary>        
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionInteger.MinValue">
            <summary>
            Minimum Value
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionInteger.MaxValue">
            <summary>
            Maximum Value
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionInteger.CheckValue(System.Int32,System.Exception@)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionInteger.ValidateAttributeValue(System.Object,System.Exception@)">
            <summary>
            Validates attribute value against its datatype, if attribute value passed is corresponding to attribute's datatype.
            ex. For Integer attribute, passed value is integer or other datatype (double, string )
            </summary>
            <param name="value"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileAttributeDefinitionInteger.Parse(System.Object)">
            <summary>
            parses the value into its datatype value.
            </summary>
            <param name="value"></param>
            <returns>ParsedValue</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.IsReadOnly">
            <summary>
            This property is used when you update the value of the attribute in VGSecurityEngine
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.IsReadOnlyForUI">
            <summary>
            This property is used when you update the value of the attribute in WinConsole and WebConsole
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.GetDefaultValue">
            <summary>
            Gets default value for attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.ValidateAttributeValue(System.Object,System.Exception@)">
            <summary>
            Validates attribute value against its datatype, if attribute value passed is corresponding to attribute's datatype.
            ex. For Integer attribute, passed value is integer or other datatype (double, string )
            </summary>
            <param name="value">propertyValue</param>
            <param name="ex">out exception</param>
            <returns>True if attribute value passed is corresponding to attribute's datatype</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.CheckAttributeValue(System.Object,System.Exception@)">
            <summary>
            Checks value agains parameters set for the attribute.
            ex. MinValue, MaxValue specified for integer attribute. Then passed value is within range of MinValue and MaxValue.
            </summary>
            <param name="propertyValue">Attribute's propertyValue</param>
            <param name="ex">Exception object</param>
            <returns>true if attribute value supports all criterias specified for it, else returns false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.ValidateAttributeDefinition(System.Exception@)">
            <summary>
            Validates Attribute definition object.
            ex. If Default value of the attribute meets criteria, MinValue is greaterthan MaxValue. or any specific condition for attribute definition object.
            </summary>
            <param name="ex">Exception if any</param>
            <returns>Result for validation of attributeDefinition object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileAttributeInformation.CanParseAttributeValue(System.Object)">
            <summary>
            Checks Can parse attribute value against appropriate datatype.
            </summary>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileValue.VGCommonProfileValue.Value">
            <summary>
            PropertyValue
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileValue.VGCommonProfileValue.ValueImage">
            <summary>
            PropertyValueImage
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.Crypto.VGCryptoKeyInformation.CommunicationStandard">
            <summary>
            Get Standard key of VG
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.Crypto.VGCryptoKeyInformation.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <returns>The padding mode used in the symmetric algorithm. The default is System.Security.Cryptography.PaddingMode.PKCS7.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException" />
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.Crypto.VGCryptoKeyInformation.Type">
            <summary>
            Define is it Communication key or storage key
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.Crypto.VGCryptoKeyInformation.Algorithm">
            <summary>
            What type of crypto algo is used
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.Crypto.VGCryptoKeyInformation.Status">
            <summary>
            Define the status of the key
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.Crypto.VGCryptoKeyInformation.IsFIPSSupported">
            <summary>
            Defines if the key is supported for FIPS compliance
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.ErrorLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.ErrorLevel.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.ErrorLevel.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.ErrorLevel.Fatal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugIn">
            <summary>
            Represents PlatformPlugIn for any feature. ex. LikeOperator, AssemblyHelper, AppDomainHelper etc.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAppDomainHelper">
            <summary>
            Represents AppDomain plugin.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAppDomainHelper.CreateInstanceAndUnwrap(System.AppDomain)">
            <summary>
            Create instance and unwrap the object
            </summary>
            <param name="_appDomain">AppDomain</param>
            <returns>Loader</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAssemblyHelper">
            <summary>
            Represents AssemblyHelper platform plugin
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAssemblyHelper.FormIsAssignableFrom(System.Type)">
            <summary>
            Checks if form is assignable to type
            </summary>
            <param name="type">Type of object</param>
            <returns>True if form is assignable to type else false</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAssemblyHelper.PageIsAssignableFrom(System.Type)">
            <summary>
            Checks if Page is assignable to type
            </summary>
            <param name="type">Type of object</param>
            <returns>True if Page is assignable to type else false</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAssemblyHelper.MasterPageIsAssignableFrom(System.Type)">
            <summary>
            Checks if MasterPage is assignable to type
            </summary>
            <param name="type">Type of object</param>
            <returns>True if MasterPage is assignable to type else false</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAssemblyHelper.SaveAssembly(System.Reflection.Emit.AssemblyBuilder)">
            <summary>
            Saves assembly 
            </summary>
            <param name="assemblyBuilder">assemblyBuilder</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInAssemblyHelper.DefineDynamicModule(System.Reflection.Emit.AssemblyBuilder,System.String,System.Boolean)">
            <summary>
            Defines dynamic module
            </summary>
            <param name="assemblyBuilder">AssemblyBuilder</param>
            <param name="name">Name of module</param>
            <param name="isEmitSymbolInfo">isEmitSymbolInfo</param>
            <returns>ModuleBuilder</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInIdentityModules">
            <summary>
            Represents a Platform plugin interface for Identity Modules 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInIdentityModules.GetModules">
            <summary>
            Gets plugin modues depending on platform of application.
            </summary>
            <returns>List of Identity Modules</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInLikeOperator">
            <summary>
            Represents LikeOperator plugin
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInLikeOperator.LikeString(System.String,System.String,System.String)">
            <summary>
            Checks if string matches.
            </summary>
            <param name="text">text</param>
            <param name="pattern">pattern</param>
            <param name="compareMethodText">compareMethodText</param>
            <returns>True if matches else false</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInsProvider">
            <summary>
            Represents VG Platform Plugin Provider
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInsProvider.VGAssemblyHelper">
            <summary>
            Gets VGPlatformPlugIn for AssemblyHelper 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInsProvider.VGLikeOperatorHelper">
            <summary>
             Gets VGPlatformPlugIn for LikeOperator
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInsProvider.VGAppDomainHelper">
            <summary>
            Gets VGPlatformPlugIn for AppDomainHelper
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInsProvider.IdentityModules">
            <summary>
            Gets VGPlatformPlugIn for Identity Modules
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGIPlatformPlugInsProvider.Type">
            <summary>
            Gets Type of VGPlatformPlugInProvider. ex. NetFramework, NetCore etc.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGPlatformPlugInsProviderType">
            <summary>
            This enum Represents a list of PlugInsProvider Types, ex. .Netframework, .NetCore, etc.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGPlatformPlugInsProviderType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGPlatformPlugInsProviderType.NetFramework">
            <summary>
            PlatformPlugInProvider for .Net framework
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.PlatformPlugIns.Interfaces.VGPlatformPlugInsProviderType.NetCore">
            <summary>
            PlatformPlugInProvider for Core .Net
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager">
            <summary>
            Represents VG Platform PlugIns Provider Manager.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.Current">
            <summary>
            Gets Current Instance of VGPlatformPlugInsProviderManager
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.Initialize(Novalys.VisualGuard.Security.App.VGApplicationFrameworkType)">
            <summary>
            Initializes PlatformPlugins provider for entry assembly in this appDomain(coreDomain or netframework domain) depending on application frameworktype.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager._vgPlatformPlugInsProvider">
            <summary>
            Gets PlatformPlugInsProvider
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.VGAssemblyHelper">
            <summary>
            Gets a platformPlugin - AssemblyHelper.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.VGPlatformPlugInLikeOperator">
            <summary>
            Gets a platformPlugin - LikeOperator.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.VGPlatformPlugInAppDomainHelper">
            <summary>
            Gets a platformPlugin - AppDomainHelper.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.IdentityModules">
            <summary>
            Gets a platformPlugin - IdentityModules.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.PlatformPlugIns.VGPlatformPlugInsProviderManager.Type">
            <summary>
            Gets a platformPlugin ProviderType.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGIProgressReporter">
            <summary>
            Interface to report Progress in Asynchronous way
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIProgressReporter.Primary">
            <summary>
             Set this property by SetProgressSecondary() 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIProgressReporter.Secondary">
            <summary>
            Set Total Steps in Secondary progress
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIProgress.CurrentStep">
            <summary>
            Set this property by SetProgressPrimary() 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIProgress.TotalStep">
            <summary>
            Set Total Steps in Primary progress
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIProgress.Title">
            <summary>
            Title or name of Primary progress
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGProgressInfo.SetIncrease">
            <summary>
            Increase the currentStep +1
            </summary>
            <param name="progress"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGProgressInfo.SetIncrease(System.String)">
            <summary>
            Increase the currentStep +1 and change the title
            </summary>
            <param name="progress"></param>
            <param name="title"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGProgressInfo.SetProgress(System.Int32)">
            <summary>
            Define the current step of the progress
            </summary>
            <param name="progress"></param>
            <param name="step"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGProgressInfo.SetProgress(System.Int32,System.Int32)">
            <summary>
            Set the progress
            </summary>
            <param name="progress"></param>
            <param name="step">Current step you want</param>
            <param name="totalStep">Define the title in the UI</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGProgressInfo.SetProgress(System.Int32,System.String)">
            <summary>
            Define current step and the title
            </summary>
            <param name="progress"></param>
            <param name="step"></param>
            <param name="title"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGProgressInfo.SetProgress(System.Int32,System.Int32,System.String)">
            <summary>
            Define current step, total step and the title
            </summary>
            <param name="progress"></param>
            <param name="step"></param>
            <param name="totalStep"></param>
            <param name="title"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGActionTransport">
            <summary>
            Represents a class for transporting information about action.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGActionTransport.#ctor(Novalys.VisualGuard.Security.Permission.VGGrantedAction,Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="permission"></param>
            <param name="processorProvider"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGActionTransport.Action">
            <summary>
            Gets or sets Action
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGActionTransport.Permission">
            <summary>
            Gets or sets Permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGActionTransport.ApplicationProcessorProvider">
            <summary>
            Gets or sets provider of the application processor.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGAppDomainProperties">
            <summary>
            Allows to share properties between Visual Guard Console and the secured application at design time.
            </summary>
            <remarks>This class is duplicated in the "Tools.AppDomainAssemblyLoader" project</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGAppDomainProperties.AppId">
            <summary>
            Sets/Gets the unique identifier of the application loaded in current domain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGAppDomainProperties.DesignMode">
            <summary>
            Indicates if the current AppDomain is in design mode (loaded from the Visual Guard Console).
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGApplicationStorage">
            <summary>
            Class used to persist information about the application.
            </summary>
            <example><code lang="CSharp">
            VGApplicationStorage appInfo = new VGApplicationStorage();
            string lastPath = appInfo["LastPath"];
            appInfo[LastPath]="C:\";
            appInfo.Save();
            </code></example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.ReLoad">
            <summary>
            Reload data from file
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.Save">
            <summary>
            Saves the configuration data to the persistent storage.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.GetStringValue(System.String)">
            <summary>
            Gets the string value corresponding to the specified key.
            </summary>
            <param name="key">The key of the value</param>
            <returns>a string value corresponding to the specified key.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.GetBooleanValue(System.String)">
            <summary>
            Gets a boolean value stored in the Application storage file
            </summary>
            <param name="key">The key of the value</param>
            <returns>a boolean value corresponding to the specified key.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.GetValue(System.String)">
            <summary>
            Gets the value of the specified key.
            </summary>
            <param name="key">The key of the value</param>
            <returns>An object containing the value corresponding to the specified key. null if the key is not found.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.SetValue(System.String,System.Object)">
            <summary>
            Sets the value for a specified key and save it.
            </summary>
            <param name="key">The key of the value</param>
            <param name="value">the value that will be saved.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value and saves it if it is specified
            </summary>
            <param name="key">the key of the value</param>
            <param name="value">the value to save</param>
            <param name="save">a boolean value indicating if the value must be saved immediately.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.DeleteValue(System.String,System.Boolean)">
            <summary>
            Deletes a value and saves the modification if it is specified
            </summary>
            <param name="key">the key of the value</param>
            <param name="save">a boolean value indicating if the modification must be saved immediately.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.DeleteValue(System.String)">
            <summary>
            Deletes a value and saves the modification in the file.
            </summary>
            <param name="key">the key of the value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGApplicationStorage.GetValue``1(System.String,``0)">
            <summary>
            Gets a value of the specified control and key.
            </summary>
            <typeparam name="T">the type of the value returned.</typeparam>
            <param name="key">the key of the value.</param>
            <param name="defaultValue">the default value if there is no value for the specified control and key</param>
            <returns>the value corresponding to the key if it exists. the default value otherwise.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGArgumentValidation">
            <summary>
            <para>Common validation routines for argument validation.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForEmptyString(System.String,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> is an empty string.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <remarks>
            <para>Before checking the <paramref name="variable"/>, a call is made to <see cref="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForNullReference(System.Object,System.String)"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not be <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> can not be a zero length <see cref="T:System.String"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForNullReference(System.Object,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> is <see langword="null"/> (Nothing in Visual Basic).</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForLength(System.String,System.Int32,System.String)">
            <summary>
            <para>Check if the <paramref name="variable"/> length is greater than the specified length.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="maxSize">The maximum size of the specified value.</param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> length is greater than <pararef name="maxSize"/>.
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForLength(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            <para>Check if the <paramref name="variable"/> length is greater than the specified length.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="maxSize">The maximum size of the specified value.</param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <param name="allowsNull">true to allow null, false to throw <see cref="T:System.ArgumentNullException"/> if variable is null</param>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> length is greater than <pararef name="maxSize"/>.
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForLength(System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            <para>Check if the <paramref name="variable"/> length is greater than the specified length.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="maxSize">The maximum size of the specified value.</param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <param name="allowsNull">true to allow null, false to throw <see cref="T:System.ArgumentNullException"/> if variable is null</param>
            <param name="allowsEmpty">true to allow empty string, false to throw <see cref="T:System.ArgumentException"/> if variable is an empty string.</param>
            <exception cref="T:System.ArgumentException">
            <pararef name="variable"/> length is greater than <pararef name="maxSize"/>.
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
            Validates that the input messageName is neither null nor empty
            </summary>
            <param name="name">Parameter name</param>
            <param name="messageName">Parameter value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
            <para>Checks <paramref name="bytes"/> for zero length and throw an <see cref="T:System.ArgumentException"/> if the length equals zero.</para>
            </summary>
            <param name="bytes">
            The <see cref="T:System.Byte"/> array to check.
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="bytes"/> can not be zero length.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckExpectedType(System.Object,System.Type)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it matches the <see cref="T:System.Type"/> of <paramref name="type"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="type">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="typeName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
            <para>Check <paramref name="variable"/> to determine if it is a valid defined enumeration for <paramref name="enumType"/>.</para>
            </summary>
            <param name="variable">
            <para>The value to check.</para>
            </param>
            <param name="enumType">
            <para>The <see cref="T:System.Type"/> expected type of <paramref name="variable"/>.</para>
            </param>
            <param name="variableName">
            <para>The name of the variable being checked.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <pararef name="variable"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="enumType"/> can not <see langword="null"/> (Nothing in Visual Basic).
            <para>- or -</para>
            <pararef name="variableName"/> can not <see langword="null"/> (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="variable"/> is not the expected <see cref="T:System.Type"/>.
            <para>- or -</para>
            <par><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>. </par>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckNameValidity(System.String,System.Int32,System.Char[],System.String)">
            <summary>
            Checks if the specified value is a valid name
            </summary>
            <param name="value">the name to check</param>
            <param name="length">the maximum length of the name</param>
            <param name="invalidCharsForName">An array of invalid char.</param>
            <param name="name">the name of the field to check.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGArgumentValidation.CheckInvalidCharsForName(System.String,System.Char[],System.String)">
            <summary>
            Checks if a string contains invalid chars.
            </summary>
            <param name="value"></param>
            <param name="invalidCharsForName"></param>
            <param name="name"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGCache">
            <summary>
            Represents a cache for <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> objects
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.#ctor(System.Type,Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Common.VGCache"/> class
            </summary>
            <param name="supportedType">the type supported by the cache</param>
            <param name="cacheManager">the cache manager associated to the cache.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.IndexOf(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>Searches for the specified item and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
            <param name="item">The item to locate in the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.IndexOf(System.String)">
            <summary>Searches for the specified item and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
            <param name="repositoryId">The item to locate in the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Insert(System.Int32,Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>Inserts an element into the collection at the specified index.</summary>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">this method is not supported by the collection.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the collection.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.IsReadOnly">
            <summary>
            Inidicates whether the collection is in read only mode
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Remove(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Removes the specified item form the collection
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if item was successfully removed from the collection; false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Remove(System.String)">
            <summary>
            Removes the item object with the specified item name from the collection.
            </summary>
            <param name="repositoryId">The item repository Id of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to remove from the collection.</param>
            <returns>true when the item is removed, false otherwise</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Add(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Adds the specified membership item to the collection.
            </summary>
            <param name="item">A <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to add to the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Add(Novalys.VisualGuard.Security.Common.VGIInformation,System.Boolean)">
            <summary>
            Adds the specified membership item to the collection.
            </summary>
            <param name="item">A <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to add to the collection.</param>
            <param name="fromRefresh">Indicates that the item is added during a refreh</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.GetRefreshCacheStatus(System.String)">
            <summary>
            Gets the refresh status of the specified item
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>the status of the item</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.RefreshData(Novalys.VisualGuard.Security.Common.VGIInformation,System.Boolean)">
            <summary>
            Refreshes the item in the cache
            </summary>
            <param name="item">the item to refresh</param>
            <param name="fromRefresh">indicates whether the refresh is done by a RefreshAllItems or not</param>
            <returns>true if the item was changed in the cache, false if the item has the same timestamp as the item in stored in the cache.</returns>
            <exception cref="T:System.ArgumentException">the item does not exist in the cache</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGCache.RefreshCacheStatus">
            <summary>
            Indicates the refresh status of an item in the cache
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGCache.RefreshCacheStatus.NotExists">
            <summary>
            The item does not exist in the cache
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGCache.RefreshCacheStatus.Exists">
            <summary>
            The item exist but was not added by a refresh
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGCache.RefreshCacheStatus.ExistsAndLoadedByRefresh">
            <summary>
            The item exist but was added by a refresh
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Clear">
            <summary>
            Removes all repository item objects from the collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.Item(System.Int32)">
            <summary>
            Gets the item in the collection referenced by the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> to retrieve from the collection.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.Item(System.String)">
            <summary>
            Gets the membership item in the collection referenced by the specified item name.
            </summary>
            <param name="repositoryId">The repository id of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> to retrieve from the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Contains(System.String)">
            <summary>
            Indicates if the item already exists in the collection.
            </summary>
            <param name="repositoryId">item id to look for.</param>
            <returns>true if an item with the same id already exists in the collection.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.Contains(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Indicates if the item already exists in the collection.
            </summary>
            <param name="item">item to look for.</param>
            <returns>true if an item with the same id already exists in the collection.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.Count">
            <summary>
            Gets the number of item objects in the collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the membership item collection.
            </summary>
            <returns>An IEnumerator for the entire <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.CopyTo(Novalys.VisualGuard.Security.Common.VGIInformation[],System.Int32)">
            <summary>
            Copies the item collection to a one-dimensional array.
            </summary>
            <param name="array">A one-dimensional array of type <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> that is the destination of the elements copied from the <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/>. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.InvalidItemFromCache(System.String)">
            <summary>
            Indicates that an item is no more valid in the cache
            </summary>
            <param name="repositoryId"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.SupportedType">
            <summary>
            Gets the type of the item stored in the collection. This type is derived from <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.GetAllItems">
            <summary>
            Gets the list of items
            </summary>
            <returns>the list of items.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.IsValidInCache(System.String)">
            <summary>
            Indicates whether an item is in the collection and is not expired
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>true if the item exists and is not expired. false if the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.RefreshCache(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Refresh the expiration of object in the cache
            </summary>
            <param name="item">the item to refresh</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.FindItems(System.String,System.String[],System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Finds an item in the collection
            </summary>
            <param name="propertyName"></param>
            <param name="valuesToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="useValueAsRegEx"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.GetItemInCache(System.String)">
            <summary>
            Gets an item that is not expired in the collection for the specified repository id
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>the item corresponding to the specified whether the item is not expired. null when the item does not exist or is expired.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.UpdateRefreshStatistic(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Update the statistic of the last refresh
            </summary>
            <param name="lastCount">the count of item in the table</param>
            <param name="lastRequestTime">the date and time of the last refresh request</param>
            <param name="lastModifiedTime">the date and time of the last modified item</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCache.ForceToRefresh">
            <summary>
            Force the cache to be refreshed during the next refresh
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.LastRefreshCount">
            <summary>
            Gets the number of items in the last refresh 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.ShouldCheckDeleted">
            <summary>
            Gets the number of items in the last refresh 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.ShouldBeRefreshed">
            <summary>
            Indicates whether the cache should be refreshed or not
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.NeverRefreshed">
            <summary>
            Indicates whether the cache has never been refreshed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.LastRequestTime">
            <summary>
            Gets the date and time of last modified item loaded during the last refresh
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGCache.LastModifiedTime">
            <summary>
            Gets the date and time of last modified item loaded during the last refresh
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCommonHelper.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Checks if a string can parse to Guid.
            </summary>
            <param name="value"></param>
            <param name="guidValue"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGCompressedVersioningDeserializationBinder">
            <summary>
            Allows to bind different versions of Visual Guard serialized class to the current version
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCompressedVersioningDeserializationBinder.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGVersioningDeserializationBinder"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGCompressedVersioningDeserializationBinder.BindToType(System.String,System.String)">
            <summary>
            Change the version of the type name to the current version of the type.
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGDataCollection">
            <summary>
            <para>Represents a collection of configuration data items.</para>
            </summary>  
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> class that is serializable and uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</para>
            </summary>
            <param name="info">
            <para>A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains the information required to serialize the new <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance. </para>
            </param>
            <param name="context">
            <para>A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains the source and destination of the serialized stream associated with the new <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.Keys">
            <summary>
            <para>Gets a <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> instance that contains all the keys in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <value>
            <para>A <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> instance that contains all the keys in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.Count">
            <summary>
            Gets the number of key-and-value pairs contained in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.
            </summary>
            <value>
            <para>The number of key-and-value pairs contained in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.SyncRoot">
            <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/>.</para>
            </summary>
            <value>
            <para>An object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.IsSynchronized">
            <summary>
            <para>Gets a value indicating whether access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> is synchronized (thread-safe).</para>
            </summary>
            <value>
            <para><see langword="true"/> if access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> is synchronized (thread-safe); otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed to serialize the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.OnDeserialization(System.Object)">
            <summary>
            <para>Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises the deserialization event when the deserialization is complete.</para>
            </summary>
            <param name="sender">
            <para>The source of the deserialization event.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.Remove(System.String)">
            <summary>
            <para>Removes the entry with the specified <paramref name="name"/> from the collection.</para>
            </summary>
            <param name="name">
            <para>The name of the item to remove.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to remove.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only. </para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> contains a specific key.
            </summary>
            <param name="name">
            <para>The key to locate in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/>.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> contains an element with the specified key; otherwise, <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.Clear">
            <summary>
            <para>Removes all entries from the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/>.</para>
            </summary>
            <remarks>
            <para><seealso cref="P:Novalys.VisualGuard.Security.Common.VGDataCollection.Count"/> is set to zero.</para>
            </remarks>
            <seealso cref="M:System.Collections.IList.Clear"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator that can iterate through the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/>.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.IsReadOnly">
            <summary>
            <para>Gets or sets a value indicating whether the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance is read-only.</para>
            </summary>
            <value><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance is read-only; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseHasKeys">
            <summary>
            <para>Gets a value indicating whether the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance contains entries whose keys are not a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </summary>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance contains entries whose keys are not a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic); otherwise, <see lagword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseAdd(System.String,System.Object)">
            <summary>
            <para>Adds an entry with the specified key and value into the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to add. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <param name="value">
            <para>The object value of the entry to add. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            <para>The collection already contains an entry for <paramref name="name"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseRemove(System.String)">
            <summary>
            <para>Removes the entries with the specified key from the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to add. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseRemoveAt(System.Int32)">
            <summary>
            <para>Removes the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to remove.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            <para>- or -</para>
            <para>The collection has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseClear">
            <summary>
            Removes all entries from the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.
            </summary>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseGet(System.Int32)">
            <summary>
            <para>Gets the value of the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the value to get.</para>
            </param>
            <returns>
            <para>An object that represents the value of the entry at the specified index.</para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseGet(System.String)">
            <summary>
            <para>Gets the value of the first entry with the specified key from the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to add. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <returns>
            <para>An object that represents the value of the first entry with the specified key, if found; otherwise, a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.IndexOf(System.String)">
            <summary>
            Searches for the specified name and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="name">the name of the item to locate in the collection</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseSet(System.Int32,System.Object)">
            <summary>
            <para>Sets the value of the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to set.</para>
            </param>
            <param name="value">
            <para>The object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseSet(System.String,System.Object)">
            <summary>
            <para>Sets the value of the first entry with the specified key in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance, if found; otherwise, adds an entry with the specified key and value into the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to set. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <param name="value">
            <para>The object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            <para>The collection already contains an entry for <paramref name="name"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseGetKey(System.Int32)">
            <summary>
            <para>Gets the key of the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the key to get.</para>
            </param>
            <returns>
            <para>A string that represents the key of the entry at the specified index.</para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseGetAllKeys">
            <summary>
            <para>Returns a String array that contains all the keys in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <returns>
            <para>A string array that contains all the keys in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseGetAllValues">
            <summary>
            <para>Returns an Object array that contains all the values in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <returns>
            <para>An object array that contains all the values in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.BaseGetAllValues(System.Type)">
            <summary>
            <para>Returns an array of the specified type that contains all the values in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="type">
            <para>A <see cref="T:System.Type"/> that represents the type of array to return.</para>
            </param>
            <returns>
            <para>An array of the specified type that contains all the values in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection">
            <summary>
            <para>Represents a collection of the String keys of a collection.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.Get(System.Int32)">
            <summary>
            <para>Gets the key at the specified index of the collection.</para>
            </summary>
            <param name="index"><para>The zero-based index of the key to get from the collection.</para></param>
            <returns><para>A string that contains the key at the specified index of the collection.</para></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.Item(System.Int32)">
            <summary>
            <para>Gets the entry at the specified index of the collection.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to locate in the collection.</para>
            </param>
            <value>
            <para>The string key of the entry at the specified index of the collection.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.GetEnumerator">
            <summary>
            <para>Returns an enumerator that can iterate through the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </summary>
            <returns>
            <para>An <para>IEnumerator</para> for the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.Count">
            <summary>
            <para>Gets the number of keys in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </summary>
            <value>
            The number of keys in the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>. The Array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins. </para>
            </param>
            <excetion cref="T:System.ArgumentNullException">
            <para><paramref name="array"/> is a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </excetion>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="array"/> is multidimensional</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than the length of array.</para>
            <para>-or-</para>
            <para>The number of elements in the source <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> is greater than the available space from index to the end of the destination array.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            <para>The type of the source <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> cannot be cast automatically to the type of the destination array.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>. The Array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins. </para>
            </param>
            <excetion cref="T:System.ArgumentNullException">
            <para><paramref name="array"/> is a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </excetion>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="array"/> is multidimensional</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than the length of array.</para>
            <para>-or-</para>
            <para>The number of elements in the source <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> is greater than the available space from index to the end of the destination array.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            <para>The type of the source <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/> cannot be cast automatically to the type of the destination array.</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </summary>
            <value>
            <para>An object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            <para>Gets an object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </summary>
            <value>
            <para>an object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection.KeysCollection"/>.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGEditionAttribute">
            <summary>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGEditionAttribute.Equals(System.Object)">
            <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.</summary>
            <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
            <param name="obj">The object to test the value equality of. </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGEditionAttribute.Edition">
            <summary>Gets the edition stored in this attribute.</summary>
            <returns>The edition stored in this attribute.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGEditionAttribute.EditionValue">
            <summary>Gets or sets the string stored as the description.</summary>
            <returns>The string stored as the description. The default value is an empty string ("").</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGExceptionFormatter">
            <summary>
            <para>Provides exception formatting when not using the Exception Handling block.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGExceptionFormatter.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Common.VGExceptionFormatter"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGExceptionFormatter.#ctor(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Common.VGExceptionFormatter"/> class with the additional information and the application name.</para>
            </summary>
            <param name="additionalInfo">
            <para>The additional information to log.</para>
            </param>
            <param name="applicationName">
            <para>The application name.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGExceptionFormatter.GetMessage(System.Exception)">
            <summary>
            <para>Get the formatted message to be logged.</para>
            </summary>
            <param name="exception"><para>The exception object whose information should be written to log file.</para></param>
            <returns><para>The formatted message.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGExceptionFormatter.CollectAdditionalInfo">
            <devdoc>
            Add additional 'environment' information. 
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGFileChecker.CheckSignature(System.Byte[],System.Int32,System.String)">
            <summary>
            bool isGzip = FileChecker.CheckSignature(“testFile.gz”, 3, “1F-8B-08″);
            If “testFile.zip” is not a valid PK-Zip compressed file, isPKZip variable will be set to “false”:
            bool isPKZip = FileChecker.CheckSignature(“testFile.zip”, 4, “50-4B-03-04″);
            </summary>
            <param name="filepath"></param>
            <param name="signatureSize"></param>
            <param name="expectedSignature"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager">
            <summary>
            Unique class for compression/decompression file. Represents a Zip file.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Compression">
            <summary>
            Compression method enumeration
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Compression.Store">
            <summary>Uncompressed storage</summary> 
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Compression.Deflate">
            <summary>Deflate compression method</summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry">
            <summary>
            Represents an entry in Zip file directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.Method">
            <summary>Compression method</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.FilenameInZip">
            <summary>Full path and filename as stored in Zip</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.FileSize">
            <summary>Original file size</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.CompressedSize">
            <summary>Compressed file size</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.HeaderOffset">
            <summary>Offset of header information inside Zip storage</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.FileOffset">
            <summary>Offset of file inside Zip storage</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.HeaderSize">
            <summary>Size of header information</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.Crc32">
            <summary>32-bit checksum of entire file</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.ModifyTime">
            <summary>Last modification time of file</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.Comment">
            <summary>User comment for file</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.EncodeUTF8">
            <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry.ToString">
            <summary>Overriden method</summary>
            <returns>Filename in Zip</returns>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.EncodeUTF8">
            <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ForceDeflating">
            <summary>Force deflate algotithm even if it inflates the stored file. Off by default.</summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Create(System.String,System.String)">
            <summary>
            Method to create a new storage file
            </summary>
            <param name="_filename">Full path of Zip file to create</param>
            <param name="_comment">General comment for Zip file</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Create(System.IO.Stream,System.String)">
            <summary>
            Method to create a new zip storage in a stream
            </summary>
            <param name="_stream"></param>
            <param name="_comment"></param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Open(System.String,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage file
            </summary>
            <param name="_filename">Full path of Zip file to open</param>
            <param name="_access">File access mode as used in FileStream constructor</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Open(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage from stream
            </summary>
            <param name="_stream">Already opened stream with zip contents</param>
            <param name="_access">File access mode for stream operations</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.AddFile(Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Compression,System.String,System.String,System.String)">
            <summary>
            Add full contents of a file into the Zip storage
            </summary>
            <param name="_method">Compression method</param>
            <param name="_pathname">Full path of file to add to Zip storage</param>
            <param name="_filenameInZip">Filename and path as desired in Zip directory</param>
            <param name="_comment">Comment for stored file</param>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.AddStream(Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Compression,System.String,System.IO.Stream,System.DateTime,System.String)">
            <summary>
            Add full contents of a stream into the Zip storage
            </summary>
            <param name="_method">Compression method</param>
            <param name="_filenameInZip">Filename and path as desired in Zip directory</param>
            <param name="_source">Stream object containing the data to store in Zip</param>
            <param name="_modTime">Modification time of the data to store</param>
            <param name="_comment">Comment for stored file</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Close">
            <summary>
            Updates central directory (if pertinent) and close the Zip storage
            </summary>
            <remarks>This is a required step, unless automatic dispose is used</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ReadCentralDir">
            <summary>
            Read all the file records in the central directory 
            </summary>
            <returns>List of all entries in directory</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ExtractFile(Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry,System.String)">
            <summary>
            Copy the contents of a stored file into a physical file
            </summary>
            <param name="_zfe">Entry information of file to extract</param>
            <param name="_filename">Name of file to store uncompressed data</param>
            <returns>True if success, false if not.</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ExtractFile(Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry,System.IO.Stream)">
            <summary>
            Copy the contents of a stored file into an opened stream
            </summary>
            <param name="_zfe">Entry information of file to extract</param>
            <param name="_stream">Stream to store the uncompressed data</param>
            <returns>True if success, false if not.</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.RemoveEntries(Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager@,System.Collections.Generic.List{Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.ZipFileEntry})">
            <summary>
            Removes one of many files in storage. It creates a new Zip file.
            </summary>
            <param name="_zip">Reference to the current Zip object</param>
            <param name="_zfes">List of Entries to remove from storage</param>
            <returns>True if success, false if not</returns>
            <remarks>This method only works for storage of type FileStream</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGFile.VGZipFileManager.Dispose">
            <summary>
            Closes the Zip file stream
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGGroupFriendlyInfo.#ctor">
            <summary>
            Sets Default Group Display Type.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGGroupFriendlyInfo.#ctor(Novalys.VisualGuard.Security.Common.VGGroupFriendlyType)">
            <summary>
            Sets Group Display Type
            </summary>
            <param name="vgGroupDisplayType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGGroupFriendlyInfo.#ctor(Novalys.VisualGuard.Security.Common.VGGroupFriendlyType,System.Guid)">
            <summary>
            Sets Group Display Type and Group Profile Attribute Id if type os GroupAttribute.
            </summary>
            <param name="vgGroupDisplayType"></param>
            <param name="groupAttributeId"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGGroupFriendlyInfo.GroupFriendlyType">
            <summary>
            Gets or Sets Group Display Type
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGGroupFriendlyInfo.GroupAttributeId">
            <summary>
            Set Group Profile AttributeId if GroupDisplayType is GroupAttribute
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGGroupFriendlyType">
            <summary>
            Group Display Type Enum
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGGroupFriendlyType.Default">
            <summary>
            Displays Group Name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGGroupFriendlyType.ParentGroup">
            <summary>
            Displays Parent Group Name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGGroupFriendlyType.GroupAttribute">
            <summary>
            Display Value of selected Group Attribute.
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGHashtable">
            <summary>
            Represents a class to hold hashtable values in dictionary format. (Used for granted action's args )
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGIdentity">
            <summary>
            Represents a Visual Guard Identity.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIdentity.#ctor(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGIdentity"/> class.
            </summary>
            <param name="name">the name of the user identified by the identity</param>
            <param name="mode">The authentication mode used to create the identity.</param>
            <param name="isAuthenticated">true if the identity has been authenticated, false otherwise.</param>
            <param name="isAnonymous">true if the user is anonymous, false otherwise.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIdentity.#ctor(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGIdentity"/> class.
            </summary>
            <param name="name">the name of the user identified by the identity</param>
            <param name="mode">The authentication mode used to create the identity.</param>
            <param name="isAuthenticated">true if the identity has been authenticated, false otherwise.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIdentity.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGIdentity"/> class.
            </summary>
            <param name="identity">a <see cref="T:System.Security.Principal.IIdentity"/> object representing user</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIdentity.#ctor(System.Security.Principal.WindowsIdentity)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGIdentity"/> class.
            </summary>
            <param name="identity">a <see cref="T:System.Security.Principal.IIdentity"/> object representing user</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIdentity.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIdentity.IsAnonymous">
            <summary>
            Gets a value indicating whether the user is anonymous.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIdentity.Name">
            <summary>
            Gets the name of the current user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIdentity.AuthenticationMode">
            <summary>
            Gets the authentication mode used to create the identity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIdentity.AuthenticationType">
            <summary>
            The type of authentication used to identify the user.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGIInformation">
            <summary>
            Defines the basic functionality of a Visual Guard information stored in a repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformation.Id">
            <summary>
            the unique identifier of the information
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformation.RepositoryId">
            <summary>
            the unique identifier of the information used to store in a repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformation.IsBuiltIn">
            <summary>
            Gets or Sets a value that indicates whether the information is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformation.NewRepositoryId">
            <summary>
            Gets the new unique identifier of the information.
            </summary>
            <remarks>this value will be used to change the <see cref="P:Novalys.VisualGuard.Security.Common.VGIInformation.RepositoryId"/> the next time the information will be saved.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformation.IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGIInformationManager">
            <summary>
            Defines the basic functionality for load and save information.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Exists(System.Guid)">
            <summary>
            Returns a boolean value indicating whether the information identify by the specified id exists.
            </summary>
            <param name="id">a <see cref="T:System.Guid"/> identifying an item in the repository.</param>
            <returns>Returns True if the information exists; otherwise this method returns False.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Exists(System.String)">
            <summary>
            Returns a boolean value indicating whether the information identify by the specified id exists.
            </summary>
            <param name="id">the id as string value identifying an item in the repository.</param>
            <returns>Returns True if the information exists; otherwise this method returns False.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Get(System.Guid)">
            <summary>
            Returns an initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> from a repository.
            </summary>
            <param name="id">a <see cref="T:System.Guid"/> identifying an item in the repository.</param>
            <returns>An initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Get(System.Guid,System.Boolean)">
            <summary>
            Returns an initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> from a repository.
            </summary>
            <param name="id">a <see cref="T:System.Guid"/> identifying an item in the repository.</param>
            <param name="useCacheDuration">true to use cache duration for the item in memory; false otherwise.</param>
            <returns>An initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Get(System.String,System.Boolean)">
            <summary>
            Returns an initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> from a repository.
            </summary>
            <param name="id">a <see cref="T:System.String"/> identifying an item in the repository.</param>
            <param name="useCacheDuration">true to use cache duration for the item in memory; false otherwise.</param>
            <returns>An initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Get(System.String)">
            <summary>
            Returns an initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> from a repository.
            </summary>
            <param name="id">a <see cref="T:System.String"/> identifying an item in the repository.</param>
            <returns>An initialized <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetAllItems">
            <summary>
            Gets unsorted all items stored in a repository.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> that contains all items stored in a repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetAllItems(System.Int32,System.Int32,System.Int32@,Novalys.VisualGuard.Security.Common.VGInformationComparer)">
            <summary>
            Gets a page of items stored in a repository beginning at the specified page index.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="comparer"></param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> that contains a page of <paramref name="pageSize"/> objects beginning at the page specified by <paramref name="pageIndex"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Save(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Saves information in a repository.
            </summary>
            <param name="item">the item information to save</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Save(Novalys.VisualGuard.Security.Common.VGIInformation,System.Boolean)">
            <summary>
            Saves information in a repository.
            </summary>
            <param name="checkConcurrency"></param>
            <param name="item">the item information to save</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Delete(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Deletes item in a repository.
            </summary>
            <param name="item">the item to delete</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Delete(System.String)">
            <summary>
            Deletes item specified by its id in a repository.
            </summary>
            <param name="id">the id of the item to delete</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.Delete(System.Guid)">
            <summary>
            Deletes item specified by its id in a repository.
            </summary>
            <param name="id">the id of the item to delete</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.RefreshAllItems(System.Boolean)">
            <summary>
            Refresh the items list loaded by  <see cref="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetAllItems"/> from the repository.
            </summary>
            <param name="returnList">A boolean value indicating whether the list of modifications since the last refresh must be returned.</param>
            <returns>A list of <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationChangedEventArgs"/> containing all changes.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.IsItemChanged(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Check if an item has changed from the last refresh.
            </summary>
            <param name="item">The item to check</param>
            <returns>a VGInformationChangeAction</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIInformationManager.Connection">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection"/> representing the connection to the repository associated to this manager.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.IsValueUnique(System.String,System.String,System.Boolean)">
            <summary>
            Indicates if the value will be unique for the specified property in the repository
            </summary>
            <param name="value">the value to compare</param>
            <param name="propertyName">The name of the property</param>
            <param name="ignoreCase">true if the case must be ignore, false otherwise.</param>
            <returns>true if the value does not exist in the repostiory, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetSpecialValue(System.String)">
            <summary>
            Gets a special value (i.e.: count returns the number of items  stored in the repository) from the repository
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The special value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.FindItems(System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Gets a collection of <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> where the property specified by <paramref name="propertyName"/> contains the specified value to match.
            </summary>
            <param name="propertyName">The name of the property. if the value is null, use the repository Id</param>
            <param name="valueToMatch">the value to match. This value must be a valid regular expression.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="useValueAsRegEx">true if the value is a regular expression; false otherwise.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> that contains a page of <paramref name="pageSize"/> objects beginning at the page specified by <paramref name="pageIndex"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.FindItems(System.String,System.String[],System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Gets a collection of <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> where the property specified by <paramref name="propertyName"/> contains the specified value to match.
            </summary>
            <param name="propertyName">The name of the property. if the value is null, use the repository Id</param>
            <param name="valuesToMatch">An array of string containing the values to match. These values must be a valid regular expression when <paramref name="useValueAsRegEx"/> is true.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="useValueAsRegEx">true if the values are regular expressions; false otherwise.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> that contains a page of <paramref name="pageSize"/> objects beginning at the page specified by <paramref name="pageIndex"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.IsListHasChanged">
            <summary>
            Checks if the list items supported by this manager has changed in the repository since the last loading
            </summary>
            <returns>true if at least one item has changed in the repository, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetFromCache(System.String)">
            <summary>
            Gets an item from the cache
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>the item corresponding to the specified whether the item is not expired. null when the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetFromCache(System.Guid)">
            <summary>
            Gets an item from the cache
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>the item corresponding to the specified whether the item is not expired. null when the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetFromCache(System.Guid,System.Boolean)">
            <summary>
            Gets an item from the cache
            </summary>
            <param name="repositoryId">the id of the item</param>
            <param name="includeExpiredItems">true when you want to include all items event expired items. false otherwise.</param>
            <returns>the item corresponding to the specified whether the item is not expired. null when the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.GetFromCache(System.String,System.Boolean)">
            <summary>
            Gets an item from the cache
            </summary>
            <param name="repositoryId">the id of the item</param>
            <param name="includeExpiredItems">true when you want to include all items event expired items. false otherwise.</param>
            <returns>the item corresponding to the specified whether the item is not expired. null when the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIInformationManager.ForceToRefreshList">
            <summary>
            Forces the list already to be refreshed on next refresh
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGILogFormatter">
            <summary>
            Defines the basic functionality of a Visual Guard log formatter
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGILogFormatter.Format(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Formats a message based on a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object.
            </summary>
            <param name="log">the log entry to format</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGILogFormatter.Format(Novalys.VisualGuard.Security.Logging.VGLogEntry,System.String)">
            <summary>
            Formats a message based on a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object.
            </summary>
            <param name="log">the log entry to format</param>
            <param name="text">the text to format by using information stored in the log entry</param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGINamedInformation">
            <summary>
            Defines the basic functionality of a named Visual Guard information stored in a repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGINamedInformation.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGInformationChangeAction">
            <summary>
            <para>Specifies the type of <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> change.</para>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGInformationChangeAction.Unchanged">
            <summary>
            Indicates that the information has not changed.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGInformationChangeAction.Changed">
            <summary>
            Indicates that the information has changed.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGInformationChangeAction.Inserted">
            <summary>
            Indicates that the information has been inserted from the last reading.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Common.VGInformationChangeAction.Deleted">
            <summary>
            Indicates that the information has been deleted from the last reading.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGInformationChangedEventArgs">
            <summary>
            Provides data about a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> modification in a repository.
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationChangedEventArgs.#ctor(Novalys.VisualGuard.Security.Common.VGInformationChangeAction,Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationChangedEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="action">
            <para>a <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationChangeAction"/> value indicating the type of change.</para>
            </param>
            <param name="item">
            <para>The <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> that the action occurred upon.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationChangedEventArgs.Item">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> that the action occurred upon.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> that the action occurred upon.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationChangedEventArgs.Action">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationChangeAction"/> value  indicating the type of change.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationChangeAction"/> value  indicating the type of change.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGInformationCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.#ctor(System.Type,Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager)">
            <summary>
            Creates a new, empty item collection.
            </summary>
            <param name="supportedType">the type of the item stored in the collection. Must be derived from <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> class.</param>
            <param name="cacheManager">The <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager"/> associated with this collection.</param>
            <exception cref="T:System.ArgumentException"><paramref name="supportedType"/> is not a type derived from <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> class.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="supportedType"/> is null (Nothing in VB.Net).</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.#ctor(System.Type)">
            <summary>
            Creates a new, empty item collection for the specified type.
            </summary>
            <param name="supportedType">the type of the item stored in the collection. Must be derived from <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> class.</param>
            <exception cref="T:System.ArgumentException"><paramref name="supportedType"/> is not a type derived from <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> class.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="supportedType"/> is null (Nothing in VB.Net).</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.#ctor(System.Int32,System.Type)">
            <summary>
            Creates a new, empty item collection.
            </summary>
            <param name="capacity">the capacity of the collection</param>
            <param name="supportedType">the type of <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> supported by the collection</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.#ctor(Novalys.VisualGuard.Security.Common.VGInformationCollection)">
            <summary>
            Creates a new item collection and copies all entries of the specified list.
            </summary>
            <param name="col">A VGIInformation array to copy to the new collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.#ctor(Novalys.VisualGuard.Security.Common.VGIInformation[],System.Type)">
            <summary>
            Creates a new instance of the class <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> and populates it with the list of items
            </summary>
            <param name="items">the list of items</param>
            <param name="supportedType">the type of item supported by the collection</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Add(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">A <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to add to the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Add(Novalys.VisualGuard.Security.Common.VGIInformation,System.Boolean)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">A <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to add to the collection.</param>
            <param name="fromRefresh">indicates whether the item is added during a refresh</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Contains(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Indicates if the item already exists in the collection.
            </summary>
            <param name="item">item to look for.</param>
            <returns>true if an item with the same id already exists in the collection.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Contains(System.String)">
            <summary>
            Indicates if the item already exists in the collection.
            </summary>
            <param name="repositoryId">item id to look for.</param>
            <returns>true if an item with the same id already exists in the collection.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Clear">
            <summary>
            Removes all repository item objects from the collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.CopyTo(Novalys.VisualGuard.Security.Common.VGIInformation[],System.Int32)">
            <summary>
            Copies the membership item collection to a one-dimensional array.
            </summary>
            <param name="array">A one-dimensional array of type <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> that is the destination of the elements copied from the <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/>. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the membership item collection.
            </summary>
            <returns>An IEnumerator for the entire <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Remove(System.String)">
            <summary>
            Removes the item object with the specified item name from the collection.
            </summary>
            <param name="repositoryId">The item repository Id of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to remove from the collection.</param>
            <returns>true when the item is removed, false otherwise</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.LastModifiedItem">
            <summary>
            Gets the date of the last modified item in the collection
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.SetReadOnly">
            <summary>
            Makes the contents of the membership item collection read-only.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.Count">
            <summary>
            Gets the number of item objects in the collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the membership item collection is thread safe.
            </summary>
            <value>Always true because thread-safe membership item collections are not supported.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.Item(System.String)">
            <summary>
            Gets the membership item in the collection referenced by the specified item name.
            </summary>
            <param name="repositoryId">The repository id of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> to retrieve from the collection.</param>
            <returns>the item if an item with the specified id is stored in the cache. null otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.Item(System.Int32)">
            <summary>
            Gets the item in the collection referenced by the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> to retrieve from the collection.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.SupportedType">
            <summary>
            Gets the type of the item stored in the collection. This type is derived from <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.CacheDuration">
            <summary>
            Gets the length of time in seconds of cached items
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.IsValidInCache(System.String)">
            <summary>
            Indicates whether an item is in the collection and is not expired
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>true if the item exists and is not expired. false if the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.GetItemInCache(System.String)">
            <summary>
            Gets an item that is not expired in the collection for the specified repository id
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>the item corresponding to the specified whether the item is not expired. null when the item does not exist or is expired.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.RefreshCache(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Refresh the expiration of object in the cache
            </summary>
            <param name="item">the item to refresh</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.GetSortedListAsArray(Novalys.VisualGuard.Security.Common.VGInformationComparer)">
            <summary>
            Returns a sorted array of items
            </summary>
            <param name="comparer">the comparer used to sort the list</param>
            <returns>a sorted array of <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.GetSortedList(Novalys.VisualGuard.Security.Common.VGInformationComparer)">
            <summary>
            
            </summary>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.GetRefreshCacheStatus(System.String)">
            <summary>
            Gets the refresh status of the specified item
            </summary>
            <param name="repositoryId">the id of the item</param>
            <returns>the status of the item</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.RefreshData(Novalys.VisualGuard.Security.Common.VGIInformation,System.Boolean)">
            <summary>
            Refreshes the item in the cache
            </summary>
            <param name="item">the item to refresh</param>
            <param name="fromRefresh">indicates whether the refresh is done by a RefreshAllItems or not</param>
            <returns>true if the item was changed in the cache, false if the item has the same timestamp as the item in stored in the cache.</returns>
            <exception cref="T:System.ArgumentException">the item does not exist in the cache</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.FindItems(System.String,System.String[],System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Finds an item in the collection
            </summary>
            <param name="propertyName"></param>
            <param name="valuesToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="useValueAsRegEx"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.InvalidItemFromCache(System.String)">
            <summary>
            Indicates that an item is no more valid in the cache
            </summary>
            <param name="repositoryId"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.IndexOf(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>Searches for the specified item and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
            <param name="item">The item to locate in the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.IndexOf(System.String)">
            <summary>Searches for the specified item and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1.</returns>
            <param name="repositoryId">The id to locate in the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Insert(System.Int32,Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>Inserts an element into the collection at the specified index.</summary>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">this method is not supported by the collection.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the collection.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGInformationCollection.IsReadOnly">
            <summary>
            Inidicates whether the collection is in read only mode
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationCollection.Remove(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Removes the specified item form the collection
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if item was successfully removed from the collection; false otherwise.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGInformationComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationComparer.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="informationType"></param>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationComparer.#ctor(System.Type,System.String,System.Boolean,System.ComponentModel.ListSortDirection)">
            <summary>
            
            </summary>
            <param name="informationType"></param>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGInformationComparer.Compare(Novalys.VisualGuard.Security.Common.VGIInformation,Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGIRuntimeProvider">
            <summary>
            Allows to change the current <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGIRuntimeProvider.GetSecurityRuntime">
            <summary>
            Gets the current runtime.
            </summary>
            <returns>the current <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGISupportVersioning">
            <summary>
            Defines the basic functionality for Visual Guard item supporting versionning.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGISupportVersioning.OriginalId">
            <summary>
             Gets the Visual Guard unique identifier of the original version of this item.
            </summary>
            <value>A <see cref="T:System.Guid"/> value representing the id the orginal item when the item is a new version of another application; <see cref="F:System.Guid.Empty"/> if the item is not a copy of another application.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGISupportVersioning.CopyOf">
            <summary>
             Gets the id the item used to create this version of the item.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGISupportVersioning.CreateNewVersion(System.Guid)">
            <summary>
            Creates a new version of the item for the specified application id
            </summary>
            <param name="newApplicationId">the id of the new version of the application</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object that is a new version of the item.s</returns>
            <remarks>this method does not resolve its references to other new version of items</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGItemNotFoundException">
            <summary>
            Exception thrown when a repository item is not found in the given repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGItemNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Common.VGItemNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGItemNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Common.VGItemNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGIUniqueId">
            <summary>
            This interface return unique id of the entity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGIUniqueId.UniqueId">
            <summary>
            Return the unique id of the entity
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGNTAccount">
            <summary>
            Represent a Windows account
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGNTAccount.#ctor(Novalys.VisualGuard.Security.Common.VGSecurityIdentifier)">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.Common.VGNTAccount"/> class corresponding to the specified <see cref="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier"/>
            </summary>
            <param name="sid"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGRepositoryInfo">
            <summary>
            Represents the information about a Visual Guard repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.#ctor(System.String,Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInfo,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Common.VGRepositoryInfo"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGRepositoryInfo"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.Id">
            <summary>
            Gets or set a <see cref="T:System.Guid"/> object representing the unique id of the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.IsBuiltIn">
            <summary>
            Gets a boolean value indicating if the repository is created by Visual Guard and cannot be modified by a user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.TimeStamp">
            <summary>
            Gets or sets the last time the repository was modified.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.RepositoryStoreInfo">
            <summary>
            vg repository unique identifier information (used to identify uniquely - Installed VG Repository in database)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.Name">
            <summary>
            Gets or sets the name of the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.PasswordPolicy">
            <summary>
            Gets or sets a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData"/> representing the password policy of the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.SerialNumber">
            <summary>
            Gets or sets the serial number stored in this repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.License">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Repository.License.VGLicense"/> object representing the license of this repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.SupportedAuthenticationModes">
            <summary>
            Gets or sets the modes of authentication supported by the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.MinimumSupportedRuntimeVersion">
            <summary>
            Gets or sets the minimum supported version of Visual Guard runtime supported by the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.RepositoryVersion">
            <summary>
            Gets or sets the current version of the repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.CheckVersion">
            <summary>
            Check if the version of the repository is compatible with the runtime
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException">The version is not compatible.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.GetRepositoryId">
            <summary>
            Gets the repository id used by all repositories
            </summary>
            <returns>the repository id used by all repositories</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.LicenseRequestInfo">
            <summary>
            Gets or sets information about the current license request
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.UseUpdateMethod">
            <summary>
            Gets or sets a value indicating when the repository must use the update method when the repository id of an item is changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.AllowsToRenameUser">
            <summary>
            Gets or sets a value indicating when it is possible to rename a user in the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.LogEnabled">
            <summary>
            Gets or sets a value indicating when the log is enabled for this repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.UninstalledSerialNumbers">
            <summary>
            Gets or sets an array of uninstalled serial numbers
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.CustomEventDescriptions">
            <summary>
            Gets or sets the list of custom event description
            </summary>
            <example>the list is formatted like this nnnnnXXXXXXXXX||nnnnnXXXXXXXXX(where nnnnn is the event id and XXXXXXXXX a short description of the event</example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGRepositoryInfo.Clone">
            <summary>
            Creates a new VGApplicationInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGApplicationInformation that is a copy of the current instance.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier">
            <summary>
            Represents a Windows SID.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier"/> specified as a bytes array")
            </summary>
            <param name="sid"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier"/> specified by its sid ldap name (e.g.: "LDAP://&lt;SID=01020000000000052000000020020000&gt;")
            </summary>
            <param name="sid">the value of the sid based on the LDAP format</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.#ctor(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier"/> based on the specified <see cref="T:System.Security.Principal.SecurityIdentifier"/>
            </summary>
            <param name="sid">A <see cref="T:System.Security.Principal.SecurityIdentifier"/> object</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.ConvertLdapSIDToSecurityIdentifier(System.String)">
            <summary>
            Converts an Ldap SID ("LDAP://&lt;SID=...&gt;") to a <see cref="T:System.Security.Principal.SecurityIdentifier"/> object
            </summary>
            <param name="sid">an Ldap SID</param>
            <returns>a <see cref="T:System.Security.Principal.SecurityIdentifier"/> object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.GetCurrent">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier"/> corresponding to the current <see cref="T:System.Security.Principal.WindowsIdentity"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.ToString">
            <summary>
            Returns the Security identifier as its SDDL form (S-1-0-....)
            </summary>
            <returns>the Security identifier as its SDDL form (S-1-0-....)</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGSecurityIdentifier"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGSecuritySettingsHelper">
            <summary>
            <para>Helper class to do all the security settings works for a configuration file.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecuritySettingsHelper.SetSecuritySettings(System.String,Novalys.VisualGuard.Security.Configuration.VGSecuritySettings,System.Type[])">
            <summary>
            Adds or update the security settings to a configuration file.
            </summary>
            <param name="configurationFile">the fullpath of the configuration file.</param>
            <param name="securitySettings">The security settings to add or update to the given configuration file.</param>
            <param name="includeTypes">An array of types indicating the type used in the configuration.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecuritySettingsHelper.IsValidConfigurationFile(System.String,System.Boolean)">
            <summary>
            Checks if the specified file is a valid configuration file.
            </summary>
            <param name="path">the path of the file.</param>
            <param name="throwOnerror">a boolean value indicating if an exception is thrown when the file is not valid.</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecuritySettingsHelper.GetConfigurationFileNameList">
            <summary>
            Gets a string array containing the list of file generated by this helper
            </summary>
            <returns>a string array containing the list of file generated by this helper</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecuritySettingsHelper.GetDefaultConfigurationFileName">
            <summary>
            Gets the default name of the configuration file.
            </summary>
            <returns>the default name of the configuration file.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSecuritySettingsHelper.CalculateSecondaryFilename(System.String)">
            <summary>
            Calculates the name of the secondary file assiocated to the specified main configuration file.
            </summary>
            <param name="configurationFile">The file path of the main configuration file</param>
            <returns>the filename of the secondary configuration file</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGSerializationHelper">
            <summary>
            <para>Helper class to do all the serialization work.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationHelper.ChangeSerializedType(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Object)">
            <summary>
            Allows to change the typename and the assemblyname of a serialized type according to the type of serialization
            </summary>
            <param name="info">the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object used to store serialized info.</param>
            <param name="context">the context of serialization.</param>
            <param name="obj">the object to serialize.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationHelper.Serialize(System.IO.Stream,Novalys.VisualGuard.Security.Common.VGIInformation,Novalys.VisualGuard.Security.Common.Crypto.VGCryptoManager)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="stream">the stream to which the object is to be serialized</param>
            <param name="info">the object to serialized</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationHelper.Serialize(System.IO.Stream,Novalys.VisualGuard.Security.Common.VGIInformation,System.Boolean,Novalys.VisualGuard.Security.Common.Crypto.VGCryptoManager)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="stream">the stream to which the object is to be serialized</param>
            <param name="useCompression">indicates that the compression should be used to compress data.</param>
            <param name="info">the object to serialized</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationHelper.Deserialize(System.IO.Stream,Novalys.VisualGuard.Security.Common.Crypto.VGCryptoManager)">
            <summary>
            Deserializes the content of the specified stream
            </summary>
            <param name="stream">the stream from which to deserialize the objet.</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationHelper.Deserialize(System.IO.Stream,System.Boolean,Novalys.VisualGuard.Security.Common.Crypto.VGCryptoManager)">
            <summary>
            Deserializes the content of the specified stream
            </summary>
            <param name="stream">the strema from which to deserialize the objet.</param>
            <param name="useCompression">indicates wether the compression has been used to compress data</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationHelper.GetDateTime(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets a datetime value from a SerializationInfo context and returns a LocalTime datetime
            </summary>
            <param name="info"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGSerializationVersionningHelper">
            <summary>
            This class is used to remember all fields that are not serialized/deserialized in a version of an object.
            </summary>
            <remarks>The console or runtime can managed multiple versions of a same classe. In a repository, you can save the version 1.1 on a class and read it with the version 1.0.
            In this case, if a new field exists in the version 1.1 but not in version 1.0, when the version 1.0 reads the version 1.1 it can keep the value event it does not use it.
            To do that, all fields should be serialized with the name "_e_NNN". the version 1.0 will read all item until the value _e_5 for example and will keep in memory the field _e_6 used in version 1.1. When the object is serialized the field will be automatically added to the serialization.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSerializationVersionningHelper.GetUnreadSerializedValue(System.Int32,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Extracts all unread fields from the specified SerializationInfo and returns the list of unread fields.
            </summary>
            <param name="startIndex">the index of the fields from which the fields should be kept.</param>
            <param name="info">the SerializationInfo from which the value of fields should be extracted.</param>
            <returns>the list of unread fields.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGSimpleEncryptor">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
            decrypt data. As long as encryption and decryption routines use the same
            parameters to generate the keys, the keys are guaranteed to be the same.
            The class uses static functions with duplicate code to make it easier to
            demonstrate encryption and decryption logic. In a real-life application, 
            this may not be the most efficient way of handling encryption, so - as
            soon as you feel comfortable with it - you may want to redesign this class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSimpleEncryptor.Encrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Encrypts specified plaintext using Rijndael symmetric key algorithm
            and returns the result.
            </summary>
            <param name="plainText">
            Plaintext value to be encrypted.
            </param>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
            <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
            <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
            <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
            <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be 
            exactly 16 ASCII characters long.
            </param>
            <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            Longer keys are more secure than shorter keys.
            </param>
            <returns>
            Encrypted value formatted as a string.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSimpleEncryptor.Decrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Decrypts specified ciphertext using Rijndael symmetric key algorithm.
            </summary>
            <param name="cipherText">
            ciphertext value.
            </param>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived. The
            derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that this
            passphrase is an ASCII string.
            </param>
            <param name="saltValue">
            Salt value used along with passphrase to generate password. Salt can
            be any string. In this example we assume that salt is an ASCII string.
            </param>
            <param name="hashAlgorithm">
            Hash algorithm used to generate password. Allowed values are: "MD5" and
            "SHA1". SHA1 hashes are a bit slower, but more secure than MD5 hashes.
            </param>
            <param name="passwordIterations">
            Number of iterations used to generate password. One or two iterations
            should be enough.
            </param>
            <param name="initVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long.
            </param>
            <param name="keySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256.
            Longer keys are more secure than shorter keys.
            </param>
            <returns>
            Decrypted string value.
            </returns>
            <remarks>
            Most of the logic in this function is similar to the Encrypt
            logic. In order for decryption to work, all parameters of this function
            - except cipherText value - must match the corresponding parameters of
            the Encrypt function which was called to generate the
            ciphertext.
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGSupportedLicenseVersionAttribute">
            <summary>Indicates the minimum version of the license supported by this version of Visual Guard runtime</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGSupportedLicenseVersionAttribute.Equals(System.Object)">
            <summary>Returns whether the value of the given object is equal to the current <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.</summary>
            <returns>true if the value of the given object is equal to that of the current; otherwise, false.</returns>
            <param name="obj">The object to test the value equality of. </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGSupportedLicenseVersionAttribute.MinimumVersion">
            <summary>Gets the minimum supported version of a license stored in this attribute.</summary>
            <returns>the minimum supported version stored in this attribute.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGTrace">
            <summary>
            This class provides a set of methods and properties	that help you trace the execution of Visual Guard code
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.#cctor">
            <summary>
            Provides a set of methods and properties that help you trace the Visual Guard message.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.Level">
            <summary>
            Gets or sets the level of the trace
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.TraceVerbose">
            <summary>
            Inidicates whether the Verbose message should be traced
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.TraceWarning">
            <summary>
            Inidicates whether the Warning message should be traced
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.TraceOff">
            <summary>
            Inidicates whether the trace is off
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.TraceInfo">
            <summary>
            Inidicates whether the Info message should be traced
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.TraceError">
            <summary>
            Inidicates whether the Error message should be traced
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.WriteLineIf(System.Boolean,System.String)">
            <summary>
            Traces out the specified text if the given condition is true.
            </summary>
            <param name="condition">A condition used to determines if the trace will be traced out.</param>
            <param name="text"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.WriteInfo(System.String)">
            <summary>
            Traces out the given text as info.
            </summary>
            <param name="text">The text to trace.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.WriteWarning(System.String)">
            <summary>
            Traces out the given text as info.
            </summary>
            <param name="text">The text to trace.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.WriteWarning(System.String,System.Object[])">
            <summary>
            Traces out the given text as info.
            </summary>
            <param name="text">The text to trace.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.WriteVerbose(System.String,System.Object[])">
            <summary>
            Traces out the given text as info.
            </summary>
            <param name="text">The text to trace.</param>
            <param name="args">The arguments of the String.Format</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.WriteVerbose(System.String)">
            <summary>
            Traces out the given text as info.
            </summary>
            <param name="text">The text to trace.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.TraceException(System.Exception)">
            <summary>
            Traces out a Visual Guard exception.
            </summary>
            <param name="e">the exception to trace out.</param>
            <returns>The given exception without modification.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGTrace.TraceExceptionIf(System.Boolean,System.Exception)">
            <summary>
            Traces out a Visual Guard exception if the given condition is true.
            </summary>
            <param name="condition">A condition used to determines if the exception will be traced out.</param>
            <param name="e">the exception to trace out.</param>
            <returns>The given exception without modification.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Common.VGTrace.DefaultListener">
            <summary>
            Gets or sets the <see cref="T:System.Diagnostics.TraceListener"/> object used to trace Visual Guard messages.
            </summary>
            <value> If the value is null (Nothing), the Visual Guard messages will be only traced in the listeners attached to the <see cref="T:System.Diagnostics.Trace"/>.</value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGVersioningDeserializationBinder">
            <summary>
            Allows to bind different versions of Visual Guard serialized class to the current version
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGVersioningDeserializationBinder.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Common.VGVersioningDeserializationBinder"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Common.VGVersioningDeserializationBinder.BindToType(System.String,System.String)">
            <summary>
            Change the version of the type name to the current version of the type.
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Common.VGWindowsIdentity">
            <summary>
            Encapsulate the standard WindowsIdentity.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView">
            <summary>
            <para>Represents a view for navigating the Visual Guard <see cref="T:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings"/> configuration data.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="configurationContext">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView.GetSecuritySettings">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings"/> configuration data.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings"/> configuration data.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView.GetDefaultRepositoryName">
            <summary>
            <para>Gets the name of the default <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/>.</para>
            </summary>
            <returns>
            <para>The name of the default <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView.GetRepositoryData(System.String)">
            <summary>
            <para>Gets the named <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> from configuration.</para>
            </summary>
            <param name="repositoryName">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> to get the data.</para>
            </param>
            <returns>
            <para>The named <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> from configuration.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Configuration.VGSecurityConfigurationView.GetRepositoryData">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> object corresponding to the default repository.
            </summary>
            <returns>the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> object corresponding to the default repository.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings">
            <summary>
            Represents the configuration data for the 
            Visual Guard security providers.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings.SectionName">
            <summary>
            The name of the configuration section for the security providers.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings.ConfigurationNamespace">
            <summary>
            <para>Gets the Xml namespace for this root node.</para>
            </summary>
            <value>
            <para>The Xml namespace for this root node.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings"/> class.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings.DefaultRepositoryProviderName">
            <summary>
            The instance name of the default <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> instance.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings.Repositories">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryDataCollection"/>.</para>
            </summary>
            <value>
            <para>The repository providers available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>repositories</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Configuration.VGSecuritySettings.DisplayInformation">
            <summary>
            Gets the information about the repository settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheGenericEntity`1.GetEntityById(System.String)">
            <summary>
            Search if this item is in cache list, This method will try to clean up the cache if duration is expired for current entityId
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheGenericEntity`1.Clear">
            <summary>
            Remove all items cached in the list irrespective of the cache duration.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.cache.VGICraftCacheEntity">
            <summary>
            Interface to represent cacheable entity
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGICraftCacheEntity.CleanUp">
            <summary>
            Cleanup cache based on its duration
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGICraftCacheEntity.Clear">
            <summary>
            Clear cache irrespective of the cache duration
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheManager">
            <summary>
            This class can store vg entity 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheManager.DurationDefault">
            <summary>
            Define duration by default for VGCraftCache
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheManager.CleanUpAllCache">
            <summary>
            Cleanup cache depending on the cache duration
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheManager.ClearAllCache">
            <summary>
            Clear all cache irrespective of the cache duration
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.cache.VGCraftCacheManager.License">
            <summary>
            The licence of the repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.cache.VGRepositoryConnectionCache.UpdateRepositoryDataInformation(Novalys.VisualGuard.Security.Repository.VGIRepositoryDataInformation)">
            <summary>
            Update Repository Data information
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.VGUserFinder.Default">
            <summary>
            Find all user without parameter
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.VGUserFinder.Id">
            <summary>
            Find by principal Id
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.VGUserFinder.UserName">
            <summary>
            Find by Name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.VGUserFinder.IdentityModule">
            <summary>
            Find by AuthenticationMode
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.VGUserFinder.ProfileAttributeValue">
            <summary>
            Find by the value of user profile attribute.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetPermissionsFromPermissionSet(System.Guid)">
            <summary>
            Get permissions for auditing for permissionset.
            </summary>
            <param name="permissionSetId">permissionSetId</param>
            <returns>permissions assigned to permissionset</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetPermissionsForRole(System.Guid)">
            <summary>
            Get permissions for role.
            </summary>
            <param name="roleId">roleId </param>
            <returns>permissions assigned to role.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetPermissionsForUser(System.String)">
            <summary>
            Gets permissions for user.
            </summary>
            <param name="userId">userId</param>
            <returns>list of permissions assigned to user.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetPermissionsForGroup(System.Guid)">
            <summary>
            Gets permissions for group.
            </summary>
            <param name="groupId">groupId</param>
            <returns>List of permissions assigned to Group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetHierarchicalItemsForUser(System.String,Novalys.VisualGuard.Security.Membership.VGPermissionAudit)">
            <summary>
            Get hierarchical items for User.
            </summary>
            <param name="userId">userId</param>
            <param name="permissionAudit">permissionAudit</param>
            <returns>List <see cref="T:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem"/> list of hierarchical items for this permission and user.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetHierarchicalItemsForGroup(System.Guid,Novalys.VisualGuard.Security.Membership.VGPermissionAudit)">
            <summary>
            Get hierarchical items for group.
            </summary>
            <param name="groupId">groupId</param>
            <param name="permissionAudit">permissionAudit</param>
            <returns>List<see cref="T:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem" /> list of hierarchical items for this permission and group.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetHierarchicalItemsForRole(System.Guid,Novalys.VisualGuard.Security.Membership.VGPermissionAudit)">
            <summary>
            Get hierarchical items for role.
            </summary>
            <param name="roleId">roleId</param>
            <param name="permissionAudit">permissionAudit</param>
            <returns>List<see cref="T:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem" /> list of hierarchical items for this permission and role.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetHierarchicalItemsForPermissionSet(System.Guid,Novalys.VisualGuard.Security.Membership.VGPermissionAudit)">
            <summary>
            Get hierarchical items for permissionSet.
            </summary>
            <param name="permissionSetId">permissionSetId</param>
            <param name="permissionAudit">permissionAudit</param>
            <returns>List<see cref="!:VGPermissionAuditHierarchyItem" /> list of hierarchical items for this permission and permissionSet.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetPermissionsFromGroupRoles(System.Boolean,System.Collections.Generic.Dictionary{Novalys.VisualGuard.Security.Role.VGRoleId,Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformation},System.Collections.Generic.Dictionary{System.Guid,Novalys.VisualGuard.Security.App.VGIApplicationInformation},System.Collections.Generic.Dictionary{System.Guid,Novalys.VisualGuard.Security.Permission.VGPermissionSet},System.Collections.Generic.Dictionary{System.Guid,Novalys.VisualGuard.Security.Membership.VGPermissionAudit})">
            <summary>
            
            </summary>
            <param name="isAncestorGroups"></param>
            <param name="lstGroupRoles"></param>
            <param name="lstApps"></param>
            <param name="lstAppPermissionSets"></param>
            <param name="lstPermissionsAudit_Result"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.PrepareHierarchicalItemsFromGroupRoles(Novalys.VisualGuard.Security.Membership.VGPermissionAudit,System.Collections.Generic.List{Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformation},System.Collections.Generic.Dictionary{System.Guid,Novalys.VisualGuard.Security.Permission.VGPermissionSet},System.Collections.Generic.Dictionary{System.String,Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem})">
            <summary>
            Get HierarchicalItems From Group's Roles.
            </summary>
            <param name="permissionAudit">permissionAudit</param>
            <param name="groups">List of groups</param>
            <param name="lstRoles">lstRoles</param>
            <param name="lstPermissionSets">List of permissionsets</param>
            <param name="resultItems">result (hierarchical items)</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.PrepareHierarchicalItemsFromUserRoles(Novalys.VisualGuard.Security.Membership.VGPermissionAudit,System.Collections.Generic.Dictionary{Novalys.VisualGuard.Security.Role.VGRoleId,Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformation},System.Collections.Generic.Dictionary{System.Guid,Novalys.VisualGuard.Security.Permission.VGPermissionSet},System.Collections.Generic.Dictionary{System.String,Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem})">
            <summary>
            Get HierarchicalItems From Group's Roles.
            </summary>
            <param name="permissionAudit">permissionAudit</param>
            <param name="lstRoles">List of Roles</param>
            <param name="lstPermissionSets">List of permissionsets</param>
            <param name="resultItems">result (hierarchical items)</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.GetRoleName(Novalys.VisualGuard.Security.Role.VGIRoleInformation)">
            <summary>
            Gets role name. If role is shared role, append #, otherwise not.
            </summary>
            <param name="roleInformation">roleInformation</param>
            <returns>role name.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.AddIntoList(Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem,System.Collections.Generic.Dictionary{System.String,Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem})">
            <summary>
            add item to list if it does not already contained
            </summary>
            <param name="item">item</param>
            <param name="resultItems">resultItems</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.CreateHierarchyItem(System.String,System.String,System.String,Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItemType,System.String)">
            <summary>
            Creates hierarchy Item for VGPermissionAudit
            </summary>
            <param name="id">Id of item</param>
            <param name="name">Name of item</param>
            <param name="description">description of item</param>
            <param name="type">Type of item, whether it is role, User, Group, Permission, PermissionSet, or Subpermissionset.</param>
            <param name="parentId">ParentId of item.</param>
            <returns>VGPermissionAuditHierarchyItem</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftAuditingHelper.CreateRoleHierarchyItem(Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformation,System.String)">
            <summary>
            Creates role hierarchy item.
            </summary>
            <param name="role"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftCustomActionHelper.UpdateGroupFriendlySelection(Novalys.VisualGuard.Security.CraftSystem.Action.VGICraftCustomAction{Novalys.VisualGuard.Security.CraftSystem.Action.VGCraftCustomActionType})">
            <summary>
            
            </summary>
            <param name="groupDisplayType"></param>
            <param name="groupProfileAttributeInformation"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftEventLogHelper.GetAllEventIds">
            <summary>
            Get All VGEventIds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetAllAncestorGroup(Novalys.VisualGuard.Security.Group.VGGroupInformation)">
            <summary>
            Get all ancestor group of Group parameter
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetAncestorGroup(Novalys.VisualGuard.Security.Group.VGGroupInformation)">
            <summary>
            Return null,If group do not have ancestor
            </summary>
            <param name="group"></param>
            <returns>null or VGGroupInformation</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetAllDescendantGroupsFromGroup(Novalys.VisualGuard.Security.Group.VGGroupInformation)">
            <summary>
            Return all descendant group of one Group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetAllSecurityGroupsFromUser(System.String,System.Collections.Generic.List{Novalys.VisualGuard.Security.Group.VGGroupInformation}@)">
            <summary>
            Return all groups assign to user and all ancestor groups
            </summary>
            <param name="userId"></param>       
            <param name="userGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetAllGroupsFromUser(System.String)">
            <summary>
            Return all groups of user and all descendants groups
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetAllGroupsAllowedForMultiProfileValuesByUserId(System.String)">
            <summary>
            gets all contextual groups which allows multi user profile values to set for particular user.
            </summary>
            <param name="userId">userId of the user for which you want to get contextual groups.</param>
            <returns>All contextual groups which allows multi user profile values for particular user.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.GetUsersFromGroupAndDescendantGroups(Novalys.VisualGuard.Security.Group.VGGroupInformation,Novalys.VisualGuard.Security.Repository.Principal.VGPrincipalFinderArgs)">
            <summary>
            Gets all principals for current group and its descendant groups.        
            </summary>
            <param name="group">VGGroupInformation</param>
            <param name="priArgs">Principal Args</param>
            <returns>All principals for current group and its descendant groups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftGroupHelper.SetFriendlyName(System.Collections.Generic.List{Novalys.VisualGuard.Security.Group.VGGroupInformation})">
            <summary>
            Sets display name for group based on Repository's GroupDisplayInformation settings.
            </summary>
            <param name="groupInformation"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftModuleHelper.AutoMapAttributesForInternalInformationAttributes">
            <summary>
            Create Mapping between vg attribute and module's attributes which are having same internal information type.[City,Country etc], if any.        /// 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftMonitoringGraphHelper.GetAllEventIds">
            <summary>
            Get All VGEventIds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftPermissionSetHelper.InternalUpdate(System.Collections.Generic.List{Novalys.VisualGuard.Security.Permission.VGPermissionSet})">
            <summary>
            Needs a transaction storage and this method put EventLogInformation
            </summary>
            <param name="permSet"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftPrincipalHelper.Check_CanSetProfileValues(Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollection)">
            <summary>
            gets profileValue collection which is allowed to save by security (Specially for MultiProfileValue feature of Contextual Group)
            this method will check, Repository.IsAllowedMultiUserProfile, Group.IsAllowedMultiProfile, ProfileAttribute.IsAllowedMultiProfile
            it will return only those profilevalues which are allowed. other entries will be skipped.
            </summary>
            <param name="profileValueCollection">profileValueCollection</param>
            <returns>filtered profileValues.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftPrincipalHelper.PreparingSaveProfileValues(Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollection,System.String,System.String,System.Text.StringBuilder@)">
            <summary>
            This method is marked as internal as it will be called for Deployement.
            </summary>
            <param name="vgProfileValueCollection">vgProfileValueCollection</param>
            <param name="userId">userId</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftPrincipalHelper.GetCustomIdentityUseridFromVGUserId(System.String,System.String)">
            <summary>
            Gets custom identity module's userid from vg-userid.
            </summary>
            <param name="moduleName">moduleName</param>
            <param name="userId">VGUserid</param>
            <returns>custom identity module's userid </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftPrincipalHelper.GetContextualGroup(System.Guid,System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedGroup},Novalys.VisualGuard.Security.App.VGGroupSelectionDisplayMode)">
            <summary>
            
            </summary>
            <param name="allGroupOfUser"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftPrincipalLoader">
            <summary>
            Load user 
            Use this object only on time by load
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftProfileMappingHelper.RepairModuleMappingData(Novalys.VisualGuard.Security.Module.VGModuleInformation)">
            <summary>
            Repairs module's mapping data - Delete extra or false entry from mapping table if any - Entries will be compared with Module's MappedAttributes Property.
            </summary>
            <param name="moduleInformation"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftRoleHelper.UpdateProfileValues(Novalys.VisualGuard.Security.Role.VGIRoleInformation,System.Boolean)">
            <summary>
            Checks if ProfileValue Collection Changed, if yes Updates role, otherwise not.
            Any new attribute added, or deleted or check for defaultValue.
            ex. new profile attribute added but profileValue collection does not contain that attribute
            profile attribute deleted but profilevalue collection still contains that attribute
            for some profile attribute, default value is supproted, so profileValue collection should contain that attribute with defaultValue.
            </summary>
            <param name="role">role</param>
            <param name="isCheckCanReadRoleRequired">isCheckCanReadRoleRequired - pass true if want to check permission canReadRole else false</param>
            <returns>Updated role</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.controller.VGCraftRoleHelper.UpdateProfileValues(System.Collections.Generic.List{Novalys.VisualGuard.Security.Role.VGIRoleInformation},System.Collections.Generic.List{Novalys.VisualGuard.Security.Role.VGRoleProfileAttributeInformation},System.Boolean)">
            <summary>
            Checks if ProfileValue Collection Changed, if yes Updates role, otherwise not.
            Any new attribute added, or deleted or check for defaultValue.
            ex. new profile attribute added but profileValue collection does not contain that attribute
            profile attribute deleted but profilevalue collection still contains that attribute
            for some profile attribute, default value is supproted, so profileValue collection should contain that attribute with defaultValue.
            </summary>
            <param name="lstRoles">List of Roles for which profileValue collection need to be updated</param>
            <param name="lstRoleAttributes">you can pass List of RoleAttributes if available, or you can also pass Null, and method need to fetch all profileattributes in that case.</param>
            <returns>Updated Roles List</returns> 
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformation.#ctor(Novalys.VisualGuard.Security.Role.VGIRoleInformation,Novalys.VisualGuard.Security.Role.VGIPrincipalInformation)">
            <summary>
            Constructor for user Roles
            </summary>
            <param name="roleInformation"></param>
            <param name="principalInformation"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformation.#ctor(Novalys.VisualGuard.Security.Role.VGIRoleInformation,Novalys.VisualGuard.Security.Group.VGGroupInformation)">
            <summary>
            Constructor for Group Roles
            </summary>
            <param name="roleInformation"></param>
            <param name="groupInformation"></param>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformationType.User">
            <summary>
            Used when role is coming via User 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformationType.Group">
            <summary>
            Used when role is coming via Group
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.CraftSystem.entity.VGCraftAuditRoleInformationType.Role">
            <summary>
            Used for role->Permissions audit
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CanReadRepository">
            <summary>
            Calculates computer id based on hash string generated by derived class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CanUpdateRepository">
            <summary>
            This method checks if you have the right to update the repository
            </summary>
            <returns>true if the principal has the permission, false otherwise</returns>
            <remarks>This method use <see cref="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CheckUpdateRepository"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CanCreateGroup">
            <summary>
            Check if you have 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CanUpdateGroup(Novalys.VisualGuard.Security.Group.VGGroupInformation)">
            <summary>
            Check if you have permission for update specific group
            </summary>
            <param name="groupId">Groups</param>
            <remarks>You need CanUpdateGroup permissions and you </remarks>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CanApprovePendingUser">
            <summary>
            See more information on CheckApprovePendingUser() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CheckApprovePendingUser">
            <summary>
            Check only if you have CanApprovePendingUser permission
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CanLockUnlockUsers">
            <summary>
            See more information on <see cref="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CheckLockUnlockUsers"/> method
            </summary>
            <returns>If return true you have CanLockUnlockUser permission </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.CheckLockUnlockUsers">
            <summary>
            Check only if you have CanLockUnlockUser permission
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.HasMasterRoleAdmin">
            <summary>
            Return if the current user is master Admin
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.Key">
            <summary>
            Return information on the current key license
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance">
            <summary>
            Take information in the key
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowPrivateVGServer">
            <summary>
            Return True if your key allow Private VGServer component
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowPublicVGServer">
            <summary>
            Return True if your key allow public VGServer component
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowWebConsole">
            <summary>
            return True if your key allow web console 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowWebPortal">
            <summary>
            return True if your key allow web portal 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowDeploy">
            <summary>
            return True if your key allow deployment 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowDeployKey">
            <summary>
            Allow the licence deployment
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowVGUser">
            <summary>
            return True if your key allow vg user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowWindowsUser">
            <summary>
            return True if your key allow windows user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowWindowsGroup">
            <summary>
            return True if your key allow windows groups
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowFederatedSystem">
            <summary>
            return True if your key allow windows groups
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowReporting">
            <summary>
            Return True if your key allow reporting
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowAuditing">
            <summary>
            Return True if your key allow auditing
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowVGGroup">
            <summary>
            Return True if your key allow visual-guard group
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.AllowDynamicPermission">
            <summary>
            Return True if your key allow auditing
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.CraftSystem.security.VGSecurityAdministrationBase.VGKeyAdministrationInstance.MaxUsers">
            <summary>
            return number of user for your current license key
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.security.VGAdministrationException">
            <summary>
            The exception that is thrown when a security error is detected in visual-guard.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.VGCraftConnectionClientBase">
            <summary>
            Manager VGICraftConnection and cache system
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.CraftSystem.VGCraftController">
            <summary>
            This class is the principal controller of VG, All Operation pass by this class
            This class check the security of the User
            This class open the transaction of the Database
            This class can call sub controller for the complex operation
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.VGCraftController.GetAllModules(System.Boolean)">
            <summary>
            Public method not secure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.VGCraftController.MakeCustomActionGroupProfileAttribute(Novalys.VisualGuard.Security.CraftSystem.Action.VGICraftCustomAction{Novalys.VisualGuard.Security.CraftSystem.Action.VGCraftCustomGroupProfileAttribute})">
            <summary>
            This is a special method where we do not need to check secutiry or write a log.
            </summary>
            <param name="customAction"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.VGICraftConnection.GetConnectionLink">
            <summary>
            This method can be use for optimise the VGCraftConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.VGICraftConnection.FindEventLog(Novalys.VisualGuard.Security.CraftSystem.VGCraftFinderParams{Novalys.VisualGuard.Security.CraftSystem.VGEventLogFinder})">
            <summary>
            Clears all log entries of an application
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.CraftSystem.VGICraftConnection.WriteLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Write log in vg repostory
            </summary>
            <remarks>You need to use the TimeStamp of Log in your insert the LogEntry</remarks>
            <param name="log"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData">
            <summary>
            Configuration data for a repository based on file.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData.#ctor(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData"/> class with a name and a path.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData"/>.</para>
            </param>
            <param name="anonymousSessionSupported">indicates if the anonymous sessions are supported</param>
            <param name="applicationId"> the id of the application.</param>
            <param name="connectionString">the connection string used to connect to the database.</param>
            <param name="supportedAuthenticationModes">the authentication modes supported by the repository.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData.ConnectionString">
            <summary>
            The connection string allowing to connect to the database containing the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Database.Configuration.VGDatabaseRepositoryData.DisplayInformation">
            <summary>
            <para>Gets the information about the repository.</para>
            </summary>
            <value>
            <para>The information about the repository</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.EntityManager.VGGenericAdfsEntityManager`4.GetSqlInsert">
            <summary>
            INSERT INTO [dbo].[vg_AdfsServer] ([Id],[Name],[Description],[Url],[LastModification],[RelyingPartyURL],[CertificatePrivate],[CertificateSigning],[CertificateEncryption],[CertificatePassword]) VALUES(@Id,@Name,@Description,@Url,@LastModification,@RelyingPartyURL,@CertificatePrivate,@CerficateSigning,@CertificateEncryption,@CertificatePassword)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.EntityManager.VGGenericAdfsEntityManager`4.GetSqlUpdate">
            <summary>
            "UPDATE [dbo].[vg_AdfsServer] SET [Name] = @Name,[Description]= @Description, [Url] = @Url,[RelyingPartyURL] = @RelyingPartyURL,[CertificatePrivate]=@CertificatePrivate,[CertificateSigning] =@CerficateSigning,[CertificateEncryption]=@CertificateEncryption,[CertificatePassword]=@CertificatePassword, [LastModification] = @LastModification WHERE [Id] = @Id";
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.EntityManager.VGGenericAdfsEntityManager`4.GetSqlDelete">
            <summary>
            "DELETE FROM [dbo].[vg_AdfsServer] WHERE [Id] = @Id";
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.EntityManager.VGGenericAdfsEntityManager`4.GetSqlSelectById">
            <summary>
            SELECT [Name],[Description],[Url],[LastModification],[RelyingPartyURL],[CertificatePrivate],[CertificateSigning],[CertificateEncryption],[CertificatePassword] FROM [dbo].[vg_AdfsServer] Where Id = @Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.EntityManager.VGGenericAdfsEntityManager`4.GetSqlSelectDistinctIdAll">
            <summary>
            SELECT distinct [Id] FROM [dbo].[vg_AdfsServer]
            </summary>
            <param name="adfsServer"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseConnection`2.LocalTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlAdfsInsert">
            <summary>
            INSERT INTO [dbo].[vg_AdfsServer] ([Id],[Name],[Description],[Url],[LastModification],[RelyingPartyURL],[CertificatePrivate],[CertificateSigning],[CertificateEncryption],[CertificatePassword]) VALUES(@Id,@Name,@Description,@Url,@LastModification,@RelyingPartyURL,@CertificatePrivate,@CerficateSigning,@CertificateEncryption,@CertificatePassword)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlAdfsUpdate">
            <summary>
            "UPDATE [dbo].[vg_AdfsServer] SET [Name] = @Name,[Description]= @Description, [Url] = @Url,[RelyingPartyURL] = @RelyingPartyURL,[CertificatePrivate]=@CertificatePrivate,[CertificateSigning] =@CerficateSigning,[CertificateEncryption]=@CertificateEncryption,[CertificatePassword]=@CertificatePassword, [LastModification] = @LastModification WHERE [Id] = @Id";
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlAdfsDelete">
            <summary>
            "DELETE FROM [dbo].[vg_AdfsServer] WHERE [Id] = @Id";
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlAdfsSelectById">
            <summary>
            SELECT [Name],[Description],[Url],[LastModification],[RelyingPartyURL],[CertificatePrivate],[CertificateSigning],[CertificateEncryption],[CertificatePassword] FROM [dbo].[vg_AdfsServer] Where Id = @Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlApplicationInsertProcedure">
            <summary>
            [dbo].[vg_CreateApplication]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlApplicationDeleteById">
            <summary>
            DELETE FROM [dbo].[vg_Applications] WHERE @Id = [Id]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlApplicationDeleteByIdAndLastModification">
            <summary>
            DELETE FROM [dbo].[vg_Applications] WHERE @Id = [Id] AND @TimeStamp = [LastModification]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlApplicationUpdateProcedure">
            <summary>
            [dbo].[vg_UpdateApplication]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlApplicationSelectById">
            <summary>
            SELECT [LastModification], [Data] FROM [dbo].[vg_Applications] Where [Id]=@Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.Generic.VGRepositoryDatabaseGenericConnection`3.GetSqlApplicationSelectAll">
            <summary>
            SELECT [Id], [LastModification], [Data] FROM [dbo].[vg_Applications]
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Database.VGDatabaseExistenceStatus">
            <summary>
            Defines the state of the creation of a repository.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseExistenceStatus.DatabaseNotCreated">
            <summary>
            Database not yet created.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseExistenceStatus.DatabaseCreatedWithoutData">
            <summary>
            All database objects created but without data.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseExistenceStatus.DatabaseCreatedWithData">
            <summary>
            All database objects created and initialize with data.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseExistenceStatus.DatabasePartiallyCreated">
            <summary>
            Some database objects are created but not all.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Database.VGDatabaseHelper">
            <summary>
            the database helper used to encrypt/decrypt and parse connection string
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.passPhrase">
            <summary>
            the pass phrase
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.saltValue">
            <summary>
            the salt value.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.initVector">
            <summary>
            the vector
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.Init">
            <summary>
            Initialize the class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.DuplicateParsedConnection(System.Collections.IDictionary)">
            <summary>
            Duplicates a <see cref="T:System.Collections.IDictionary"/> object containing parsed value for a connection string
            </summary>
            <param name="parseTable">the parsed values for a connection string.</param>
            <returns>A copy of the parsed connection</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.ParseAndUncryptConnectionString(System.String)">
            <summary>
            Unencrypts the specified connection string if needed and returns a dictionnary containing key/value pairs.
            </summary>
            <param name="connectionString">the connection string to uncrypt.</param>
            <returns>A copy of the parsed connection</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.ConvertNameToId(System.String)">
            <summary>
            Convert a user name as repository id.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.ParseConnectionString(System.String)">
            <summary>
            Parses the connection string and returns a dictionnary containing key/value pairs.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.DecryptValue(System.String)">
            <summary>
            Decrypt a value stored in the connection string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.EncryptValue(System.String)">
            <summary>
            Encrypt a value to store in the connection string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.GetIntegratedSecurityValue(System.Collections.IDictionary)">
            <summary>
            Gets IntegratedSecurity value of the connection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.SetIntegratedSecurityValue(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Sets IntegratedSecurity value of the connection.
            </summary>
            <param name="parseTable">the connection as key value pair.</param>
            <param name="value">the value of PersistSecurityInfo.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.SetPersistSecurityInfoValue(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Sets PersistSecurityInfo value of the connection.
            </summary>
            <param name="parseTable">the connection as key value pairs.</param>
            <param name="value">the value of PersistSecurityInfo.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.GetServerName(System.Collections.IDictionary)">
            <summary>
            Gets ServerName value of the connection.
            </summary>
            <param name="parseTable">the connection as key value pairs.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.GetDatabaseName(System.Collections.IDictionary)">
            <summary>
            Gets database name value of the connection.
            </summary>
            <param name="parseTable">the connection as key value pairs.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.ChangeCredentials(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Changes the credentials of the connection stored in the hashtable.
            </summary>
            <param name="parseTable">the list of key/value pairs of the connection string.</param>
            <param name="userId">the user id</param>
            <param name="pwd">the password</param>
            <remarks>This method sets IntegrateSecurity and PersistSecurityInfo option to false</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.ChangeCredentials(System.Collections.IDictionary,System.String,System.String,System.Boolean)">
            <summary>
            Changes the credentials of the connection stored in the hashtable.
            </summary>
            <param name="parseTable">the list of key/value pairs of the connection string.</param>
            <param name="userId">the user id</param>
            <param name="pwd">the password</param>
            <param name="changeIntegratedSecurity">true to set the integrated security to false, false when the value of integrated security must not be modified.</param>
            <remarks>This method sets IntegrateSecurity and PersistSecurityInfo option to false</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.GetCredentials(System.Collections.IDictionary,System.String@,System.String@)">
            <summary>
            Gets credentials from a connection parsed as hashtable
            </summary>
            <param name="parseTable">the list of key/value pairs of the connection string.</param>
            <param name="userId">a string variable in which the user id will be stored</param>
            <param name="pwd">a string variable in which the password will be stored</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDatabaseHelper.BuildConnectionString(System.Collections.IDictionary)">
            <summary>
            Creates a connection string based on key/value pairs stored in the hashtable.
            </summary>
            <param name="parseTable">the list of key/value pairs</param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Database.VGDBUser">
            <summary>
            Represents a database user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDBUser.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Database.VGDBUser"/> class.
            </summary>
            <param name="name">the name identifying the user in the database</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Database.VGDBUser.Name">
            <summary>
            Gets the name of the database user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Database.VGDBUser.RepositoryId">
            <summary>
            gets the repository id of the user.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGDBUser.ToString">
            <summary>
            Returns the name of the user.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Database.VGIDatabaseUserSupport">
            <summary>
            Allows to retrieve the list of users from a database
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGIDatabaseUserSupport.GetUsersFromDatabase">
            <summary>
            Gets the list of users of the database
            </summary>
            <returns>an array of <see cref="T:Novalys.VisualGuard.Security.Database.VGDBUser"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Database.VGIDatabaseUserSupport.IsValidDatabaseUser(System.String)">
            <summary>
            Checks if a user is valid in a database
            </summary>
            <param name="name">the name of the user to check.</param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction">
            <summary>
            Represents an action used to deploy an application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.ProgressReporter">
            <summary>
            Gets or sets ProgressReporter for deployment operations.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction"/> class.
            </summary>
            <remarks>You must call the method <see cref="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Init(System.Configuration.KeyValueConfigurationCollection)"/> to specify action value before execute the action.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.#ctor(Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions,System.Guid,System.Boolean,Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction"/> class.
            </summary>
            <param name="overwrite">A <see cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions"/> value specifying whether an existing repository can be overwritten.</param>
            <param name="appRepositoryId">The repository id of the application to deploy.</param>
            <param name="grantRolesLikePreviousVersion">A boolean value indicating whether the roles of deployed application must be granted like the roles of previous version of this application.</param>
            <param name="deploymentMode">A boolean value indicating whether all existing roles of the target repository must be kept. true if you want to keep the roles that exists in the target repository but not exists in the deployed repository, false if you want to delete all existing roles and replace them by the roles of the deployed repository.</param>
            <exception cref="!:ArgumentExcepton"><paramref name="appRepositoryId"/> is an empty Guid.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Init(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Initializes the object with the specified values.
            </summary>
            <param name="values">A collection of values containg information to initialize this object.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Overwrite">
            <summary>
            Indicates whether the deployed application can overwrite an existing repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.AppRepositoryId">
            <summary>
            Gets the repository id of the application to deploy
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.GrantRolesLikePreviousVersion">
            <summary>
            Indicates whether the deployment process must grant roles of a new version of an application like roles of the previous version.
            </summary>
            <remarks>This property will be ignored during the deployment process in 3 cases:
            <para>
            * The deployed application has not been created as a new version of another application.</para>
            <para>
            * The deployed application already exists in the target repository (It is not the first deployment of the application).</para>
            <para>
            * The previous version of the application (the application used to create this application) does not exist in the target repository.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.DeploymentMode">
            <summary>
            Indicates the deployment mode used by the deployment process to deploys application items.
            </summary>
            <remarks><para>The default value is equal to <see cref="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Replace"/>.</para>
            When the <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.DeploymentMode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Refresh"/>, the deployment process will apply the following rules:
            <list type="bullet">
            <item><description>When an item exists in the deployed repository and the target repository, the deployment process will replace the target item by the deployed item.</description></item>
            <item><description>When an item exists in the deployed repository but does not exist in the target repository, the deployment process will add the item of the deployed repository to the target repository.</description></item>
            <item><description>When an item does not exist in the deployed repository but exists in the deployed repository, the deployment process will keep the item of the target repository.</description></item>
            </list>
            when the <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.DeploymentMode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Replace"/>, the deployment process will apply the following rules:
            <list type="bullet">
            <item><description>When an item exists in the deployed repository and the target repository, the deployment process will replace the target item by the deployed item.</description></item>
            <item><description>When an item exists in the deployed repository but does not exist in the target repository, the deployment process will add the item of the deployed repository to the target repository.</description></item>
            <item><description>When an item does not exist in the deployed repository but exists in the deployed repository, the deployment process will remove the item from the target repository.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Import(Novalys.VisualGuard.Security.Deployment.VGDeploymentImport)">
            <summary>
            Deploys the repository defined in the deployment configuration file
            </summary>
            <param name="deploymentOption">A <see cref="!:VGRepositoryDeploymentOptions"/> object that defines the deployment options.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="deploymentOption"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">The method <see cref="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Init(System.Configuration.KeyValueConfigurationCollection)"/> must be called before calling this method.
            <para>- or -</para>
            The <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Overwrite"/> option is set to <see cref="F:VGRepositoryOverwriteOptions.Never"/> and the target already contains an application with the same id.
            <para>- or -</para>
            The <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Overwrite"/> option is set to <see cref="F:VGRepositoryOverwriteOptions.VersionIsEqual"/> and the target contains a repository with the same id and a version different from the application to deploy.
            <para>- or -</para>
            The <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Overwrite"/> option is set to <see cref="F:VGRepositoryOverwriteOptions.VersionIsEqualOrNewer"/> and the target contains a repository with the same id and a version newer than the version of the application to deploy.
            <para>- or -</para>
            The <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.Overwrite"/> option is set to <see cref="F:VGRepositoryOverwriteOptions.VersionIsNewer"/> and the target contains a repository with the same id and a version equal to or newer than the version of the application to deploy.
            <para>- or -</para>
            The license of he target repository is expired or do not allow this version of Visual Guard.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployApplicationAction.GetLogEntry">
            <summary>
            Returns the log entry representing the action.
            </summary>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployParametersRepositoryAction.Overwrite">
            <summary>
            Indicates whether the deployed repository can overwrite an existing repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployParametersRepositoryAction.ProgressReporter">
            <summary>
            Gets or sets ProgressReporter for deployment operations.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions">
            <summary>
            Indicates when a repository can be overwritten
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions.Never">
            <summary>
            Disallows to deploy a repository when a repository already exists in the target.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions.Always">
            <summary>
            Allows to deploy a repository even a repository already exists in the target.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions.ParamOnly">
            <summary>
            Allows to deploy parameters of a repository only if a repository already exists in the target.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction">
            <summary>
            Represents an action used to deploy a repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction"/> class.
            </summary>
            <remarks>You must call the method <see cref="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.Init(System.Configuration.KeyValueConfigurationCollection)"/> to specify action value before execute the action.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.#ctor(Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction"/> class.
            </summary>
            <param name="overwrite">A <see cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions"/> value specifying whether an existing repository can be overwritten.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.Init(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Initializes the <see cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction"/> object with specified values used by the action
            </summary>
            <param name="values">a collection of values used by the action</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.Overwrite">
            <summary>
            Indicates whether the deployed repository can overwrite an existing repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.ProgressReporter">
            <summary>
            Gets or sets ProgressReporter for deployment operations.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.Import(Novalys.VisualGuard.Security.Deployment.VGDeploymentImport)">
            <summary>
            Deploys the repository or the parameter of the repository defined in the deployment configuration file
            </summary>
            <param name="deploymentOption">A <see cref="!:VGRepositoryDeploymentOptions"/> object that defines the deployment options.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="deploymentOption"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.InvalidOperationException">The method <see cref="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.Init(System.Configuration.KeyValueConfigurationCollection)"/> must be called before calling this method.
            <para>- or -</para>
            The <see cref="P:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.Overwrite"/> option is set to <see cref="F:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions.Never"/> and the target already contains a repository.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployRepositoryAction.GetLogEntry">
            <summary>
            Returns the log entry representing the action.
            </summary>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode">
            <summary>
            Indicates how the deployment process will deploy an application.
            </summary>
            <remarks>
            When the <see cref="!:VGDeployApplicationAction.DeploymentMode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Refresh"/>, the deployment process will apply the following rules:
            <list type="bullet">
            <item><description>When an item exists in the deployed repository and the target repository, the deployment process will replace the target item by the deployed item.</description></item>
            <item><description>When an item exists in the deployed repository but does not exist in the target repository, the deployment process will add the item of the deployed repository to the target repository.</description></item>
            <item><description>When an item does not exist in the deployed repository but exists in the deployed repository, the deployment process will keep the item of the target repository.</description></item>
            </list>
            when the <see cref="!:VGDeployApplicationAction.DeploymentMode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Replace"/>, the deployment process will apply the following rules:
            <list type="bullet">
            <item><description>When an item exists in the deployed repository and the target repository, the deployment process will replace the target item by the deployed item.</description></item>
            <item><description>When an item exists in the deployed repository but does not exist in the target repository, the deployment process will add the item of the deployed repository to the target repository.</description></item>
            <item><description>When an item does not exist in the deployed repository but exists in the deployed repository, the deployment process will remove the item from the target repository.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Refresh">
            <summary>
            The deployment process will replace all items of the target repository by the deployed items, add the new items 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode.Replace">
            <summary>
            The deployment process will replace all items of the target repository by the deployed items, add the new items and remove target items that do not exist in the deployed repository.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions">
            <summary>
            Indicates when an application can be overwritten
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions.Never">
            <summary>
            Disallows to overwrite an existing application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions.VersionIsEqual">
            <summary>
            Allows to overwrite an existing application only when the version of the application to deploy is equal to the existing application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions.VersionIsEqualOrNewer">
            <summary>
            Allows to overwrite an existing application only when the version of the application to deploy is equal or newer than the version of the existing application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions.VersionIsNewer">
            <summary>
            Allows to overwrite an existing application when the version of the application to deploy is newer than the version of the existing application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions.Always">
            <summary>
            Always allows to overwrite an existing application even the version of the existing application is older than the version of the deployed application.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData">
            <summary>
            Configuration data for a repository based on a deployment file.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData.#ctor(System.String)">
            <summary>
            Creates a new instance of the class <see cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData"/>
            </summary>
            <param name="section">A <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement"/> object representing the section in the configuration file containing the data</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData.DisplayInformation">
            <summary>
            <para>Gets the information about the repository.</para>
            </summary>
            <value>
            <para>The information about the repository</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData.RepositoryConnectionTypeName">
            <summary>
            Returns the type of the repository connection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData.TypeName">
            <summary>
            This method is not supported by this class
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentRepositoryData.Clone">
            <summary>
            Creates a copy of the current data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGDeploymentSerializationHelper.Serialize(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Saves a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object in the given file.
            </summary>
            <param name="info">The <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object to save.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction">
            <summary>
            Defines standard functionnalities for a deployment action
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction.GetConfigurationValues">
            <summary>
            Gets values defined in the deployment configuration files and used by the action
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction.Init(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Initializes the <see cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction"/> object with specified values used by the action
            </summary>
            <param name="values">a collection of values used by the action</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction.Import(Novalys.VisualGuard.Security.Deployment.VGDeploymentImport)">
            <summary>
            Executes the action by using the options defined in the specified <see cref="!:VGRepositoryDeploymentOptions"/> object.
            </summary>
            <param name="deploymentOption">A <see cref="!:VGRepositoryDeploymentOptions"/> object that defines the deployment options.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction.GetLogEntry">
            <summary>
            Returns the log entry representing the action.
            </summary>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement">
            <summary>
            Represents a deployment action in the deployment configuration file
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement.#ctor(Novalys.VisualGuard.Security.Deployment.Common.VGIDeploymentAction)">
            <summary>
            Creates a new instance of the class <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement"/> based on the given action
            </summary>
            <param name="action">the action associated to the element</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement.Id">
            <summary>
            The id of the element
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement.ActionType">
            <summary>
            the type of the action
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement.Values">
            <summary>
            A collection of values associated to the action
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement.Action">
            <summary>
            The action associated to the element
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection">
            <summary>
            Contains a collection of <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement"/> objects representing the list of actions to execute during the deployment
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.#ctor">
            <summary>
            Creates a new instance of the class <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement"/> instance.
            </summary>
            <returns>a new <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement"/> instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the specified element
            </summary>
            <param name="element">the element to return the key for</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.Add(Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement)">
            <summary>
            Adds an action at the end of the collection
            </summary>
            <param name="action">the action to add.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.Remove(Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElement)">
            <summary>
            Removes an action from the collection
            </summary>
            <param name="action">the action to remove.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.CollectionType">
            <summary>
            Gets the value <see cref="F:System.Configuration.ConfigurationElementCollectionType.BasicMap"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection in the configuration file.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement">
            <summary>
            Specifies the options of a Visual Guard repository deployeent
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement" /> class. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement.TraceLevel">
            <summary>
            Gets or sets the trace level that determines the messages that will be traced.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement.TraceFileName">
            <summary>
            Gets or sets of the name of the file used to store the trace 
            </summary>
            <value>the path of the file used to store the trace. if the value is an empty string, the trace messages are written to the console.</value>
            <remarks>By default, the trace messages are written to the console.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement.UpgradeMinimumSupportedRuntimeVersion">
            <summary>
            Gets or sets of a boolean value indicating when the minimum supported runtime version of the target repository can be upgraded.
            </summary>
            <value><c>true</c> when the version can be upgraded, false otherwise. The default value is false.</value>
            <remarks>When the value is equal to false and the minimum supported runtime version of the source repository is higher than the minimum version of the target repository the deployment process will fail.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentRepositoryConnection.UpgradeMinimumSupportedRuntimeVersion">
            <summary>
            Gets or sets of a boolean value indicating when the minimum supported runtime version of the target repository can be upgraded.
            </summary>
            <value><c>true</c> when the version can be upgraded, false otherwise. The default value is false.</value>
            <remarks>When the value is equal to false and the minimum supported runtime version of the source repository is higher than the minimum version of the target repository the deployment process will fail.</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement">
            <summary>
            Represents the repository information to deploy in the deployment configuration file
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement"/> class.
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement.RepositoryItems">
            <summary>
            Gets the list of repository items stored in the deployment configuration file.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement.Properties">
            <summary>
            Gets the collection of properties
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection">
            <summary>
            Represents a Visual Guard repository deployment settings in a configuration file.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection" /> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection.#ctor(Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentOptionsElement,Novalys.VisualGuard.Security.Deployment.Storage.VGDeploymentActionElementCollection,Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDataElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection" /> class.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection.DeploymentOptions">
            <summary>
            Gets the options used to deploy a repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection.Actions">
            <summary>
            Gets the actions to execute during the deployment
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryDeploymentSection.RepositoryData">
            <summary>
            Gets the repository data used as source for the deployment
            </summary>
            <remarks>this section is used only when the source of repository information is stored in the deployment configuration file</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement"/> objects stored in deployment configuration file.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.CreateNewElement">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement"/> class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the specified element
            </summary>
            <param name="element">the element to the key is retrieved</param>
            <returns>an object representing the key of the element</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement"/> object corresponding to the specified repository Id.
            </summary>
            <param name="key">the repository id of the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> stored in the <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement"/> object</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.Add(Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement)">
            <summary>
            Adds an item in the collection
            </summary>
            <param name="el">a <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement"/> object representing a repository item</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.Replace(Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement)">
            <summary>
            Replaces an item with the same id by the given item
            </summary>
            <param name="el">the new item</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.Remove(System.Type,System.String)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="itemType">the type of the item</param>
            <param name="repositoryId">the repository id of the item to remove</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationCollection.ThrowOnDuplicate">
            <summary>
            Indicates whether an exception is thrown when an element already exists in the collection
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement">
            <summary>
            Represents a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> stored in the deployment configuration file.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement.#ctor(Novalys.VisualGuard.Security.Common.VGIInformation)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement"/> class with the specified <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object.
            </summary>
            <param name="item">the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object stored in the deployment configuration file</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement.Item">
            <summary>
            The <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object represented by the element.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets the value indicating whether an unknown attribute is encountered during deserialization
            </summary>
            <param name="name">the name of the attribute</param>
            <param name="value">the value of the attribute</param>
            <returns>true when the attribute is valid</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Gets the value indicating whether an unknown element is encountered during deserialization
            </summary>
            <param name="elementName">the name of the eement</param>
            <param name="reader">the System.Xml.XmlReader containing the data of the element</param>
            <returns>true when the element is valid</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.Storage.VGRepositoryInformationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes the outer tags of this configuration element to the configuration file when implemented in a derived class.
            </summary>
            <param name="writer">The XmlWriter that writes to the configuration file.</param>
            <param name="elementName">The name of the ConfigurationElement to be written. </param>
            <returns>true if writing was successful.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Deployment.VGDeploymentExecutor.ControllerTarget">
            <summary>
            You need to use only in ExecuteActions method
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Deployment.VGDeploymentExecutor.ExecuteActions(System.String,Novalys.VisualGuard.Security.CraftSystem.VGCraftController)">
            <summary>
            Executes all actions specified in the deployment configuration file against the specified target repository.
            </summary>
            <remarks>This method reads the options defined in the property <see cref="!:Section"/> and execute all actions against the target repository.</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity">
            <summary>
            Represente an Entity of Active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.EntityType">
            <summary>
            Return the type of this Entry
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.Name">
            <summary>
            Return the name of this entity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.Path">
            <summary>
            Return the path of this entity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.DomainId">
            <summary>
            Return the path of this entity
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.GetFolder(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Return the folder of this entity
            </summary>
            <param name="dirEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.GetPropertyValue(System.DirectoryServices.DirectoryEntry,System.String)">
            <summary>
            Return the value of one property
            </summary>
            <param name="dirEntry"></param>
            <param name="strPropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryEntity.ConvertByteToStringSid(System.Byte[])">
            <summary>
            Convert the byte array to string
            </summary>
            <param name="sidBytes"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectorySearch">
            <summary>
            Criteria for Active directoty Searcher
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties">
            <summary>
            Properties used when Visual-Guard loading Windows user from Active Directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.LOGINNAME">
            <summary>
            sAMAccountName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.DISPLAYNAME">
            <summary>
            displayName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.USERNAME">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.FIRSTNAME">
            <summary>
            givenName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.LASTNAME">
            <summary>
            LASTNAME
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.EMAILADDRESS">
            <summary>
            mail
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.INFOLDER">
            <summary>
            memberOf
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.CONTAINERNAME">
            <summary>
            cn
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.DESCRIPTION">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectoryUserProperties.OBJECTSID">
            <summary>
            objectSid
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.Services.VGADConnection.ForcePassword(System.DirectoryServices.DirectoryEntry,System.String)">
            <summary>
            Method to set the password of user account in the AD.
            </summary>
            <param name="userEntry">userEntry</param>
            <param name="password">password</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.Services.VGADConnection.ChangePassword(System.DirectoryServices.DirectoryEntry,System.String,System.String)">
            <summary>
             Method to change the password of user account in the AD.
            </summary>
            <param name="userEntry">userEntry</param>
            <param name="oldPassword">old password</param>
            <param name="newPassword">new password</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.Services.VGADConnection.EnableAccount(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Method to enable a user account in the AD.
            </summary>
            <param name="userEntry"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Domain.Services.VGADConnection.DisableAccount(System.DirectoryServices.DirectoryEntry)">
            <summary>
            Method that disables a user account in the AD and hides user's email from Exchange address lists.
            </summary>
            <param name="userEntry"></param>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.LOGINNAME">
            <summary>
            sAMAccountName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.DISPLAYNAME">
            <summary>
            displayName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.USERNAME">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.FIRSTNAME">
            <summary>
            givenName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.EMAILADDRESS">
            <summary>
            mail
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.INFOLDER">
            <summary>
            memberOf
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.CONTAINERNAME">
            <summary>
            cn
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.DESCRIPTION">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGADEntityProperties.OBJECTSID">
            <summary>
            objectSid
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionChangePassword">
            <summary>
            Represents an enum for action while changing password of user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionChangePassword.Default">
            <summary>
            Default (Default - No)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionChangePassword.NO">
            <summary>
            VisualGuard will not perform any action in Active Directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionChangePassword.ChangePassword">
            <summary>
            VisualGuard will try to change password in Active Directory
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionLockUnlock">
            <summary>
            Represents an enum for action while locking/unlocking user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionLockUnlock.Default">
            <summary>
            Default (Default - No)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionLockUnlock.NO">
            <summary>
            VisualGuard will not perform any action in Active Directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionLockUnlock.Lock">
            <summary>
            VisualGuard will try to lock/unlock the user in Active Directory
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionCreation">
            <summary>
            Represents an enum for action while creating user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionCreation.Default">
            <summary>
            Default (Default - Create)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionCreation.NO">
            <summary>
            VisualGuard will not perform any action in Active Directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionCreation.Create">
            <summary>
            VisualGuard will try to create user in Active Directory
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionDeletion">
            <summary>
            Represents an enum for action while deleting user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionDeletion.Default">
            <summary>
            Default (Default - No)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionDeletion.NO">
            <summary>
            VisualGuard will not perform any action in Active Directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionDeletion.TryDelete">
            <summary>
            VisualGuard will try to delete the user in Active Directory, if failed, no exception will be thrown.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionDeletion.Delete">
            <summary>
            VisualGuard will try to delete the user in Active Directory, if failed it will throw the exception
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainActionDeletion.TryDisable">
            <summary>
            VisualGuard will try to disable the user in Active Directory, if failed, no exception will be thrown.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.Services.VGDomainSynchro">
            <summary>
            Represents an enum for domain attribtues synchronization 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainSynchro.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainSynchro.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainSynchro.VGToAD">
            <summary>
            Synchronization of profile values - VisualGuard to Active Directory
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainSynchro.ADToVG">
            <summary>
            Synchronization of profile values - Active Directory to VisualGuard
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Domain.Services.VGDomainSynchro.Both">
            <summary>
            Synchronization of profile values in both direction.
            VisualGuard to ActiveDirectory And ActiveDirectory to VisualGuard
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Domain.Services.VGDomainUserProperties">
            <summary>
            Represents an enum for VGDomainUser properties
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility">
            <summary>
            <para>Common Cryptography methods.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.LogCryptographyException(System.Exception)">
            <summary>
            <para>Logs an exception that occurs during a cryptography operation to the event log.</para>
            </summary>
            <param name="ex">
            <para>The <see cref="T:System.Exception"/> to log.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            <para>Determine if two byte arrays are equal.</para>
            </summary>
            <param name="byte1">
            <para>The first byte array to compare.</para>
            </param>
            <param name="byte2">
            <para>The byte array to compare to the first.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the two byte arrays are equal; otherwise <see langword="false"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.GetBytesFromHexString(System.String)">
            <summary>
            <para>Returns a byte array from a string representing a hexadecimal number.</para>
            </summary>
            <param name="hexidecimalNumber">
            <para>The string containing a valid hexadecimal number.</para>
            </param>
            <returns><para>The byte array representing the hexidecimal.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.GetHexStringFromBytes(System.Byte[])">
            <summary>
            <para>Returns a string from a byte array represented as a hexadecimal number (eg: 0F351A).</para>
            </summary>
            <param name="bytes">
            <para>The byte array to convert to format as a hexadecimal number.</para>
            </param>
            <returns>
            <para>The formatted representation of the bytes as a hexadecimal number.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.CombineBytes(System.Byte[],System.Byte[])">
            <summary>
            <para>Combines two byte arrays into one.</para>
            </summary>
            <param name="buffer1"><para>The prefixed bytes.</para></param>
            <param name="buffer2"><para>The suffixed bytes.</para></param>
            <returns><para>The combined byte arrays.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.GetRandomBytes(System.Int32)">
            <summary>
            Creates a cryptographically strong random set of bytes.
            </summary>
            <param name="size">The size of the byte array to generate.</param>
            <returns>The computed bytes.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.GetRandomBytes(System.Byte[])">
            <summary>
            <para>Fills a byte array with a cryptographically strong random set of bytes.</para>
            </summary>
            <param name="bytes"><para>The byte array to fill.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.CryptographyUtility.ZeroOutBytes(System.Byte[])">
            <summary>
            <para>Fills <paramref name="bytes"/> zeros.</para>
            </summary>
            <param name="bytes">
            <para>The byte array to fill.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer">
            <summary>
            <para>Represents a managed wrapper over the DPAPI win32 apis.</para>
            </summary>
            <remarks>
            This is a DPAPI wrapper.  It is heavily based on the reference application on the Microsoft whitepaper at:
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT07.asp?frame=true
            There have been some improvements, notably in the stricter cleanup of unmanaged global handles in Finally blocks.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer"/> class with the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/> set to <see cref="F:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode.Machine"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.#ctor(Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/>.</para>
            </summary>
            <param name="storageMode"><para>One of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/> values.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.StorageMode">
            <summary>
            <para>Gets the storage mode for this instance.</para>
            </summary>
            <value>One of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/> values.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.Encrypt(System.Byte[])">
            <summary>
            <para>
            Encrypt given data; this overload can be used ONLY when storage mode is "User", since when storage mode 
            is "Machine" we MUST have optional entropy to "salt" the phrase.
            This will throw an Invalid Operation Exception if used in Machine mode.
            </para>
            </summary>
            <param name="plaintext"><para>The plain text that will be encrypted.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.Decrypt(System.Byte[])">
            <summary>
            <para>
            Decrypts the given ciphertext.  Can be used only when in "User" mode, otherwise this will throw 
            an InvalidOperationException because entropy is required when using Machine mode.
            </para>
            </summary>
            <param name="cipherText">
            <para>The cipher text that will be decrypted.</para>
            </param>
            <returns>
            <para>The resulting plain text.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            <para>
            Encrypt given data; this overload should be used when storage mode is "Machine", since when storage mode 
            is "Machine" you must define entropy to "salt" the phrase.
            </para>
            </summary>
            <param name="plaintext"><para>The plain text that will be encrypted.</para></param>
            <param name="entropy"><para>The entropy to salt the phrase.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiCryptographer.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            <para>Decrypt the given data.</para>
            </summary>
            <param name="cipherText"><para>The cipher text that will be decrypted.</para></param>
            <param name="entropy"><para>The entropy that was used to salt the phrase.</para></param>
            <returns><para>The resulting plain text.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode">
            <summary>
            <para>Specifies the key store used by DPAPI.</para>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode.None">
            <summary>
            No storage mode specified. Should never happen or be used
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode.Machine">
            <summary>
            <para>Store the key  using the machine account.</para>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode.User">
            <summary>
            <para>No storage selected. This value represents that we are not using DPAPI.</para>
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer">
            <summary>
            <para>Represents a basic cryptography services for a <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer"/> with an algorithm type.</para>
            </summary>
            <param name="algorithmType">A fully qualified type name derived from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer"/> with an algorithm type and key.</para>
            </summary>
            <param name="algorithmType">A fully qualified type name derived from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.</param>
            <param name="key"><para>The key for a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</para></param>
            <remarks>
            While this overload will work with a specified <see cref="T:System.Security.Cryptography.HashAlgorithm"/>, the key 
            is only relevant when initializing with a specified <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer.ComputeHash(System.Byte[])">
            <summary>
            <para>Computes the hash value of the plaintext.</para>
            </summary>
            <param name="plaintext"><para>The plaintext in which you wish to hash.</para></param>
            <returns><para>The resulting hash.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.NativeMethods">
            <devdoc>
            Native methods for interop with crypt32.dll and kernel32.dll.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer">
            <summary>
            <para>Represents basic cryptography services for a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
            <remarks>
            <para>
            Because the IV (Initialization Vector) has the same distribution as the resulting 
            ciphertext, the IV is randomly generated and prepended to the ciphertext.
            </para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer"/> class with a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/> and key.</para>
            </summary>
            <param name="algorithm"><para>The algorithm in which to perform cryptographic functions.</para></param>
            <param name="key"><para>The key for the algorithm.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer"/> class with an algorithm type and a key.</para>
            </summary>
            <param name="algorithmType"><para>The qualified assembly name of a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para></param>
            <param name="key"><para>The key for the algorithm.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="plaintext"><para>The plaintext in which you wish to encrypt.</para></param>
            <returns><para>The resulting ciphertext.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.SymmetricCryptographer.Decrypt(System.Byte[])">
            <summary>
            <para>Decrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="encryptedText"><para>The text which you wish to decrypt.</para></param>
            <returns><para>The resulting plaintext.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder">
            <summary>
            <para>
            Provides a facade to configuration settings from defined storage in a specified configuration section. 
            </para>
            </summary> 
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ConfigurationChanging">
            <summary>
            <para>Occurs before configuration is changed.</para>
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.#ctor(System.String)">
            <summary>
            <para>
            Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager"/> class with a configuration file.
            </para>
            </summary>
            <param name="configurationFile">
            <para>
            The file where the configuration settings are defined.
            </para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager"/> class with the preloaded configuration.</para>
            </summary>
            <param name="configurationSettings">
            <para>The preloaded configuration data to initialize the manager.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.MsCorLibDirectory">
            <devdoc>
            Get the directory for current NDP
            </devdoc>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.MachineConfigurationFile">
            <devdoc>
            Get the machine configuration file.
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ReadConfiguration(System.String)">
            <summary>
            <para>
            Reads configuration settings for a user-defined configuration section.
            </para>
            </summary>
            <param name="sectionName">
            <para>The configuration section to read.</para>
            </param>
            <returns>
            <para>The configuration settings for <paramref name="sectionName"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="sectionName"/>can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid for this configuration.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.WriteConfiguration(System.String,System.Object)">
            <summary>
            <para>
            Write configuration for a section to storage.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the configuration data.</para>
            </param>
            <param name="configValue">
            <para>The configuration value to store.</para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid section for this configuration.</para>
            <para>- or -</para>
            <para>The section data is read only.</para>
            <para>- or -</para>
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.WriteMetaConfiguration(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSettings">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.WriteMetaConfig(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSectionData">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The configuration section already exists.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ReadMetaConfiguration">
            <summary>
            <para>
            Read the meta configuration for the configuration manager.
            </para>
            </summary>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ReadMetaConfiguration(System.String)">
            <summary>
            <para>
            Read the meta configuration for the configuration manager.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the configuration section to retrieve.    </para>
            </param>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.IsReadOnly(System.String)">
            <summary>
            <para>
            Gets a value indicating whether a section in configuration is read-only.
            </para>
            </summary>
            <param name="sectionName">
            <para>
            The section in the configuration.
            </para>
            </param>
            <returns>
            <see langword="true"/> if the configuration section is read-only; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="sectionName"/> can not be <see langword="null"/>.</para>
            </exception>		
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.IsValidSection(System.String)">
            <summary>
            <para>Determines if a section name is valid in the current configuration file.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to validate.</para>
            </param>
            <returns><see langword="true"/> if the section name is valid; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ClearSectionCache(System.String)">
            <summary>
            <para>Removes a section from the internal cache.</para>
            </summary>
            <param name="sectionName">
            <para>The section name to remove.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ClearSectionCache">
            <summary>
            <para>Removes all sections from the internal cache.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.OnConfigurationChanging(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs)">
            <summary>
            <para>Raises the <seealso cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ConfigurationChanging"/> event.</para>
            </summary>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.OnConfigurationChanged(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs)">
            <summary>
            <para>Raises the <seealso cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.ConfigurationChanged"/> event.</para>
            </summary>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.CreateContext">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> for the current <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager"/>.</para>
            </summary>
            <returns><para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/>.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationBuilder.Serialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings)">
            <devdoc>
            Serialize the block configuration into an XmlNode.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventHandler">
            <summary>
            <para>Represents the method that will handle the <seealso cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ConfigurationChanged"/> and <see cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationChanged"/> events.</para>
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs">
            <summary>
            <para>Provides data for the <seealso cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ConfigurationChanged"/> and <see cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationChanged"/> event which occurs before configuration is changed and committed to storage.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occurred.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs.ConfigurationFile">
            <summary>
            <para>Gets the configuration file of the data that is changing.</para>
            </summary>
            <value>
            <para>The configuration file of the data that is changing.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs.SectionName">
            <summary>
            <para>Gets the section name where the changes occurred.</para>
            </summary>
            <value>
            <para>The section name where the changes occurred.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventHandler">
            <summary>
            <para>Represents the method that will handle the <seealso cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ConfigurationChanging"/> and <see cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationChanging"/> events.</para>
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs">
            <summary>
            <para>Provides data for the <seealso cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ConfigurationChanging"/> and <see cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationChanging"/> event which occurs after configuration is changed and committed to storage.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs"/> class with the configuration file, the section name, the old value, and the new value of the changes.</para>
            </summary>
            <param name="configurationFile"><para>The configuration file where the change occurred.</para></param>
            <param name="sectionName"><para>The section name of the changes.</para></param>
            <param name="oldValue"><para>The old value.</para></param>
            <param name="newValue"><para>The new value.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs.OldValue">
            <summary>
            <para>Gets the old value.</para>
            </summary>
            <value>
            <para>The old value.</para>
            </value>
            <remarks>
            <value>If no old value existed this value will be <see langword="null"/>.</value>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs.NewValue">
            <summary>
            <para>Gets the new value.</para>
            </summary>
            <value>
            <para>The new value.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs.Cancel">
            <summary>
            <para>Determines if the changes should be canceled.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the changes should be canceled; otherwise, <see langword="false"/>.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext">
            <summary>
            Represents a read-only set of configuration data
            indexed by configuration section name.
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationChanging">
            <summary>
            <para>Occurs before configuration is changed.</para>
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.IDisposableWrapper)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> class with the specified <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager"/></para>
            </summary>
            <param name="disposableWrapper">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.IDisposableWrapper"/> used to create the context.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> class from a configuration file.</para>
            </summary>
            <param name="configurationFile">
            <para>The configuration file containing the meta data.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> class with the specified <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary"/>.</para>
            </summary>
            <param name="dictionary">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary"/> to initialize the context.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.Finalize">
            <summary>
            <para>Allows the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ConfigurationFile">
            <summary>
            <para>Gets the configuration file used by the current context where the meta data is stored.</para>
            </summary>
            <value>
            <para>The configuration file used by the current context where the meta data is stored.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.GetConfiguration(System.String)">
            <summary>
            <para>
            Gets the configuration settings for a configuration section.
            </para>
            </summary>
            <param name="sectionName">
            <para>The configuration section to read.</para>
            </param>
            <returns>
            <para>The configuration settings for <paramref name="sectionName"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.GetMetaConfiguration">
            <summary>
            <para>
            Gets the meta configuration for the configuration manager.
            </para>
            </summary>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.GetMetaConfiguration(System.String)">
            <summary>
            <para>
            Gets the meta configuration for the configuration manager.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the configuration section to retrieve.    </para>
            </param>
            <returns>
            <para>
            The meta configuration for the configuration manager or null if no entries exists.
            </para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the meta configuration.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.WriteMetaConfiguration(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSettings">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.WriteMetaConfiguration(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData)">
            <summary>
            <para>
            Write the meta configuration for the configuration manager to the configuration file.
            </para>
            </summary>
            <param name="configurationSectionData">
            The meta configuration to write to configuration.
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The configuration section already exists.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.WriteConfiguration(System.String,System.Object)">
            <summary>
            <para>
            Write configuration for a section to storage.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the configuration data.</para>
            </param>
            <param name="configValue">
            <para>The configuration value to store.</para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid section for this configuration.</para>
            <para>- or -</para>
            <para>The section data is read only.</para>
            <para>- or -</para>
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ClearSectionCache">
            <summary>
            <para>Removes all sections from the internal cache.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.ClearSectionCache(System.String)">
            <summary>
            <para>Removes a section from the internal cache.</para>
            </summary>
            <param name="sectionName">
            <para>The section name to remove.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.IsValidSection(System.String)">
            <summary>
            <para>Determines if a section name is valid in the current configuration file.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to validate.</para>
            </param>
            <returns><see langword="true"/> if the section name is valid; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext.IsReadOnly(System.String)">
            <summary>
            <para>
            Gets a value indicating whether a section in configuration is read-only.
            </para>
            </summary>
            <param name="sectionName">
            <para>
            The section in the configuration.
            </para>
            </param>
            <returns>
            <see langword="true"/> if the configuration section is read-only; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="sectionName"/> can not be <see langword="null"/>.</para>
            </exception>		
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary">
            <summary>
            <para>Represents a strongly-typed dictionary of section name and configuration data entries.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.Keys">
            <summary>
            <para>Gets an <see cref="T:System.Collections.ICollection"/> containing the configuration section names.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Collections.ICollection"/> containing the configuration section names.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.Values">
            <summary>
            <para>Gets an <see cref="T:System.Collections.ICollection"/> containing the configuration section values.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Collections.ICollection"/> containing the configuration section values.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.Item(System.String)">
            <summary>
            <para>Gets or sets the configuration data for the specified configuration section name.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the configuration section.</para>
            </param>
            <value>
            <para>The configuration data for the specified configuration section name.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.Add(System.String,System.Object)">
            <summary>
            <para>Adds the specified configuration data for the specified configuration section name.</para>
            </summary>
            <param name="sectionName"><para>The name of a configuration section.</para></param>
            <param name="configurationData"><para>A configuration data object.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.Contains(System.String)">
            <summary>
            <para>determines whether the section already exists.</para>
            </summary>
            <param name="sectionName"><para>The configuration section to locate.</para></param>
            <returns><para><see langword="true"/> if the element with the key exists; otherwise, <see langword="false"/>.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary.Remove(System.String)">
            <summary>
            <para>Removes the configuration data from the dictionary for the specified configuration section.</para>
            </summary>
            <param name="sectionName"><para>The configuration section name to remove.</para></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory">
            <summary>
            <para>Represents a factory for creating objects from configuration.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.#ctor(System.String,Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory"/> class with the factory name and a <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.ConfigurationContext"/>.</para>
            </summary>
            <param name="factoryName">
            <para>The name of the factory.</para>
            </param>
            <param name="configurationContext">
            <para>A <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.ConfigurationContext"/> object</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.ConfigurationContext">
            <summary>
            <para>Gets the <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.ConfigurationContext"/> for the factory.</para>
            </summary>
            <value>
            <para>The <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.ConfigurationContext"/> for the factory.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.FactoryName">
            <summary>
            <para>Gets the name of the factory.</para>
            </summary>
            <value>
            <para>The name of the factory.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.GetConfigurationType(System.String)">
            <summary>
            <para>When overridden by a derived class, gets the configuration object <see cref="T:System.Type"/> for the factory to create given the <paramref name="configurationName"/>.</para>
            </summary>
            <param name="configurationName">
            <para>The name of the configuration object to create.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> of the configuration object.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.PublishFailureEvent(System.String,System.Exception)">
            <summary>
            <para>Publish an instrumentation event that indicates there was an error while attempting to create a provider.</para>
            </summary>
            <param name="configurationName"><para>The name of the configuration object.</para></param>
            <param name="e"><para>The <see cref="T:System.Exception"/> to publish.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.CreateInstance(System.String)">
            <summary>
            <para>Creates an instance of the named configuration object.</para>
            </summary>
            <param name="configurationName">
            <para>The name of the configuration object.</para>
            </param>
            <returns>
            <para>An instance of the configuration object.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.CreateObject(System.String,System.Type)">
            <summary>
            <para>Construct an instance of a named configuration object by the <paramref name="type"/>.</para>
            </summary>
            <param name="configurationName">
            <para>The name of the configuration object.</para>
            </param>
            <param name="type"><para>The <see cref="T:System.Type"/> to create.</para></param>
            <returns>An instance of the type.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFactory.GetType(System.String)">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> based on a qualified name.</para>
            </summary>
            <param name="typeName">
            <para>The qualified name.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> based on the qualified name.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFile">
            <devdoc>
            Represents a configuration file according to the schema for Fx 1.1
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFile.AppendSection(System.String,System.String,System.Xml.XmlNode)">
            <devdoc>
            Append a new section to the configSections of the configuration file given the 
            sectionName and typeName.  The objectData is
            </devdoc>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationFile.SectionExists(System.Xml.XmlNode,System.String)">
            <devdoc>
            Determines if a section exist in the config sections given the configSections node and the name of the section.
            </devdoc>        
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager">
            <summary>
            <para>
            Provides a facade to configuration settings from defined storage in a specified configuration section. 
            </para>
            </summary> 
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ConfigurationChanging">
            <summary>
            <para>Occurs before configuration is changed.</para>
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ConfigurationChanged">
            <summary>
            <para>Occurs after configuration is changed.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.Current">
            <devdoc>
            The singleton instance to use with static methods.
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.GetConfiguration(System.String)">
            <summary>
            <para>
            Returns configuration settings for a user-defined configuration section.
            </para>
            </summary>
            <param name="sectionName">
            <para>The configuration section to read.</para>
            </param>
            <returns>
            <para>The configuration settings for <paramref name="sectionName"/>.</para>
            </returns>
            <remarks>
            <para>Once a section is read, the data for that section is cached and it will always return the same data.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.WriteConfiguration(System.String,System.Object)">
            <summary>
            <para>
            Write configuration for a section to storage.
            </para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the configuration data.</para>
            </param>
            <param name="configValue">
            <para>The configuration value to store.</para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para><paramref name="sectionName"/> is not valid section for this configuration.</para>
            <para>- or -</para>
            <para>The section data is read only.</para>
            <para>- or -</para>
            <para>An error occurred while reading the configuration to save the data.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.GetCurrentContext">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> for the current <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager"/>.</para>
            </summary>
            <returns><para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.CreateContext(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary)">
            <summary>
            <para>Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> class with the specified <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary"/>.</para>
            </summary>
            <param name="dictionary"><para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationDictionary"/>.</para></param>
            <returns>
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.CreateContext">
            <summary>
            <para>Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <returns>
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.CreateContext(System.String)">
            <summary>
            <para>Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object for the given <paraname ref="configurationFile"/>.</para>
            </summary>
            <param name="configurationFile">
            <para>The configuration file that contains the meta configuration.</para>
            </param>
            <returns>
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ClearSingletonSectionCache(System.String)">
            <summary>
            <para>Removes a section from the internal cache.</para>
            </summary>
            <param name="section">
            <para>The section name to remove.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.ClearSingletonSectionCache">
            <summary>
            <para>Removes all sections from the internal cache.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.OnConfigurationChanged(System.Object,Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangedEventArgs)">
            <devdoc>
            Raises the ConfigurationChanged event.
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManager.OnConfigurationChanging(System.Object,Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationChangingEventArgs)">
            <devdoc>
            Raises the ConfigurationChanging event.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManagerSectionHandler">
            <summary>
            Reads the "enterpriselibrary.configurationSettings" section of the configuration file. 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManagerSectionHandler.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManagerSectionHandler"/> class.
            </para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            <para>
            Evaluates the given XML section and returns a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/> instance that contains the results of the evaluation.
            </para>
            </summary>
            <param name="parent">
            <para>The configuration settings in a corresponding parent configuration section. </para>
            </param>
            <param name="configContext">
            <para>An HttpConfigurationContext when <see cref="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationManagerSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)"/> is called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference (Nothing in Visual Basic). </para>
            </param>
            <param name="section">
            <para>The <see cref="T:System.Xml.XmlNode"/> that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section. </para>
            </param>
            <returns>
            <para>
            A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/> instance that contains the section's configuration settings.
            </para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector">
            <summary>
            <para>Provides functionality to encrypt and decrypt configuration data with symmetric algorithms defined in the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Finalize">
            <summary>
            <para>Allows an the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> is reclaimed by garbage collection. </para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Load(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext,System.String)">
            <summary>
            <para>Load the configured protection mechanism for the section. This is the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData"/> to load the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to encrypt.</para>
            </param>
            <param name="context">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="context"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>An error occurred in configuration.</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Encrypted">
            <summary>
            <para>Determines if the data is to be encrypted or not.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the data is to be encrypted; otherwise <see langword="false"/>.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="plaintext"><para>The plaintext in which you wish to encrypt.</para></param>
            <returns><para>The resulting ciphertext.</para></returns>
            <remarks>
            <para>If no encryption is defined, the bytes passed in are returned.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector.Decrypt(System.Byte[])">
            <summary>
            <para>Decrypts bytes with the initialized algorithm and key.</para>
            </summary>
            <param name="ciphertext"><para>The ciphertext in which you wish to decrypt.</para></param>
            <returns><para>The resulting plaintext.</para></returns>
            <remarks>
            <para>If no encryption is defined, the bytes passed in are returned.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProvider">
            <summary>
            <para>Represents an object that consumes configuration. This class is abstract.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProvider"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProvider.ConfigurationName">
            <summary>
            <para>Gets or sets the name of the provider.</para>
            </summary>
            <value><para>The name of the provider.</para></value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>When overridden by a class, initializes the provider with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettingsLoader">
            <devdoc>
            Reads the "enterpriselibrary.configurationSettings" section of the configuration file. 
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettingsLoader.GetTypes(System.Xml.XPath.XPathNavigator)">
            <devdoc>
            Full demand needed to protect Type.GetType. LinkDemand insufficient because that only
            checks permissions of calling code, which would be Create, which has full 
            trust
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView">
            <summary>
            <para>Represents a view into configuration data.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/> with a <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView.ConfigurationContext"/>.</para>
            </summary>
            <param name="context">
            <para>A <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView.ConfigurationContext">
            <summary>
            <para>Gets the <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView.ConfigurationContext"/> for the current view.</para>
            </summary>
            <value>
            <para>The <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView.ConfigurationContext"/> for the current view.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data to an <see cref="T:System.AppDomain"/> configuration file.</para>
            </summary>    	
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData.ConfigurationFile">
            <summary>
            <para>Gets the current <see cref="T:System.AppDomain"/> configuration file.</para>
            </summary>
            <value>
            <para>The current <see cref="T:System.AppDomain"/> configuration file.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider"/>.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.AppConfigFileStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData">
            <summary>
            <para>Represents a configuration section in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>configurationSection</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.#ctor(System.String,System.Boolean,Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData,Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class with a name, a cache, a storage provider, a data protection provider and a data transformer.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
            <param name="storageProvider">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> used for the configuration section.</para>
            </param>        
            <param name="transformer">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> used for the section.</para>
            </param>                
            <seealso cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/>        
            <seealso cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.StorageProvider">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> settings for the section.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> settings for the section. The default is <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </value>
            <remarks>
            <para>This property maps to the <c>storageProvider</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.Transformer">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> settings for the section.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> settings for the section. The default is <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </value>
            <remarks>
            <para>This property maps to the <c>dataTransformer</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.Name">
            <summary>
            <para>Gets or sets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/>. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.Encrypt">
            <summary>
            <para>Gets or sets if the section will be encrypted.</para>
            </summary>
            <value>
            <para><see langword="true"/> if the section will be encrypted; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>encrypt</c> attribute in configuration for the configuration section.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> objects for the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/> in configuration.</para>
            </summary>       
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection.Add(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> into the collection.</para>
            </summary>
            <param name="configurationSection">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="configurationSection"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection.CopyTo(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection"/> to a compatible one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> array that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection"/>. The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings">
            <summary>
            <para>Represents the root of the configuration graph.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>enterpriselibrary.configurationSettings</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.SectionName">
            <summary>
            <para>Gets the section name for the library in configuration.</para>
            </summary>
            <value>
            <para>The section name for the library in configuration.</para>
            </value>
            <remarks>
            <para>The section name is enterpriselibrary.configurationSettings.</para>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.ConfigurationNamespace">
            <summary>
            <para>Gets the Xml namespace for this root node.</para>
            </summary>
            <value>
            <para>The Xml namespace for this root node.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/> class with a default section name.</para>
            </summary>
            <param name="applicationName">
            <para>The name of the application for these settings.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.ConfigurationSections">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionDataCollection"/>.</para>
            </summary>
            <value>
            <para>The configuration sections available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>configurationSections</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.ApplicationName">
            <summary>
            <para>Gets or sets the name of the application for these settings.</para>
            </summary>
            <value>
            <para>The name of application for these settings. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>applicationName</c> attribute in configuration for the block configuration.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData.Name"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.KeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Gets or sets the <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.KeyAlgorithmPairStorageProviderData"/> for encrypting sections.</para>
            </summary>
            <value>
            <para>The <see cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.KeyAlgorithmPairStorageProviderData"/> for encrypting sections.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>keyAlgorithmStorageProvider</c> attribute in configuration for the configuration.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings.XmlIncludeTypes">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection"/>.</para>
            </summary>
            <value>
            <para>The include types available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>includeTypes</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Represents a custom storage provider to read and write data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>storageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData"/> class.</para>
            </summary>  
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData"/>.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the custom handler.
            </param>
            <param name="typeName">
            The type of the custom handler.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <remarks>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomKeyAlgorithmPairStorageProviderData.Clone">
            <summary>
            <para>Creates a deep copy of the current instance.</para>
            </summary>
            <returns>
            <para>A deep copy of this instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData">
            <summary>
            <para>Represents a custom storage provider to read and write data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>storageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData"/> class.</para>
            </summary>  
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData"/>.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData"/> class.
            </summary>
            <param name="name">
            The name of the custom handler.
            </param>
            <param name="typeName">
            The type of the custom handler.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <remarks>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomStorageProviderData.Clone">
            <summary>
            <para>Creates a deep copy of the current instance.</para>
            </summary>
            <returns>
            <para>A deep copy of this instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData">
            <summary>
            <para>Represents a custom data transformer for configuration data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>dataTransformer</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData"/> class.</para>
            </summary>  
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData"/> class.
            </summary>
            <param name="name">
            The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData"/>.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData"/> class.
            </summary>
            <param name="name">
            The name of the custom handler.
            </param>
            <param name="typeName">
            The type of the custom handler.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <remarks>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData.Attributes">
            <summary>
            Gets or sets custom configuration attributes.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.CustomTransformerData.Clone">
            <summary>
            <para>Creates a deep copy of the current instance.</para>
            </summary>
            <returns>
            <para>A deep copy of this instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData">
            <summary>
            Configuration settings for any DPAPI implementation.
            </summary>
            <remarks>
            See 
            <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsecure/html/windataprotection-dpapi.asp">Windows Data Protection</a> on
            MSDN for more information.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData.#ctor(System.Byte[],Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData"/> class with entropy and a <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/>.</para>
            </summary>
            <param name="entropy">
            <para>The machine entropy</para>
            </param>
            <param name="mode">
            <para>One of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/> values.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The value provided was out of the excepted valid ranges for <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/>.</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData.Mode">
            <summary>
            <para>Gets or sets the DPAPI storage mode.</para>
            </summary>
            <value>
            <para>One of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/> values.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The value provided was out of the excepted valid ranges for <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode"/>.</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData.Entropy">
            <summary>
            <para>Gets or sets the machine entropy.</para>
            </summary>
            <value>
            <para>The machine entropy.</para>
            </value>
            <remarks>
            <para>This is only required when the mode is set to <seealso cref="F:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.DpapiStorageMode.Machine"/>.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> for a file.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>keyAlgorithmStorageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData"/> class with a name, fully qualified type name and file path.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
            <param name="path">
            <para>The path to the file to store the pair.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.#ctor(System.String,System.String,Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData"/> class with a name, fully qualified type name, file path and the DPAPI settings.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
            <param name="path">
            <para>The path to the file to store the pair.</para>
            </param>
            <param name="dpapiSettings">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData"/> object.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.Path">
            <summary>
            <para>Gets or sets the path of the file for storage.</para>
            </summary>
            <value>
            <para>The path of the file for storage. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>path</c> attribute in configuration for the provider.</para>
            </remarks>        
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.DpapiSettings">
            <summary>
            <para>Gets the settings for DPAPI protection (optional).</para>
            </summary>
            <value>
            <para>The settings for DPAPI protection (optional).</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.FileKeyAlgorithmPairStorageProvider"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.FileKeyAlgorithmPairStorageProvider"/>.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.FileKeyAlgorithmPairStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>keyAlgorithmStorageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData"/> class.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ReadOnlyConfigurationSectionData">
            <summary>
            <para>Represents a configuration section in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>configurationSection</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ReadOnlyConfigurationSectionData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ReadOnlyConfigurationSectionData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ReadOnlyConfigurationSectionData.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ReadOnlyConfigurationSectionData.#ctor(System.String,System.Boolean,Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData,Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSectionData"/> class with a name, a cache, a storage provider, a data protection provider and a data transformer.</para>
            </summary>
            <param name="name">
            <para>The name of the section.</para>
            </param>
            <param name="encrypt">
            <para>Determines if the section is encrypted or not.</para>
            </param>
            <param name="storageProvider">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> used for the configuration section.</para>
            </param>        
            <param name="transformer">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> used for the section.</para>
            </param>                
            <seealso cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/>        
            <seealso cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>storageProvider</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the storage provider.</para>
            </param>
            <param name="sectionName">
            <para>The section name for the configuration.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData.SectionName">
            <summary>
            <para>Gets or sets the section name for the configuration.</para>
            </summary>
            <value>
            <para>The section name for the configuration.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> objects in configuration.</para>
            </summary>       
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection.Add(Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> into the collection.</para>
            </summary>
            <param name="storageProviderData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="storageProviderData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection.CopyTo(Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection"/> to a compatible one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> array that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.StorageProviderDataCollection"/>. The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> objects in configuration.</para>
            </summary>       
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection.Add(Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> into the collection.</para>
            </summary>
            <param name="transformerData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="transformerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection.CopyTo(Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection"/> to a compatible one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> array that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Configuration.TransformerDataCollection"/>. The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData">
            <summary>
            <para>Represents a data transformer for configuration data in configuration.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>dataTransformer</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData">
            <summary>
            <para>Represents a storage provider to read and write data in configuration from an Xml file.</para>
            </summary>    	
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData"/> class with a name and path to the file.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
            <param name="path">
            <para>The path to the file with the data.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData.Path">
            <summary>
            <para>Gets or sets the path of the Xml file to store configuration.</para>
            </summary>
            <value>
            <para>The path of the Xml file to store configuration. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>path</c> attribute in configuration for the provider.</para>
            </remarks>        
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider"/>.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData">
            <summary>
            <para>Represents a type to include in the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData"/>.</para>
            </summary>
            <remarks>
            <para>The class maps to the <c>configurationSection</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>
            <param name="typeName">
            <para>The fully qualified type name of the transformer.</para>
            </param>      
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.Name">
            <summary>
            <para>Gets or sets the name of the include types.</para>
            </summary>
            <value>
            <para>The name of the include type. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>name</c> attribute in configuration for the type.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.TypeName">
            <summary>
            <para>Gets or sets the name of the transformer.</para>
            </summary>
            <value>
            <para>The name of the transformer. The default is an empty string.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>type</c> attribute in configuration for the type.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/>s for the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData"/> in configuration.</para>
            </summary>       
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection.Add(Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> into the collection.</para>
            </summary>
            <param name="xmlIncludeType">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="xmlIncludeType"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection.CopyTo(Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection"/> to a compatible one-dimensional Array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> array that is the destination of the elements copied from <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection"/>. The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData"/> array must have zero-based indexing.</para>
            </param>
            <param name="index">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData">
            <summary>
            <para>Represents a data transformer that takes data and serializes / deserializes the configuration data info Xml.</para>
            </summary>      
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData"/> class with a name and fully qualified type name.</para>
            </summary>
            <param name="name">
            <para>The name of the transformer.</para>
            </param>       
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData.XmlIncludeTypes">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection"/>.</para>
            </summary>
            <value>
            <para>The include types available in configuration. The default is an empty collection.</para>
            </value>
            <remarks>
            <para>This property maps to the <c>includeTypes</c> element in configuration.</para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData.TypeName">
            <summary>
            <para>Gets the fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer"/>.</para>
            </summary>
            <value>
            <para>The fully qualified assembly name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer"/>.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData.Clone">
            <summary>
            <para>Creates a new object that is a copy of the current instance.</para>
            </summary>
            <returns>
            <para>A new object that is a copy of this instance.</para>
            </returns>
            <remarks>
            <para>This clone does a deep copy.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationChangeWatcherFactory">
            <summary>
            Responsible for defining the interface to be supported by classes that are going to 
            create <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"></see>s
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationChangeWatcherFactory.CreateConfigurationChangeWatcher">
            <summary>
            <para>
            When implemented by a class, creates an object that is responsible for watching for
            changes in the underlying storage mechanism for configuration persistence. When a change
            occurs, this object must raise its ConfigurationChange event.
            </para>
            </summary>
            <returns>An initialized object that will watch for configuration changes.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider">
            <summary>
            <para>
            This interface specifies the contract that providers created through configuration
            must implement to allow them to be properly created and initialized through reflection.
            </para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider.ConfigurationName">
            <summary>
            <para>Gets or sets the name of the provider.</para>
            </summary>
            <value>
            <para>The name of the provider.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.IStorageProviderReader">
            <summary>
            <para>
            Represents a storage provider reader for configuration data.
            </para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.IStorageProviderReader.CurrentSectionName">
            <summary>
            <para>When implemented by a class, gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.IStorageProviderReader.Read">
            <summary>
            <para>When implemented by a class, reads the configuration from storage</para>
            </summary>        
            <returns>
            <para>The configuration data for the sectionName.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.IStorageProviderWriter">
            <summary>
            <para>
            Represents a storage provider writer for configuration data.
            </para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.IStorageProviderWriter.Write(System.Object)">
            <summary>
            When implemented by a class, writes the configuration data to storage.
            </summary>
            <param name="value">
            <para>The value to write to storage.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ITransformer">
            <summary>
            <para>
            Represents a standard interface for transforming configuration data coming from and to storage.
            </para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ITransformer.CurrentSectionName">
            <summary>
            <para>Gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ITransformer.Deserialize(System.Object)">
            <summary>
            <para>
            When implemented by a class, deserializes the configuration data coming from storage.
            </para>
            </summary>
            <param name="section">
            <para>The data that came from storage.</para>
            </param>
            <returns>
            <para>An object that can be consumed by the calling assembly that wants configuration data.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ITransformer.Serialize(System.Object)">
            <summary>
            <para>
            When implemented by a class, serializes the configuration data coming from the calling assembly and maps it into something that the storage provider can understand.
            </para>
            </summary>
            <param name="value">
            <para>The data to serialize.</para>
            </param>
            <returns>
            <para>The object that can be consumed by the storage provider.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem">
            <summary>
            <para>The name value pair used in the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> class with a name and value.</para>
            </summary>
            <param name="name">
            <para>
            <para>The name of the item.</para>
            </para>
            </param>
            <param name="value">
            <para>The value of the item.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.Name">
            <summary>
            <para>Gets or sets the name of the item.</para>
            </summary>
            <value>
            <para>The name of the item.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.Value">
            <summary>
            <para>Gets or sets the value of the item.</para>
            </summary>
            <value>
            <para>The value of the item.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.ToString">
            <summary>
            <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/>.</para>
            </summary>
            <returns>
            <para>The <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.Name"/> of the item.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> objects.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.#ctor">
            <summary>
            <para>Initialzie a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> associated with the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>.</para>
            </value>              
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is equal to or greater than the length of <c>Count</c>.</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> value to get.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </value>              
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.GetNameValueItem(System.String)">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> that is
            keyed by the specified name.
            </summary>
            <param name="name">The name of an item in the list.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified name and value to the list.
            </summary>
            <param name="name">The name of the item.</param>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="item">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="item"/> could not be cast to the correct type.</para>
            </exception>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Add(Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> into the collection.</para>
            </summary>
            <param name="item">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="item"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Insert(System.Int32,Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem)">
            <summary>
            <para>Inserts an element into the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/> at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> to insert.</para>
            </param>
            <exception name="ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>- or -</para>
            <para><paramref name="index"/> is greater than <seealso cref="P:System.Collections.CollectionBase.Count"/>.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Remove(System.String)">
            <summary>
            Removes the entry with the specified <paramref name="name"/> from the collection.
            </summary>
            <param name="name">
            <para>The name of the item to remove.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.IndexOf(Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem)">
            <summary>
            <para>Searches for the specified <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> and returns the zero-based index of the first occurrence within the entire <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </summary>
            <param name="item">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/> to locate in the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </param>
            <returns>
            <para>The zero-based index of the first occurrence of value within the entire <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>, if found; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.Contains(Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem)">
            <summary>
            <para>Determines whether the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/> contains a specific element.</para>
            </summary>
            <param name="item">
            <para>The Object to locate in the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </param>
            <returns>
            <para><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/> contains the specified value; otherwise, <see langword="false"/></para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.CopyTo(Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem[],System.Int32)">
            <summary>
            Copies the entire NameValueItem list to a 
            compatible one-dimensional array of NameValueItem entries, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">An array of type NameValueItem to which 
            the access control list entries will be copied. The array 
            must have zero-based indexing. </param>
            <param name="index">The index in the array at which to 
            begin copying the NameValueItem list entries.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnClear">
            <summary>
            Removes the collection reference from each
            NameValueItem in the list.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnClearComplete">
            <summary>
            Clears all items from the dictionary.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Checks if the item already exists in the collection.
            </summary>
            <param name="index">The zero-based index at which to insert <c>value</c>.</param>
            <param name="value">The new value of the element at <c>index</c>.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Inserts the specified item into the dictionary.
            </summary>
            <param name="index">The index of the item in the list.</param>
            <param name="value">The value of the item to add to the list.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Removes the item at the specified index 
            from the dictionary.
            </summary>
            <param name="index">The index of the item in the list.</param>
            <param name="value">The value of the item at the specified index.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnValidate(System.Object)">
            <summary>
            Checks that the argument is of type 
            <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItem"/>.
            </summary>
            <param name="value">The value of the item to add.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Updates the value dictionary with the new value.
            </summary>
            <param name="index">The index of the item in the list.</param>
            <param name="oldValue">The old value that is being replaced.</param>
            <param name="newValue">The new value that is being set.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher">
            <summary>
            <para>Represents an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> that does nothing.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher.#ctor(System.String)">
            <summary>
            <para>Initialize a new <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher"/> class with the name of the section</para>
            </summary>
            <param name="configurationSectionName">
            <para>The name of the configuration section to watch.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            <para>Event raised when the underlying persistence mechanism for configuration notices that the persistent representation of configuration information has changed.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher.StartWatching">
            <summary>
            <para>Starts watching for configuration changes.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullConfigurationChangeWatcher.StopWatching">
            <summary>
            <para>Stops watching for configuration changes.</para>
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.NullTransformer">
            <devdoc>
            Represents a null transformer object. Introduces the null object pattern since transformers are not required.
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullTransformer.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <devdoc>
            This method does nothing by default.
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullTransformer.Deserialize(System.Object)">
            <devdoc>
            This method does nothing by default.
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.NullTransformer.Serialize(System.Object)">
            <devdoc>
            This method does nothing by default.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.FileKeyAlgorithmPairStorageProvider">
            <summary>
            <para>Provides file storage for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> with optional protection.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.FileKeyAlgorithmPairStorageProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/> object.</para>
            </param>
            <remarks>
            <para>The method expects a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView"/> object for the <paramref name="configurationView"/></para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.FileKeyAlgorithmPairStorageProvider.Load">
            <summary>
            <para>Loads a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> from the configured file.</para>
            </summary>
            <returns>
            <para>The deserialized <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </returns>
            <exception cref="T:System.InvalidCastException">Thrown when a valid object is loaded, but it is not a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"></see></exception> 
            <exception cref="T:System.Configuration.ConfigurationException">Thrown when system is unable to deserialize the stored <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"></see></exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.FileKeyAlgorithmPairStorageProvider.Save(Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair)">
            <summary>
            <para>Saves a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> to the configured file.</para>
            </summary>
            <param name="keyAlgorithmPair">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> to store.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyAlgorithmPairStorageProvider">
            <summary>
            <para>Represents storage for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyAlgorithmPairStorageProvider.Load">
            <summary>
            <para>When implemented by a class, loads the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> from storage.</para>
            </summary>
            <returns>
            <para>Loads the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> from storage.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyAlgorithmPairStorageProvider.Save(Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair)">
            <summary>
            <para>When implemented by a class, saves the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> to storage.</para>
            </summary>
            <param name="keyAlgorithmPair">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> to store.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyCreator">
            <summary>
            <para>Represents the creator of keys for security algorithms.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyCreator.KeyLength">
            <summary>
            <para>When implemented by a class, gets the length of the key.</para>
            </summary>
            <value>The length of the key.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyCreator.GenerateKey">
            <summary>
            <para>When implemented by a class, generates a random key.</para>
            </summary>
            <returns><para>A random key.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.IKeyCreator.KeyIsValid(System.Byte[])">
            <summary>
            <para>When implemented by a class, determines if the <paramref name="key"/> is valid.</para>
            </summary>
            <param name="key">The key to test.</param>
            <returns><para><see langword="true"/> if the key is valid; otherwise <see langword="false"/>.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair">
            <summary>
            <para>Represents the key algorithm pair for encrypting configuration sections.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.#ctor">
            <summary>
            <para>Instantiate a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.#ctor(System.Byte[],System.String)">
            <summary>
            <para>Instantiate a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> class with a key and algorithm type name.</para>
            </summary>
            <param name="key">
            <para>The key for the algorithm.</para>
            </param>
            <param name="algorithmTypeName">
            <para>The fully qualified type name for the algorithm.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.Finalize">
            <summary>
            <para>Allows an the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> is reclaimed by garbage collection. </para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.Dispose(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="disposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.Key">
            <summary>
            <para>Gets or sets the key for the pair.</para>
            </summary>
            <value>
            <para>The key for the pair.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmPair.AlgorithmTypeName">
            <summary>
            <para>Gets or sets the algorithm type name.</para>
            </summary>
            <value>
            <para>The algorithm type name.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyAlgorithmStorageProviderFactory">
            <devdoc>
            The factory that creates IConfigurationStorageProvider objects.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyedHashAlgorithmKeyCreator">
            <summary>
            <para>Creates keys for a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyedHashAlgorithmKeyCreator.#ctor(System.String)">
            <summary>
            <para>Initializes an instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyedHashAlgorithmKeyCreator"/> class for a specific <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</para>
            </summary>
            <param name="typeName">The assembly qualified name of a class which derives from a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyedHashAlgorithmKeyCreator.KeyLength">
            <summary>
            <para>Gets the length of the key.</para>
            </summary>
            <value>The length of the key.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyedHashAlgorithmKeyCreator.GenerateKey">
            <summary>
            <para>Generates a random key.</para>
            </summary>
            <returns><para>A random key.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.KeyedHashAlgorithmKeyCreator.KeyIsValid(System.Byte[])">
            <summary>
            <para>Determines if the <paramref name="key"/> is valid.</para>
            </summary>
            <param name="key">The key to test.</param>
            <returns><para><see langword="true"/> if the key is valid; otherwise <see langword="false"/>.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.SymmetricAlgorithmKeyCreator">
            <summary>
            <para>Creates keys for a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.SymmetricAlgorithmKeyCreator.#ctor(System.String)">
            <summary>
            <para>Initializes an instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.SymmetricAlgorithmKeyCreator"/> class for a specific <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
            <param name="symmetricAlgorithmName">The assembly qualified name of a class which derives from a <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.SymmetricAlgorithmKeyCreator.KeyLength">
            <summary>
            <para>Gets the length of the key.</para>
            </summary>
            <value>The length of the key.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.SymmetricAlgorithmKeyCreator.GenerateKey">
            <summary>
            <para>Generates a random key.</para>
            </summary>
            <returns><para>A random key.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Protection.SymmetricAlgorithmKeyCreator.KeyIsValid(System.Byte[])">
            <summary>
            <para>Determines if the <paramref name="key"/> is valid.</para>
            </summary>
            <param name="key">The key to test.</param>
            <returns><para><see langword="true"/> if the key is valid; otherwise <see langword="false"/>.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData">
            <summary>
            <para>Represents the common configuration data for all providers.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> class with a name and a <see cref="T:System.Type"/> name.</para>
            </summary>
            <param name="name"><para>The name of the provider.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name">
            <summary>
            <para>Gets or sets the name of the provider.</para>
            </summary>
            <value><para>The name of the provider.</para></value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.TypeName">
            <summary>
            <para>When implemented by a class, Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
            <remarks>
            <para><b>Not to implementers:</b> You do not have to implement the set operation.  If you have only one type for your data object you can ignore the set.</para>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection">
            <summary>
            <para>Represents a strongly-typed collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> objects.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.GetProvider(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> to get or set.</para>
            </param>
            <returns>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.GetProvider(System.Int32)">
            <summary>
            <para>Gets the value of the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the value to get.</para>
            </param>
            <returns>
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> object that represents the value of the entry at the specified index.</para>
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.SetProvider(System.String,Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData)">
            <summary>
            <para>Sets the value of the first entry with the specified key in the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection"/> instance, if found; otherwise, adds an entry with the specified key and value into the <see cref="T:Novalys.VisualGuard.Security.Common.VGDataCollection"/> instance.</para>
            </summary>
            <param name="name">
            <para>The string key of the entry to set. The key can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic)</para>.
            </param>
            <param name="data">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            <para>The collection already contains an entry for <paramref name="name"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.SetProvider(System.Int32,Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData)">
            <summary>
            <para>Sets the value of the entry at the specified index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection"/> instance.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the entry to set.</para>
            </param>
            <param name="data">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> object that represents the new value of the entry to set. The value can be a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic).</para>
            </param>
            <exception cref="T:System.NotSupportedException">
            <para>The collection is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is outside the valid range of indexes for the collection.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.AddProvider(Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> into the collection.</para>
            </summary>
            <param name="providerData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.AddProvider(System.String,Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> into the collection.</para>
            </summary>
            <param name="name">
            <para>The name of the key for the <parmref name="providerData"/>. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <param name="providerData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection.AddProviders(Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection)">
            <summary>
            Adds the items in the specified collection to the current collection.
            </summary>
            <param name="collection">A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderDataCollection"/>.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory">
            <summary>
            <para>Provides base functionality for creating named instances of a particular provider type.</para>
            </summary>  
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.#ctor(System.String,Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory"/>
            </summary>
            <param name="factoryName"><para>A friendly name that will be included in exception messages.</para></param>
            <param name="configurationContext"><para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> to use.</para></param>
            <param name="type"><para>The base type of all providers that this factory will create.</para></param>
            <excpetion cref="T:System.ArgumentNullException">
            <para><paramref name="configurationContext"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="factoryName"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="type"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </excpetion>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.ProviderType">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> being created.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Type"/> being created.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.CreateConfigurationView">
            <summary>
            <para>When overridden by a derived class, creates the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/> for the factory.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView"/> for the factory.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.CreateDefaultInstance">
            <summary>
            <para>Create the default instance of the provider object.</para>
            </summary>
            <returns>
            <para>The default provider object instance.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.GetDefaultInstanceName">
            <summary>
            <para>Gets the default provider name.</para>
            </summary>
            <returns>The default provider name.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.InitializeConfigurationProvider(System.String,Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider)">
            <summary>
            <para>Initialize the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider"/> by invoking the <see cref="M:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)"/> method.</para>
            </summary>
            <param name="providerName">
            <para>The name of the provider.</para>
            </param>
            <param name="provider">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider"/> to initialize.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderFactory.CreateObject(System.String,System.Type)">
            <summary>
            <para>Create the named <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider"/> object.</para>
            </summary>
            <param name="providerName">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.IConfigurationProvider"/> to create.</para>
            </param>
            <param name="type"><see cref="T:System.Type"></see> of object to instantiate</param>
            <returns>Instantiated object</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView">
            <summary>
            <para>Represents a view of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="context">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.ConfigurationFile">
            <summary>
            <para>Gets the configuration file containing the configuration meta-data.</para>
            </summary>
            <value>
            <para>The configuration file containing the configuration meta-data.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.GetTransformerProviderData(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to get the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/></para>
            </param>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerData"/> for the section.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.GetConfigurationSettings">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/>.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationSettings"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.GetXmlIncludeTypes(System.String)">
            <summary>
            <para>Gets the types used in the <see cref="T:System.Xml.Serialization.XmlSerializer"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section for the include types.</para>
            </param>
            <returns>
            <para>An array of types to use in the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.CollectTypes(Novalys.VisualGuard.Security.EntLib.Configuration.XmlIncludeTypeDataCollection)">
            <devdoc>
            Full demand needed to protect Type.GetType. LinkDemand insufficient because that only
            checks permissions of calling code, which would be GetXmlIncludeTypes, which has full 
            trust
            </devdoc>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.GetStorageProviderData(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to get the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/></para>
            </param>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> for the section.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.GetConfigurationProtector(System.String)">
            <summary>
            <para>Retrieves the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> for the section.</para>
            </summary>
            <param name="sectionName">
            <para>The name of the section to get the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/></para>
            </param>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationProtector"/> for the section.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView.GetKeyAlgorithmPairStorageProviderData">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData"/> for the configuration.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.KeyAlgorithmPairStorageProviderData"/> for the configuration.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProvider">
            <summary>
            <para>Represents a provider that reads and writes configuration data to storage.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProvider"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProvider.CurrentSectionName">
            <summary>
            <para>Gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProvider.Read">
            <summary>
            <para>When overridden by a derived class, reads the configuration data from storage.</para>
            </summary>
            <returns>
            <para>The configuration data.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProvider.CreateConfigurationChangeWatcher">
            <summary>
            <para>When overridden by a derived class, creates an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> for the storage.</para>
            </summary>
            <returns>
            <para>An <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> for the storage.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderFactory">
            <devdoc>
            The factory that creates IStorageProviderReader / IStorageProviderWriter objects.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider">
            <summary>
            <para>
            Represents a storage provider for configuration data that saves the configuration data to the <see cref="T:System.AppDomain"/> configuration file.
            </para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider.Read">
            <summary>
            <para>When overridden by a derived class, reads the configuration data from storage.</para>
            </summary>
            <returns>
            <para>The configuration data.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider.Write(System.Object)">
            <summary>
            <para>Writes the configuration data to storage to the application configuration file.</para>
            </summary>
            <param name="value">
            <para>The value to write to storage.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider.CreateConfigurationChangeWatcher">
            <summary>
            <para>When overridden by a derived class, creates an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> for the storage.</para>
            </summary>
            <returns>
            <para>An <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> for the storage.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes this provider to the correct state and context used by the factory creating it.</para>
            </summary>
            <param name="configurationView">
            <para>The cursor to use to get the data specific for the storage provider.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="configurationView"/> must be of type <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView"/>.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.AppConfigFileStorageProvider.AppendSection(System.Xml.XmlNode)">
            <devdoc>
            Append a new section to the configSections of the configuration file given the sectionName and typeName.  
            </devdoc>        
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher">
            <summary>
            <para>Represents an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.#ctor(System.String,System.String)">
            <summary>
            <para>Initialize a new <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> class with the path to the configuration file and the name of the section</para>
            </summary>
            <param name="configFilePath">
            <para>The full path to the configuration file.</para>
            </param>
            <param name="configurationSectionName">
            <para>The name of the configuration section to watch.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            <para>The information is retrieved using the watched file modification timestamp</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modification, or <c>DateTime.MinValue</c> if the information can't be retrieved</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.BuildThreadName">
            <summary>
            Returns the string that should be assigned to the thread used by the watcher
            </summary>
            <returns>The name for the thread</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.BuildEventData">
            <summary>
            Builds the change event data, including the full path of the watched file
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher">
            <summary>
            <para>Represents an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher"/> that watches a file.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.#ctor">
            <summary>
            <para>Initialize a new <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher"/> class</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.Finalize">
            <summary>
            <para>Allows an <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.SectionName">
            <summary>
            <para>Gets the name of the configuration section being watched.</para>
            </summary>
            <value>
            <para>The name of the configuration section being watched.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.StartWatching">
            <summary>
            <para>Starts watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.StopWatching">
            <summary>
            <para>Stops watching the configuration file.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.Dispose">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.Disposing(System.Boolean)">
            <summary>
            <para>Releases the unmanaged resources used by the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> and optionally releases the managed resources.</para>
            </summary>
            <param name="isDisposing">
            <para><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.OnConfigurationChanged">
            <summary>
            <para>Raises the <see cref="E:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.ConfigurationChanged"/> event.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.GetCurrentLastWriteTime">
            <summary>
            <para>Returns the <see cref="T:System.DateTime"/> of the last change of the information watched</para>
            </summary>
            <returns>The <see cref="T:System.DateTime"/> of the last modification, or <c>DateTime.MinValue</c> if the information can't be retrieved</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.BuildThreadName">
            <summary>
            Returns the string that should be assigned to the thread used by the watcher
            </summary>
            <returns>The name for the thread</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.BuildEventData">
            <summary>
            Builds the change event data, in a suitable way for the specific watcher implementation
            </summary>
            <returns>The change event information</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeWatcher.GetEventSourceName">
            <summary>
            Returns the source name to use when logging events
            </summary>
            <returns>The event source name</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher">
            <summary>
            <para>Provides a way to watch for changes to configuration in storage.</para>
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher.ConfigurationChanged">
            <summary>
            Event raised when the underlying persistence mechanism for configuration notices that
            the persistent representation of configuration information has changed.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher.StartWatching">
            <summary>
            When implemented by a subclass, starts the object watching for configuration changes
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher.StopWatching">
            <summary>
            When implemented by a subclass, stops the object from watching for configuration changes
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.IConfigurationChangeWatcher.SectionName">
            <summary>
            When implemented by a subclass, returns the section name that is being watched.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider">
            <summary>
            <para>
            Represents a storage provider writer for configuration data that saves the configuration data to an external XML file.
            </para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider"/> class.</para>
            </summary>
            <seealso cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.XmlFileName">
            <summary>
            <para>Gets the name of the Xml file used as storage.</para>
            </summary>
            <value>
            <para>The name of the Xml file used as storage.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes this provider to the correct state and context used by the factory creating it.</para>
            </summary>
            <param name="configurationView">
            <para>The cursor to use to get the data specific for the transformer.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="configurationView"/> must be of type <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView"/>.</para>
            <para>- or -</para>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.StorageProviderData"/> from the cursor should be of type <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="configurationView"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.CreateConfigurationChangeWatcher">
            <summary>
            <para>Creates a new <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> for this configuration storage.</para>
            </summary>
            <returns>
            <para>An <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.ConfigurationChangeFileWatcher"/> instance.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.Read">
            <summary>
            <para>Reads the configuration from storage. The data will come back as an <see cref="T:System.Xml.XmlNode"/>.</para>
            </summary>        
            <returns>
            <para>The configuration data for the section.</para>
            </returns>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>The signature check has failed for the section.</para>
            <para>- or -</para>
            <para>The data in the section could not be decrypted.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.Write(System.Object)">
            <summary>
            Writes the configuration data to storage.
            </summary>
            <param name="value">
            <para>The value to write to storage. The type must be <see cref="T:System.Xml.XmlNode"/></para>
            </param>
            <exception cref="T:System.Configuration.ConfigurationException">        
            <para>The data in the section could not be encrypted.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.LoadXmlFile(System.String)">
            <devdoc>
            Load the xml file storage.
            </devdoc>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Storage.XmlFileStorageProvider.SetApplicationDocumentPathSetting(Novalys.VisualGuard.Security.EntLib.Configuration.XmlFileStorageProviderData)">
            <devdoc>
            If no path is specified for the configuration file the default is to use the application configuration file.
            </devdoc>        
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerFactory">
            <devdoc>
            The factory class creates ITransformer objects.
            </devdoc>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerProvider">
            <summary>
            <para>Represents an object that transforms configuration data from storage.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerProvider"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerProvider.CurrentSectionName">
            <summary>
            <para>Gets the name of the configuration section.</para>
            </summary>
            <value>
            <para>The name of the configuration section.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerProvider.Deserialize(System.Object)">
            <summary>
            <para>When overridden by a class, deserializes the configuration section data.</para>
            </summary>
            <param name="section">
            <para>The configuration section data.</para>
            </param>
            <returns>
            <para>The deserialized object.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.TransformerProvider.Serialize(System.Object)">
            <summary>
            <para>When overridden by a class, serializes the configuration data so it can be saved to storage.</para>
            </summary>
            <param name="value">
            <para>The configuration data to serialize.</para>
            </param>
            <returns>
            <para>The serailized object.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer">
            <summary>
            <para>Represents a specific configuration data builder for building Xml serializable objects.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer.#ctor">
            <summary>
            <para>
            Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer"/> class. 
            </para>
            </summary>
            <seealso cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.XmlSerializerTransformerData"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes this provider to the correct state and context used by the factory creating it.</para>
            </summary>
            <param name="configurationView">
            <para>The cursor to use to get the data specific for the transformer.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="configurationView"/> must be of type <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.RuntimeConfigurationView"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="configurationView"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer.GetTypes">
            <summary>
            <para>Gets the types to use when serializing and deserializing objects to Xml.</para>
            </summary>
            <returns><para>The types to use when serializing and deserializing objects to Xml.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer.Deserialize(System.Object)">
            <summary>
            <para>
            Deserializes the configuration data coming from storage.
            </para>
            </summary>
            <param name="section">
            <para>The data that came from storage.</para>
            </param>
            <returns>
            <para>An object that can be consumed by the calling assembly that wants configuration data.</para>
            </returns>		
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="section"/> can not be <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.Configuration.ConfigurationException">
            <para>The type could not be read from the serialized object.</para>
            <para>- or -</para>
            <para>The 'xmlSerializationSection' could not be read from the given Xml.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Configuration.Transformer.XmlSerializerTransformer.Serialize(System.Object)">
            <summary>
            <para>
            Serializes the configuration data coming from the calling assembly and maps it into something that the storage provider can understand.
            </para>
            </summary>
            <param name="value">
            <para>The data to serialize.</para>
            </param>
            <returns>
            <para>The object that can be consumed by the storage provider.</para>
            </returns>
            <exception cref="T:System.Xml.XmlException">
            <para>There is a load or parse error in the XML. In this case, the document remains empty.</para>
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings">
            <summary>
            <para>Configuration settings for cryptography.</para>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings.SectionName">
            <summary>
            Configuration section name for cryptography settings.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings.ConfigurationNamespace">
            <summary>
            <para>Gets the Xml namespace for this root node.</para>
            </summary>
            <value>
            <para>The Xml namespace for this root node.</para>
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/> class.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings.HashProviders">
            <summary>
            <para>Gets and sets the hash providers.</para>
            </summary>
            <value>
            <para>The hash providers.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings.SymmetricCryptoProviders">
            <summary>
            <para>Gets the symmetric cryptography providers.</para>
            </summary>
            <value>
            <para>The symmetric cryptography providers.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData">
            <summary>
            Configuration settings for a generic hash provider.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData"/> class with the specified name and type name.</para>
            </summary>
            <param name="name"><para>The name of the provider.</para></param>
            <param name="typeName"><para>The type name of a class that implements <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/></para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData.Extensions">
            <summary>
            <para>Gets the <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData.Extensions"/> defined as a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </summary>
            <value>
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomHashProviderData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData">
            <summary>
            <para>Configuration settings for a custom symmetric provider.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData"/> class with the specified name and type name.</para>
            </summary>
            <param name="name"><para>The name of the provider.</para></param>
            <param name="typeName"><para>The type name of a class that implements <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider"/>.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData.Extensions">
            <summary>
            <para>Gets the <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData.Extensions"/> defined as a 
            <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </summary>
            <value>
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.NameValueItemCollection"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CustomSymmetricCryptoProviderData.TypeName">
            <summary>
            <para>Gets or sets the <see cref="T:System.Type"/> name of the provider.</para>
            </summary>
            <value>
            <para>The type name of the provider. The default is an empty string.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData">
            <summary>
            <para>Configuration settings for a DPAPI Symmetric Cryptography Provider.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData"/> class with a name.</para>
            </summary>
            <param name="name">The name for the provider.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData.#ctor(System.String,Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData"/> class with a name.</para>
            </summary>
            <param name="name">The name for the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData"/>.</param>
            <param name="data">The <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.DpapiSettingsData"/> for the provider.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData.DataProtectionMode">
            <summary>
            <para>Gets or sets the DPAPI settings.</para>
            </summary>
            <value>
            <para>The DPAPI settings.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.DpapiSymmetricCryptoProviderData.TypeName">
            <summary>
            Gets the assembly qualified name for this provider.
            </summary>
            <value>
            <para>Always return the <see cref="P:System.Type.AssemblyQualifiedName"/> of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider"/>.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData">
            <summary>
            Configuration settings for the <c>HashAlgorithm</c> hash provider.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData.#ctor">
            <summary>
            Initializes with default configuration.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData.#ctor(System.String)">
            <summary>
            Initialized a new HashAlgorithmProviderData with the given name
            </summary>
            <param name="name">The name for this object</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialized a new HashAlgorithmProviderData with the given name
            </summary>
            <param name="name">The name for this object</param>
            <param name="algorithmType">The hash algorithm to use</param>
            <param name="saltEnabled">Should a salt be used?</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData.AlgorithmType">
            <summary>
            Gets or sets the type of <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData.SaltEnabled">
            <summary>
            Gets or sets the salt enabled flag.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashAlgorithmProviderData.TypeName">
            <summary>
            Gets the assembly qualified name of this provider.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData">
            <summary>
            <para>Represents the common configuration data for all hash providers.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> class with a name.</para>
            </summary>
            <param name="name"><para>The name of the provider.</para></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderDataCollection">
            <summary>
            <para>A collection of hash providers.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets a hash provider at a given index.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> to get or set.</para>
            </param>
            <value>
            <para name="index">The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> at the given index.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderDataCollection.Add(Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> into the collection.</para>
            </summary>
            <param name="providerData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData">
            <summary>
            <para>Configuration settings for the <c>KeyedHashAlgorithm</c> hash provider.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData"/> class with a name.</para>
            </summary>
            <param name="name"><para>The name for the provider.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData"/> class with a name, algorithm type, and if salt should be added.</para>
            </summary>
            <param name="name"><para>The name for the provider.</para></param>
            <param name="algorithmType"><para>The type name of the hash algorithm.</para></param>
            <param name="saltEnabled"><para>Determines if salt should be used during encryption.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData.#ctor(System.String,System.String,System.Boolean,System.Byte[])">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData"/> class with a name, algorithm type, if salt should be added, and the key.</para>
            </summary>
            <param name="name"><para>The name for the provider.</para></param>
            <param name="algorithmType"><para>The type name of the hash algorithm.</para></param>
            <param name="saltEnabled"><para>Determines if salt should be used during encryption.</para></param>
            <param name="key"><para>The key to use for the hash provider.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData.Key">
            <summary>
            <para>Gets or sets the key for the hash algorithm.</para>
            </summary>
            <value>
            <para>The key for the hash algorithm.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.KeyedHashAlgorithmProviderData.TypeName">
            <summary>
            <para>Gets the assembly qualified name for a <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.KeyedHashAlgorithmProvider"/>.</para>
            </summary>
            <value>
            <para>Always returns the <see cref="P:System.Type.AssemblyQualifiedName"/> of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.KeyedHashAlgorithmProvider"/>.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData">
            <summary>
            <para>Configuration data for the <c>SymmetricAlgorithm</c> provider.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData"/> class with a name.</para>
            </summary>
            <param name="name"><para>The name to use for the provider.</para></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData"/> class with a name.</para>
            </summary>
            <param name="name"><para>The name to use for the provider.</para></param>
            <param name="algorithmType"><para>The hash algorithm to use.</para></param>
            <param name="key"><para>The key to use with the given encryption provider.</para></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData.AlgorithmType">
            <summary>
            <para>Gets or sets the type of <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
            <value>
            <para>The type of <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData.TypeName">
            <summary>
            <para>Gets the assembly qualified name of this provider.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Type.AssemblyQualifiedName"/> for the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricAlgorithmProvider"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricAlgorithmProviderData.Key">
            <summary>
            <para>Gets or sets the key for this provider.</para>
            </summary>
            <value>
            <para>The key for this provider.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData">
            <summary>
            <para>Represents the common configuration data for all symmetric crypto providers.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> class with a name.</para>
            </summary>
            <param name="name"><para>The name of the provider.</para></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderDataCollection">
            <summary>
            <para>Represents a collection of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> objects.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets a <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> object based on its index.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> to get or set.</para>
            </param>
            <value>
            <para name="index">A <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> object based on its index.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderDataCollection.Add(Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> into the collection.</para>
            </summary>
            <param name="providerData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer">
            <summary>
            Facade which exposes common cryptography uses.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.CreateHash(System.String,System.Byte[])">
            <summary>
            Computes the hash value of plain text.
            </summary>
            <param name="hashInstance">A hash instance from configuration.</param>
            <param name="plaintext">The input for which to compute the hash.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.CreateHash(System.String,System.String)">
            <summary>
            Computes the hash value of plain text.
            </summary>
            <param name="hashInstance">A hash instance from configuration.</param>
            <param name="plaintext">The input for which to compute the hash represented as a base64 encoded string.</param>
            <returns>The computed hash code as a base64 encoded string.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.CompareHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Compares plain text input with a computed hash.
            </summary>
            <remarks>
            Use this method to compare hash values. Since hashes may contain a random "salt" value, two separately generated
            hashes of the same plain text may result in different values. 
            </remarks>
            <param name="hashInstance">A hash instance from configuration.</param>
            <param name="plaintext">The input for which you want to compare the hash to.</param>
            <param name="hashedText">The hash value for which you want to compare the input to.</param>
            <returns><c>true</c> if plainText hashed is equal to the hashedText. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.CompareHash(System.String,System.String,System.String)">
            <summary>
            Compares plain text input with a computed hash.
            </summary>
            <remarks>
            Use this method to compare hash values. Since hashes contain a random "salt" value, two separately generated
            hashes of the same plain text will result in different values. 
            </remarks>
            <param name="hashInstance">A hash instance from configuration.</param>
            <param name="plaintext">The input as a string for which you want to compare the hash to.</param>
            <param name="hashedText">The hash as a string for which you want to compare the input to.</param>
            <returns><c>true</c> if plainText hashed is equal to the hashedText. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.EncryptSymmetric(System.String,System.Byte[])">
            <summary>
            Encrypts a secret using a specified symmetric cryptography provider.
            </summary>
            <param name="symmetricInstance">A symmetric instance from configuration.</param>
            <param name="plaintext">The input for which you want to encrypt.</param>
            <returns>The resulting cipher text.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.EncryptSymmetric(System.String,System.String)">
            <summary>
            Encrypts a secret using a specified symmetric cryptography provider.
            </summary>
            <param name="symmetricInstance">A symmetric instance from configuration.</param>
            <param name="plaintext">The input as a base64 encoded string for which you want to encrypt.</param>
            <returns>The resulting cipher text as a base64 encoded string.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.DecryptSymmetric(System.String,System.Byte[])">
            <summary>
            Decrypts a cipher text using a specified symmetric cryptography provider.
            </summary>
            <param name="symmetricInstance">A symmetric instance from configuration.</param>
            <param name="ciphertext">The cipher text for which you want to decrypt.</param>
            <returns>The resulting plain text.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Cryptographer.DecryptSymmetric(System.String,System.String)">
            <summary>
            Decrypts a cipher text using a specified symmetric cryptography provider.
            </summary>
            <param name="symmetricInstance">A symmetric instance from configuration.</param>
            <param name="ciphertextBase64">The cipher text as a base64 encoded string for which you want to decrypt.</param>
            <returns>The resulting plain text as a string.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView">
            <summary>
            <para>Represents a view to navigate the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/> configuration data.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="configurationContext">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView.GetHashProviderData(System.String)">
            <summary>
            <para>Gets the named <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> from the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/>.</para>
            </summary>
            <param name="hashProviderName">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/>.</para>
            </param>
            <returns>
            <para>The named <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.HashProviderData"/> from the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView.GetCryptographySettings">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/>.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/>.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView.GetSymmetricCryptoProviderData(System.String)">
            <summary>
            <para>Gets the named <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> from the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/>.</para>
            </summary>
            <param name="symmetricProviderName">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/>.</para>
            </param>
            <returns>
            <para>The named <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.SymmetricCryptoProviderData"/> from the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.Configuration.CryptographySettings"/>.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider">
            <summary>
            <para>A symmetric provider for the Data Protection API (DPAPI).</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider"/></para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts a secret using DPAPI.</para>
            </summary>
            <param name="plaintext"><para>The input for which you want to encrypt.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
            <seealso cref="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Encrypt(System.Byte[])"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.DpapiSymmetricCryptoProvider.Decrypt(System.Byte[])">
            <summary>
            <para>Decrypts cipher text using DPAPI.</para>
            </summary>
            <param name="cipherText"><para>The cipher text for which you want to decrypt.</para></param>
            <returns><para>The resulting plain text.</para></returns>
            <seealso cref="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Decrypt(System.Byte[])"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider">
            <summary>
            A hash provider for any hash algorithm which derives from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.SaltLength">
            <summary>
            Returns the salt length used by the provider.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.cryptoConfigurationView">
            <summary>
            Contains the configuration settings for this instance.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.CryptoConfigurationView">
            <summary>
            Gets and sets the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"></see> in a derived class
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.CreateHash(System.Byte[])">
            <summary>
            Computes the hash value of plain text.
            </summary>
            <param name="plaintext">The input for which to compute the hash.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.CompareHash(System.Byte[],System.Byte[])">
            <summary>
            Compares plain text input with a computed hash.
            </summary>
            <param name="plaintext">The input for which you want to compare the hash to.</param>
            <param name="hashedtext">The hash value for which you want to compare the input to.</param>
            <returns><c>true</c> if plainText hashed is equal to the hashedText. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.CreateHashWithSalt(System.Byte[],System.Byte[])">
            <summary>
            Creates a hash with a specified salt.
            </summary>
            <param name="plaintext">The plaintext to hash.</param>
            <param name="salt">The hash salt.</param>
            <returns>The computed hash.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.ExtractSalt(System.Byte[])">
            <summary>
            Extracts the salt from the hashedText.
            </summary>
            <param name="hashedtext">The hash in which to extract the salt.</param>
            <returns>The extracted salt.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.GetHashCryptographer">
            <summary>
            Gets the cryptographer used for hashing.
            </summary>
            <returns>
            A <see cref="T:Novalys.VisualGuard.Security.EntLib.Common.Cryptography.HashCryptographer"/> object.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashAlgorithmProvider.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:HashAlgorithmProvider"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:HashAlgorithmProvider"></see>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory">
            <summary>
            Represents a factory for creating instances of a class which implements <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            Initializes the factory with a specified configuration context.
            </summary>
            <param name="context">The configuration context.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory.CreateHashProvider(System.String)">
            <summary>
            Returns a configured <c>IHashProvider</c> instance.
            </summary>
            <param name="hashProviderName">Name of hash provider from configuration</param>
            <returns>The configured <c>IHashProvider</c> object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory.CreateConfigurationView">
            <summary>
            <para>Creates the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> for the factory.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> for the factory.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.HashProviderFactory.GetConfigurationType(System.String)">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/> to create based on the name.</para>
            </summary>
            <param name="hashProviderName">
            <para>The name of the configuration object to create.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider"/> to create.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider">
            <summary>
            A contract for any provider for configurable hash implementations.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider.CreateHash(System.Byte[])">
            <summary>
            Computes the hash value of plain text.
            </summary>
            <param name="plaintext">The input for which to compute the hash.</param>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider.CompareHash(System.Byte[],System.Byte[])">
            <summary>
            Compares plain text input with a computed hash.
            </summary>
            <param name="plaintext">The input for which you want to compare the hash to.</param>
            <param name="hashedtext">The hash value for which you want to compare the input to.</param>
            <returns><c>true</c> if plainText hashed is equal to the hashedText. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.IHashProvider.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:HashAlgorithmProvider"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:HashAlgorithmProvider"></see>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider">
            <summary>
            <para>A contract for any provider for configurable symmetric crpytographic implementations.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts a secret using a specified symmetric cryptography provider.</para>
            </summary>
            <param name="plaintext"><para>The input for which you want to encrypt.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Decrypt(System.Byte[])">
            <summary>
            <para>Decrypts a cipher text using a specified symmetric cryptography provider.</para>
            </summary>
            <param name="cipherText"><para>The cipher text for which you want to decrypt.</para></param>
            <returns><para>The resulting plain text.</para></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.KeyedHashAlgorithmProvider">
            <summary>
            A hash provider for any hash algorithm which derives from <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.KeyedHashAlgorithmProvider.GetHashCryptographer">
            <summary>
            Gets the cryptographer used for hashing.
            </summary>
            <returns>The cryptographer initialized with the configured key.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricAlgorithmProvider">
            <summary>
            <para>A symmetric provider for any symmetric algorithm which derives from <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricAlgorithmProvider.Initialize(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationView)">
            <summary>
            <para>Initializes the provider with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/>.</para>
            </summary>
            <param name="configurationView">
            <para>A <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> object.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricAlgorithmProvider.Encrypt(System.Byte[])">
            <summary>
            <para>Encrypts a secret using the configured <c>SymmetricAlgorithm</c>.</para>
            </summary>
            <param name="plaintext"><para>The input for which you want to encrypt.</para></param>
            <returns><para>The resulting cipher text.</para></returns>
            <seealso cref="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Encrypt(System.Byte[])"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricAlgorithmProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypts a secret using the configured <c>SymmetricAlgorithm</c>.
            <seealso cref="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Decrypt(System.Byte[])"/>
            </summary>
            <param name="ciphertext"><para>The cipher text for which you want to decrypt.</para></param>
            <returns><para>The resulting plain text.</para></returns>
            <seealso cref="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider.Decrypt(System.Byte[])"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory">
            <summary>
            Represents a factory for creating instances of a class which implements <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory.#ctor(Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory"/> class with a <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</para>
            </summary>
            <param name="context">A <see cref="T:Novalys.VisualGuard.Security.EntLib.Configuration.ConfigurationContext"/> object.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory.CreateSymmetricCryptoProvider(System.String)">
            <summary>
            Returns a configured <c>ISymmetricCryptoProvider</c> instance.
            </summary>
            <param name="cryptoProviderName">Name of crypto provider from configuration</param>
            <returns>The configured <c>ISymmetricCryptoProvider</c> object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory.CreateConfigurationView">
            <summary>
            <para>Creates the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> for the factory.</para>
            </summary>
            <returns>
            <para>The <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.CryptographyConfigurationView"/> for the factory.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.SymmetricCryptoProviderFactory.GetConfigurationType(System.String)">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> of the <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider"/> to create based on the name.</para>
            </summary>
            <param name="cryptoProviderName">
            <para>The name of the configuration object to create.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Type"/> of <see cref="T:Novalys.VisualGuard.Security.EntLib.Security.Cryptography.ISymmetricCryptoProvider"/> to create.</para>
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Folder.VGFolderInformation">
            <summary>
            Represents a Folder information.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Folder.VGFolderInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGFolderInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGFolderInformation.IsBuiltIn">
            <summary>
            Indicates if the folder is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGFolderInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGFolderInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGFolderInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGFolderInformation.CopyOf">
            <summary>
             Gets the id the item used to create this version of the item.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Folder.VGIFolderInformation">
            <summary>
            Defines the basic functionality for a Visual Guard permission folder.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGIFolderInformation.Name">
            <summary>
            Gets or sets the name of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGIFolderInformation.Description">
            <summary>
            Gets or sets the description of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Folder.VGIFolderInformation.Parent">
            <summary>
            Returns the unique identifier of the application or the folder containing the current folder.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountTypeClaim">
            <summary>
            Represents a class for IdentityAccountType claim, if this User is WindowUserAccount, WindowGroupAccount or MachineAccount
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountTypeClaim.Type">
            <summary>
            Account Type
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountType">
            <summary>
            Represents an enum for Identity Account Type
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountType.NotSpecified">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountType.UserAccount">
            <summary>
            UserAccount
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountType.GroupAccount">
            <summary>
            Group Account
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityAccountType.MachineAccount">
            <summary>
            Machine Account
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityActivityDateClaim">
            <summary>
            That claim represente the activity allow by StartDate and EndDate
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityActivityDateClaim.#ctor">
            <summary>
            Contructor of VGIdentityActivityDateClaim
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityActivityDateClaim.StartDate">
            <summary>
            That represente the StartDate of the user account
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityActivityDateClaim.EndDate">
            <summary>
            That represente the EndDate of the user account
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet.#ctor">
            <summary>
            The constructor is private, you need to use (Your module).GetDefaultClaimSet() to get VGClaimSet object
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet.IsSupportedIdentityAccountType">
            <summary>
            Gets if IdentityAccount Type claim is supported.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityClaim.TransfertToVGPrincipal">
            <summary>
            The claims will be transfert to VGPrincipal, when the user is authorize to enter in the application
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityLastActivityDateClaim">
            <summary>
            This claim represente the last activity of the user. 
                - When the user authenticate
                - Switch the app A to B
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityPasswordHistoryClaim.AddPassword(System.String,System.Int32)">
            <summary>
            Adds password in the list of history passwords (hashed)
            </summary>
            <param name="password">password</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityPasswordHistoryClaim.AddPassword(System.String)">
            <summary>
            Adds password in the list of history passwords (hashed)
            </summary>
            <param name="password">password</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityPasswordHistoryClaim.ResizePasswordHistorylist(System.Int32)">
            <summary>
            Resize the password history list by numberPasswordHistoryLength
            </summary>
            <param name="numberPasswordHistoryLength">Password policy - Password history length</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityPasswordHistoryClaim.ContainsPassword(System.String,System.Int32)">
            <summary>
            Checks if password is contained in history passwords
            </summary>
            <param name="password">password</param>
            <param name="numberPasswordHistoryLength">Password policy - Password history length</param>
            <returns>True if password is contained in history passwords else false</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGIdentityPasswordHistoryClaim.HashString(System.String)">
            <summary>
            hashes the password
            </summary>
            <param name="strPassword"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleAccountTypeSystem">
            <summary>
            Represents an interface for AccountTypeSystem
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleApprovalSystem">
            <summary>
            Indicate if the module supports vg's default approval system.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleCustomApprovalSystem">
            <summary>
            Indicate if the module supports custom approval system.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleCreateUser.GetCreateUserShortcutKeys">
            <summary>
            Gets Shortcut keys for creating custom users, Override this method to define your own shortcut keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleCreateUser.GetCreateUserStatusBarMessage">
            <summary>
            Get status bar message to set while creating new user.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleCredentialConvertor">
            <summary>
            For Identity to convert Xml to VGICredential
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleSupportedPasswordHistory">
            <summary>
            Your identity module support the password history
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleSupportedVGPasswordPolicy">
            <summary>
            If the Identity Module has this interface, Visual-guard manages the password policy on your user.
            To implement this interface, we need a user with password.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserAuthenticatorUIWebProvider">
            <summary>
            Provides the UI object to disaply in VG Webform
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserAuthenticatorUIWPFProvider">
            <summary>
            Provides the UI object to disaply in VG WPF
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserAuthenticatorUIWinProvider">
            <summary>
            Provider the UI object to disaply in VG Winform 
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserEmail">
            <summary>
            The Identity store support Email of the user to read and write
            </summary>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserEmail.IsSupportedUniqueEmail(Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity)">
            <summary>
            Gets if Unique Email feature is supproted or not for this user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity.Claims">
            <summary>
            Claims of the user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity.IsLocked">
            <summary>
            If the user is lock / unlock
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity.IsApproved">
            <summary>
            If the user is approuved or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity.IdentityModuleName">
            <summary>
            Module name of the this user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity.Email">
            <summary>
            Gets or sets the email of the user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGIIdentityModuleUserIdentity.CreationDate">
            <summary>
            Gets the date and the time when the credential was  added to the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.Profile.VGModuleProfileSyncContainer.IsVGToADSync">
            <summary>
            This is to handle special case. (synchronization from VG To AD)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.Profile.VGModuleProfileSyncValue.IsVGToADSync">
            <summary>
            This is to handle special case. (synchronization from VG To AD)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.UserImg">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.DatabaseAccount">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.DatabaseAccountAdmin">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.FederatedUser">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.FederatedUserAdmin">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.VGUser">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.VGUserAdmin">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.WindowsAccount">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.UserImg.WindowsAccountAdmin">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGIdentityModule.AuthenticateCore(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential)">
            <summary>
            Get PrincipalInformation object using identityinformation object.
            </summary>
            <param name="runtime">runtime</param>
            <param name="info">identity information object</param>
            <returns>PrincipalInformation object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGIdentityModuleManager.SetModuleProfileValues(Novalys.VisualGuard.Security.Role.VGIPrincipalInformation,Novalys.VisualGuard.Security.IdentityModule.VGIIdentityModule,Novalys.VisualGuard.Security.IdentityModule.Profile.VGModuleProfileSyncValueCollection)">
            <summary>
            Set Module's profile values.
            </summary>
            <param name="user">repositoryUser</param>
            <param name="module">IdentityModule</param>
            <param name="vgModuleProfileSyncValues">vgModuleProfileSyncValues</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGIdentityModuleManager.CheckPasswordPolicy(Novalys.VisualGuard.Security.IdentityModule.VGIIdentityModule,Novalys.VisualGuard.Security.AuthenticationModule.VGAuthentificationModuleResponse,Novalys.VisualGuard.Security.CraftSystem.VGCraftPrincipal)">
            <summary>
            Checks the password policy - and set the appropriate status in response object.
            </summary>
            <param name="module"></param>
            <param name="response"></param>
            <param name="craftPrincipal"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGIdentityModuleManager.GetCustomIdentityUseridFromVGUserId(System.String,System.String)">
            <summary>
            Gets custom identity module's userid from vg-userid.
            </summary>
            <param name="moduleName">moduleName</param>
            <param name="userId">VGUserid</param>
            <returns>custom identity module's userid </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGIdentityModuleManager.GetVGUseridFromCustomUserId(Novalys.VisualGuard.Security.IdentityModule.VGIdentityModule,System.String)">
            <summary>
            Gets VG User id from identity module's userid
            </summary>
            <param name="moduleName">moduleName</param>
            <param name="userId">custom identity module's userid</param>
            <returns>VGUserId </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGIdentityModuleTool.GetCustomIdentityUserIdFromVGUserId(System.String,System.String)">
            <summary>
            Gets custom identity module's userid from vg-userid.
            </summary>
            <param name="moduleName">moduleName</param>
            <param name="userId">VGUserid</param>
            <returns>custom identity module's userid </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.VGUserIdentity.VGIdentityUsernameModule.Connection">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.VGUserIdentity.VGUserIdentityAttributes.VGUserModuleProfileAttributesHelper.LstModuleProfileAttributes">
            <summary>
            Gets module's profile attributes.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation">
            <summary>
            Represents a class containing configuration information of window identity module.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation.AllowPasswordStorage">
            <summary>
            Gets or sets if password storage allowed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation.ActionWhileCreation">
            <summary>
            Gets or sets operation to perform while creation.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation.ActionWhileDeletion">
            <summary>
            Gets or sets operation to perform while deletion.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation.ActionWhileLockUnlock">
            <summary>
            Gets or sets operation to perform while locking/unlocking the user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation.ActionWhileChangePassword">
            <summary>
            Gets or sets operation to perform while changing password.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.VGWindowsConfigurationInformation.AttributeSynchro">
            <summary>
            Gets or sets profile attributes synchronization between VisualGuard and ActiveDirectory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADFunctions.CurrentDomain">
            <summary>
            Returns currentdomain or Machine name
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADFunctions.IsDomainAvailable(System.DirectoryServices.ActiveDirectory.Domain)">
            <summary>
            This function will check if Domain is available or not for logged in user, by simply querying one or two objects
            </summary>
            <param name="objDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADFunctions.GetWindowIdentityDetail(Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.VGDirectoryEntry)">
            <summary>
            Get WindowIdentityADInformation object from DirectoryEntry
            </summary>
            <param name="dirEntry">dirEntry</param>
            <returns>WindowIdentityADInformation object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADFunctions.SetWindowIdentityDetail(System.DirectoryServices.DirectoryEntry,Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADInformation)">
            <summary>
            Get WindowIdentityADInformation object from DirectoryEntry
            </summary>
            <param name="dirEntry">dirEntry</param>
            <param name="userInfo">user information</param>
            <returns>WindowIdentityADInformation object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADFunctions.GetPropertyValue(System.DirectoryServices.DirectoryEntry,System.String)">
            <summary>
            Gets Property value from directoryentry for passed property
            </summary>
            <param name="dirEntry">DirectoryEntry</param>
            <param name="strPropertyName">Property Name</param>
            <returns>value of property</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADFunctions.SetPropertyValue(System.DirectoryServices.DirectoryEntry,System.String,System.Object)">
            <summary>
            Set Property value from directoryentry for passed property
            </summary>
            <param name="dirEntry">DirectoryEntry</param>
            <param name="strPropertyName">Property Name</param>
            <returns>value of property</returns>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.LOGINNAME">
            <summary>
            sAMAccountName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.DISPLAYNAME">
            <summary>
            displayName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.USERNAME">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.FIRSTNAME">
            <summary>
            givenName
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.EMAILADDRESS">
            <summary>
            mail
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.INFOLDER">
            <summary>
            memberOf
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.CONTAINERNAME">
            <summary>
            cn
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.DESCRIPTION">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.OBJECTSID">
            <summary>
            objectSid
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.NAME">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.CITY">
            <summary>
            CITY
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.COMPANY">
            <summary>
            COMPANY
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.COUNTRY">
            <summary>
            COUNTRY
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.COUNTRY_Alpha2">
            <summary>
            COUNTRY_Alpha2
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.COUNTRY_NumericCode">
            <summary>
            COUNTRY_NumericCode
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.DEPARTMENT">
            <summary>
            DEPARTMENT
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.FAX">
            <summary>
            FAX
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.MOBILE">
            <summary>
            MOBILE
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.LASTNAME">
            <summary>
            LASTNAME
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.MANAGER">
            <summary>
            MANAGER
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.MIDDLENAME">
            <summary>
            MIDDLENAME
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.HOME_PHONE">
            <summary>
            HOME_PHONE
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.TITLE">
            <summary>
            TITLE
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.ZIP_POSTALCODE">
            <summary>
            ZIP_POSTALCODE
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityADProperties.FOLDERDATA">
            <summary>
            FOLDERDATA
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityModuleProfileAttributesHelper.LstWindowIdentityModuleProfileAttributes">
            <summary>
            Gets module's profile attributes.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityModule.VGModule.WindowsIdentity.WindowIdentityAttributes.WindowIdentityModuleProfileAttributesHelper.#cctor">
            <summary>
            static Constructor - creates list of module's profile attribtues
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerClientInformation">
            <summary>
            Represents a class to contain all information about clients of identityServer.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants">
            <summary>
            Represents VGIdentityServer constants.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes">
            <summary>
            This class represents VGIdentity server's supported VGScopes 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGToken">
            <summary>OPTIONAL. This scope value requests access to the <c>VGToken</c> Claim.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGProfile">
            <summary>OPTIONAL. This scope value requests access to the <c>vgProfile</c> Claim. (Firstname, Lastname, email etc.)</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGRoles">
            <summary>OPTIONAL. This scope value requests access to the <c>vgRoles</c> Claim.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGPermissions">
            <summary>OPTIONAL. This scope value requests access to the <c>VGPermissions</c> Claim.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGApplications">
            <summary>OPTIONAL. This scope value requests access to the <c>VGApplications</c> Claim.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGIsLocked">
            <summary>OPTIONAL. This scope value requests access to the <c>VGIsLocked</c> Claim.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGIsApproved">
            <summary>OPTIONAL. This scope value requests access to the <c>VGIsApproved</c> Claim.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGScopes.VGActivityDate">
            <summary>
            OPTIONAL. This scope value requests access to the <c>VGIsApproved</c> Claim.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims">
            <summary>
            This class represents VGIdentity server's supported claims.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGTokenClaim">
            <summary>
            VG Token claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGPermissionsClaim">
            <summary>
            VG Permissions claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGRolesClaim">
            <summary>
            VG Roles claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGApplicationsClaim">
            <summary>
            VG Applications claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGIsApprovedClaim">
            <summary>
            VG IsApproved claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGIsLockedClaim">
            <summary>
            VG IsLocked claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGFirstnameClaim">
            <summary>
            VG Firstname claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGLastnameClaim">
            <summary>
            VG Lastname claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGEmailClaim">
            <summary>
            VG Emailaddress claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGStartDateClaim">
            <summary>
            VG StartDate claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGEndDateClaim">
            <summary>
            VG EndDate claim
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerConstants.VGClaims.VGIdentityProviderNameClaim">
            <summary>
            Identity ProviderName claim (ex. VisualGuard, Google, Facebook etc.)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerHelper">
            <summary>
            This class provides helper methods for VGIdentityServer
            todo: make this class internal
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerHelper.GetMappedClaimsForVGScope(System.String)">
            <summary>
            This method gets mapped claims for specific VGScope
            </summary>
            <param name="scope">VGScope constant</param>
            <returns>Mapped claims for passed VGScope</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.IdentityServer.VGIdentityServerInformation">
            <summary>
            Represents a class to contain all information about identity server.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Img">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Img.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Img.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Img.WebConsoleNewLogo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Img.webConsoleLogo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Img.webPortalLogo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.License.VGLicenseRequestInfo.ReturnedData">
            <summary>
            Gets or sets the data returned by the web service (SerialNumber,Refusal Reason,...)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGAttributeEventLogVariable">
            <summary>
            Represents a class to contain profile attributes with values as eventLogVariable
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGIEventLogVariable">
            <summary>
            Represents an interface for VGEventLogVariable ex. for VGEventLogVariableForAttributes
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogCategory">
            <summary>
            The categories of log entry managed by Visual Guard.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogCategory.Application">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogCategory.AccountLogon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogCategory.AccountManagement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogCategory.RepositoryManagement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogCategory.WorkFlowManagement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogCategory.All">
            <summary>
            All Categories
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogEntry">
            <summary>
            Represents a log message.  Contains the common properties that are required for all log messages.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.UserId">
            <summary>
            The Visual Guard Id of the current user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.UserName">
            <summary>
            The Visual Guard Name of the current user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.ApplicationId">
            <summary>
            The Visual Guard Id of the application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.MachineName">
            <summary>
            Name of the machine
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.TimeStamp">
            <summary>
            Date and time of the log entry message.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.EventId">
            <summary>
            Event identifier.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Severity">
            <summary>
            Log entry severity as a <see cref="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Severity"/> enumeration. (Unspecified, Information, Warning or Error).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Title">
            <summary>
            Additional description of the log entry message.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Message">
            <summary>
            Message body to log.
            </summary>
            <remarks>You can use predefined values in your message. The list of predefined values is:
            <list type="bullet">
            <item><term>[eventid]</term><description>The unique identifier of log entry.</description></item>
            <item><term>[applicationid]</term><description>The unique identifier of the application for which the log entry was generated.</description></item>
            <item><term>[userid]</term><description>The repository id of the current user.</description></item>
            <item><term>[username]</term><description>The name of the current user.</description></item>
            <item><term>[timestamp]</term><description>Date and time of the log entry message.</description></item>
            <item><term>[machine]</term><description>The Name of the computer.</description></item>
            <item><term>[severity]</term><description>Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration</description></item>
            <item><term>[tab]</term><description>Insert a tab character in the body of a message.</description></item>
            <item><term>[newline]</term><description>Insert a newline character in the body of a message.</description></item>
            <item><term>[p:XXX]</term><description>represents the property with the name 'XXX' stored in the specified dictionary.</description></item>
            </list>
            </remarks>
            <example>
            <code lang="C#">
            StringDictionary dictionary = new StringDictionary();
            dictionary.Add("myparam", "text of my param");
            VGLogEntry entry = new VGLogEntry("User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary);
            VGLogger.Write(entry);
            </code>
            <code lang="vb.net">
            Dim dictionary as StringDictionary = new StringDictionary()
            dictionary.Add("myparam", "text of my param")
            Dim entry as VGLogEntry
            entry = new VGLogEntry("User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary)
            VGLogger.Write(entry)
            </code>
            </example>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Properties">
            <summary>
            Dictionary of key/value pairs that can be used as named properties in the message. this value can be null or empty.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.UnnamedProperties">
            <summary>
            An array of values that can be used as unnamed properties in the message. this value can be null or empty
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/>
            </summary>
            <param name="eventId">the event identifier (&gt;= 0 and &lt; 10000)</param>
            <param name="title">the title of the message</param>
            <param name="message">the message body to log</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventId"/> is less than zero or greater than 9999.</exception>
            <remarks>You can use predefined values in your message. The list of predefined values is:
            <list type="bullet">
            <item><term>[eventid]</term><description>The unique identifier of log entry.</description></item>
            <item><term>[applicationid]</term><description>The unique identifier of the application for which the log entry was generated.</description></item>
            <item><term>[userid]</term><description>The repository id of the current user.</description></item>
            <item><term>[timestamp]</term><description>Date and time of the log entry message.</description></item>
            <item><term>[machine]</term><description>The Name of the computer.</description></item>
            <item><term>[severity]</term><description>Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration</description></item>
            <item><term>[tab]</term><description>Insert a tab character in the body of a message.</description></item>
            <item><term>[newline]</term><description>Insert a newline character in the body of a message.</description></item>
            <item><term>[p:XXX]</term><description>represents the property with the name 'XXX' stored in the specified dictionary.</description></item>
            </list>
            </remarks>
            <example>
            <code lang="C#">
            StringDictionary dictionary = new StringDictionary();
            dictionary.Add("myparam", "text of my param");
            VGLogEntry entry = new VGLogEntry(1, "User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary);
            VGLogger.Write(entry);
            </code>
            <code lang="vb.net">
            Dim dictionary as StringDictionary = new StringDictionary()
            dictionary.Add("myparam", "text of my param")
            Dim entry as VGLogEntry
            entry = new VGLogEntry(1, "User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary)
            VGLogger.Write(entry)
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.#ctor(System.Int32,System.String,System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/>
            </summary>
            <param name="eventId">the event identifier (&gt;= 0 and &lt; 10000)</param>
            <param name="title">the title of the message</param>
            <param name="message">the message body to log</param>
            <param name="severity">Log entry severity as a <see cref="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Severity"/> enumeration.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventId"/> is less than zero or greater than 9999.</exception>
            <remarks>You can use predefined values in your message. The list of predefined values is:
            <list type="bullet">
            <item><term>[eventid]</term><description>The unique identifier of log entry.</description></item>
            <item><term>[applicationid]</term><description>The unique identifier of the application for which the log entry was generated.</description></item>
            <item><term>[userid]</term><description>The repository id of the current user.</description></item>
            <item><term>[username]</term><description>The name of the current user.</description></item>
            <item><term>[timestamp]</term><description>Date and time of the log entry message.</description></item>
            <item><term>[machine]</term><description>The Name of the computer.</description></item>
            <item><term>[severity]</term><description>Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration</description></item>
            <item><term>[tab]</term><description>Insert a tab character in the body of a message.</description></item>
            <item><term>[newline]</term><description>Insert a newline character in the body of a message.</description></item>
            <item><term>[p:XXX]</term><description>represents the property with the name 'XXX' stored in the specified dictionary.</description></item>
            </list>
            </remarks>
            <example>
            <code lang="C#">
            StringDictionary dictionary = new StringDictionary();
            dictionary.Add("myparam", "text of my param");
            VGLogEntry entry = new VGLogEntry(1, "User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary);
            VGLogger.Write(entry);
            </code>
            <code lang="vb.net">
            Dim dictionary as StringDictionary = new StringDictionary()
            dictionary.Add("myparam", "text of my param")
            Dim entry as VGLogEntry
            entry = new VGLogEntry(1, "User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary)
            VGLogger.Write(entry)
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.#ctor(System.Int32,System.String,System.String,System.Diagnostics.TraceEventType,System.Collections.Specialized.StringDictionary)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/>
            </summary>
            <param name="eventId">the event identifier (&gt;= 0 and &lt; 10000)</param>
            <param name="title">the title of the message</param>
            <param name="message">the message body to log</param>
            <param name="severity">Log entry severity as a <see cref="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Severity"/> enumeration.</param>
            <param name="properties">Dictionary of key/value pairs that can be used as extended properties in the message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventId"/> is less than zero or greater than 9999.</exception>
            <remarks>You can use predefined values in your message. The list of predefined values is:
            <list type="bullet">
            <item><term>[eventid]</term><description>The unique identifier of log entry.</description></item>
            <item><term>[applicationid]</term><description>The unique identifier of the application for which the log entry was generated.</description></item>
            <item><term>[userid]</term><description>The repository id of the current user.</description></item>
            <item><term>[username]</term><description>The name of the current user.</description></item>
            <item><term>[timestamp]</term><description>Date and time of the log entry message.</description></item>
            <item><term>[machine]</term><description>The Name of the computer.</description></item>
            <item><term>[severity]</term><description>Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration</description></item>
            <item><term>[tab]</term><description>Insert a tab character in the body of a message.</description></item>
            <item><term>[newline]</term><description>Insert a newline character in the body of a message.</description></item>
            <item><term>[p:XXX]</term><description>represents the property with the name 'XXX' stored in the specified dictionary.</description></item>
            </list>
            </remarks>
            <example>
            <code lang="C#">
            StringDictionary dictionary = new StringDictionary();
            dictionary.Add("myparam", "text of my param");
            VGLogEntry entry = new VGLogEntry("User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary);
            VGLogger.Write(entry);
            </code>
            <code lang="vb.net">
            Dim dictionary as StringDictionary = new StringDictionary()
            dictionary.Add("myparam", "text of my param")
            Dim entry as VGLogEntry
            entry = new VGLogEntry("User Id:[userid]", "Application:[tab][applicationid][newline]My parameter:[tab][p:myparam][newline]Computer:[tab][machine]", TraceEventType.Information, dictionary)
            VGLogger.Write(entry)
            </code>
            </example>
            <seealso cref="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Properties"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.#ctor(System.Int32,System.String,System.String,System.Diagnostics.TraceEventType,System.Object[])">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/>
            </summary>
            <param name="eventId">the event identifier (&gt;= 0 and &lt; 10000)</param>
            <param name="title">the title of the message.</param>
            <param name="message">the message body to log</param>
            <param name="severity">Log entry severity as a <see cref="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.Severity"/> enumeration.</param>
            <param name="unnamedProperties">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventId"/> is less than zero or greater than 9999.</exception>
            <remarks>You can use predefined values or the specified unnamed properties in the body or the title of the message. If you want to use unnamed properties in your message, you just have to specified a format item like in <see cref="M:System.String.Format(System.String,System.Object)"/> method.
            <para>The list of predefined values is:
            <list type="bullet">
            <item><term>[eventid]</term><description>The unique identifier of log entry.</description></item>
            <item><term>[applicationid]</term><description>The unique identifier of the application for which the log entry was generated.</description></item>
            <item><term>[userid]</term><description>The repository id of the current user.</description></item>
            <item><term>[username]</term><description>The name of the current user.</description></item>
            <item><term>[timestamp]</term><description>Date and time of the log entry message.</description></item>
            <item><term>[machine]</term><description>The Name of the computer.</description></item>
            <item><term>[severity]</term><description>Log entry severity as a <see cref="T:System.Diagnostics.TraceEventType"/> enumeration</description></item>
            <item><term>[tab]</term><description>Insert a tab character in the body of a message.</description></item>
            <item><term>[newline]</term><description>Insert a newline character in the body of a message.</description></item>
            </list>
            </para>
            If you want to use unnamed properties in the body or in the title of your message, you can use the same syntax as the <see cref="M:System.String.Format(System.String,System.Object)"/> method. Each format item will be replaced (e.g: {0}) with the equivalent text of the value of a corresponding object specified in the <paramref name="unnamedProperties"/> array.
            </remarks>
            <example>
            <code lang="C#">
            VGLogEntry entry = new VGLogEntry("User Id:[userid]", "Application:[tab][applicationid][newline]My first value:[tab]{0}[newline]My second value:[tab]{1}[newline]Computer:[tab][machine]", TraceEventType.Information, 'MyValue1', true);
            VGLogger.Write(entry);
            </code>
            <code lang="vb.net">
            Dim entry as VGLogEntry = new VGLogEntry("User Id:[userid]", "Application:[tab][applicationid][newline]My first value:[tab]{0}[newline]My second value:[tab]{1}[newline]Computer:[tab][machine]", TraceEventType.Information, 'MyValue1', true)
            VGLogger.Write(entry)
            </code>
            This example writes the following message in the event log:
            <pre>
            Application: {759b324a-a659-4777-8c5a-5464f2b1c50c}
            My First Value: MyValue1
            My Second Value: true
            Computer:   MYMACHINENAME
            </pre>
            </example>
            <seealso cref="P:Novalys.VisualGuard.Security.Logging.VGLogEntry.UnnamedProperties"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.SetValues(System.String,System.DateTime,System.Int32,System.String,System.String,System.Diagnostics.TraceEventType,System.Collections.Specialized.StringDictionary)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> class.
            </summary>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.GetLogEntryForRolePermissionSetAdded(System.String,System.String,System.String,System.String,System.String)">
            Assign permission set to role.
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntry.GetLogEntryForAccountUnlocked(System.String,System.String,System.Collections.Generic.List{Novalys.VisualGuard.Security.Logging.VGLogEntryAttribute})">
            Move group to a new parent group.
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogEntryAttribute">
            <summary>
            Represents a class for containing ProfileAttribute information to store in VGLogEntry.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.#ctor">
            <summary>
            Creates a new, empty membership entry collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.Add(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Adds the specified entry to the collection.
            </summary>
            <param name="entry">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object to add to the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.Clear">
            <summary>
            Removes all membership entry objects from the collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.CopyTo(Novalys.VisualGuard.Security.Logging.VGLogEntry[],System.Int32)">
            <summary>
            Copies the membership entry collection to a one-dimensional array.
            </summary>
            <param name="array">A one-dimensional array of type <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> that is the destination of the elements copied from the <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection"/>. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the membership entry collection.
            </summary>
            <returns>An IEnumerator for the entire <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.Remove(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Removes the entry from the collection.
            </summary>
            <param name="entry">The entry to remove from the collection.</param>
            <exception cref="T:System.ArgumentNullException">the log entry is null.</exception>
            <returns>true when the entry is removed. False otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.SetReadOnly">
            <summary>
            Makes the contents of the membership entry collection read-only.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.Count">
            <summary>
            Gets the number of membership entry objects in the collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the membership entry collection is thread safe.
            </summary>
            <value>Always false because thread-safe membership entry collections are not supported.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.GetSortedList(System.Collections.Generic.IComparer{Novalys.VisualGuard.Security.Logging.VGLogEntry})">
            <summary>
            Returns a sorted collection using the specified <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer"/> object. 
            </summary>
            <param name="comparer">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer"/> object used to compare the members of the collection.</param>
            <returns>A sorted collection using the specified <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer"/> object.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> to retrieve from the collection.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object with the specified index.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer">
            <summary>Compares two <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> for equivalence.</summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.#ctor(Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn,System.Boolean,System.ComponentModel.ListSortDirection)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer"/> class.
            </summary>
            <param name="column">the column used to compare.</param>
            <param name="ignoreCase">indicates whether the case should be ignore or not.</param>
            <param name="sortDirection">Specifies the direction of the sort operation.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns an indication of their relative values.
            </summary>
            <param name="x">the first object to compare.</param>
            <param name="y">the second object to compare.</param>
            <returns>Less than zero when x is less than y. Zero when x equals y. Greater than zero when x is greater than y.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.Compare(Novalys.VisualGuard.Security.Logging.VGLogEntry,Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Compares two log entries and returns an indication of their relative values.
            </summary>
            <param name="x">the first entry to compare.</param>
            <param name="y">the second entry to compare.</param>
            <returns>Less than zero when x is less than y. Zero when x equals y. Greater than zero when x is greater than y.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn">
            <summary>
            The column used to sort a collection
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.ApplicationId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.TimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.EventId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.Title">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGLogEntryComparer.SortColumn.Severity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGLogger">
            <summary>
            Facade for writing a log entry to the log stored in a Visual Guard repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogger.Write(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Writes a new log entry as defined in the specified <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object to the default repository log.
            </summary>
            <param name="log">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object defining the content of the message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="log"/> is null</exception>
            <exception cref="T:System.FormatException">the format specified in the title or in the message of the <paramref name="log"/> cannot be formatted</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Logging.VGLogger.Write(Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Writes a new log entry as defined in the <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object to the log stored in the repository represented by the specified <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object.
            </summary>
            <param name="runtime">a <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object representing the repository in which the log will be stored.</param>
            <param name="log">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object defining the content of the message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runtime"/> or <paramref name="log"/> is null</exception>
            <exception cref="T:System.FormatException">the format specified in the title or in the message of the <paramref name="log"/> cannot be formatted</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Logging.VGLogger.Enabled">
            <summary>
            Gets a value indicating whether the log is enabled for the default repository.
            </summary>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.LogEnabled"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId">
            <summary>
            List of id of Visual Guard predefined log events
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.Undefined">
            <summary>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.InvalidLogonAttempt">
            <summary>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.InvalidChangePasswordAttempt">
            <summary>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.SuccessfullLogonAttempt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PasswordModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AccountLockedOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AccountModified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AccountModifiedByAuthentification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleMemberAdded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleMemberRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AccountCreated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AccountDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AccountUnlocked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.NotEnoughPrivileges">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.MembershipPermissionRevoked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.MembershipPermissionGranted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.MembershipUserGetPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RepositoryCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RepositoryDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RepositorySettingsModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.LicenseModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.MembershipSettingsModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PasswordPolicyModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationSettingsModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionSetCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionSetDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionSetModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionSetGrant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionSetRevoke">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ClearLog">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ClearLogForApplication">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.DeploymentAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RepositoryMigration">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationNameModified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleNameModified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.PermissionGranted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.SubPermissionSetGranted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.SubPermissionSetRevoked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.MinimumRuntimeVersionRequiredModified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.GroupCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.GroupModified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.GroupDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.UserAddedInGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.UserRemovedInGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleAddedInGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleRemovedInGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.UnableToSaveOfflineUser">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.UnableToSaveOfflineApplication">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AdfsServerDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ProfileAttributeCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ProfileAttributeDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ProfileAttributeModification">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ProfileAttributeMappingCreation">
            <summary>
            Profile attribute mapping creation
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ProfileAttributeMappingDeletion">
            <summary>
            Profile attribute mapping deletion
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ModuleCreation">
            <summary>
            Event id for module creation.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ModuleUpgradation">
            <summary>
            event id for module upgradation.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ModuleDeleted">
            <summary>
            event id for module deletion
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ModuleUpdated">
            <summary>
            event id for module updation.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.VGTokenDeleted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RepositoryMaintenance">
            <summary>
            event id for reposiory migration
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleProfileAttributeCreation">
            Role Profile ------------------------------
             <summary>
             Role Profile attribute Creation
             </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleProfileAttributeDeletion">
            <summary>
            Role Profile attribute deletion
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.RoleProfileAttributeModification">
            <summary>
            Role profile attribute update
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.GroupProfileAttributeCreation">
            Group Profile ------------------------------
             <summary>
             Group Profile attribute Creation
             </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.GroupProfileAttributeDeletion">
            <summary>
            Group Profile attribute deletion
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.GroupProfileAttributeModification">
            <summary>
            Group profile attribute update
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AuthorizationUpdateByGroupSelection">
            Authorization Update
            <summary>
             Authorization update when group selection changes.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.AuthorizationUpdateByRoleSelection">
            <summary>
             Authorization update when role selection changes.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationWebPortalUpdation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationAttributeCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationAttributeUpdation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationAttributeDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.ApplicationAttributeProfileValueUpdation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowProcessCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowProcessUpdation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowProcessDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowProcessCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowProcessFailure">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowProcessExport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowVariableCreation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowVariableUpdation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Logging.VGPredefinedMessageId.WorkFlowVariableDeletion">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.Audit.VGIMatrixSupported">
            <summary>
            Represents an interface for Matrix
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.Audit.VGIMatrixSupported.Id">
            <summary>
            Gets a unique Id of the Item
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.Audit.VGIMatrixSupported.Name">
            <summary>
            Gets a name of the Item
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.Audit.VGIMatrixSupported.Type">
            <summary>
            Gets a type of the item
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.Audit.VGMatrixItemContainer">
            <summary>
            Represents a class for containing VGMatrixSupported Item. 
            Example Role, Permission etc. It is used to hold the items like permissions of particular user or roles of particular user.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.Audit.VGMatrixItemType">
            <summary>
            Represents an enum for Matrix Item (Role, Permission,Group etc)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.Audit.VGMatrixItemType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.Audit.VGMatrixItemType.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.Audit.VGMatrixItemType.Permission">
            <summary>
            Permission
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.Audit.VGMatrixItemType.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGAction">
            <summary>
            Represente a Action of Permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAction.InternalAction">
            <summary>
            Return the original of object of Action, Carefull because this object works in other AppDomain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAction.DisplayName">
            <summary>
            return the display name of current action
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAction.ActionType">
            <summary>
            Return the type of action
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAction.Description">
            <summary>
            Return a description of action
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGActionInstance">
            <summary>
            Manage the action in your application
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGActionInstance.GetAllActionFromPermission(Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            Get all action from a permission
            </summary>
            <param name="permission"></param>
            <returns>List of action</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGActionInstance.AddActionToPermission(Novalys.VisualGuard.Security.Membership.VGPermission,Novalys.VisualGuard.Security.Permission.VGIGrantedAction)">
            <summary>
            Add an action to permission 
            </summary>
            <param name="permission"></param>
            <param name="action"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGActionInstance.DeleteAction(Novalys.VisualGuard.Security.Membership.VGPermission,Novalys.VisualGuard.Security.Membership.VGAction)">
            <summary>
            Delete a action contains in permission
            </summary>
            <param name="permission"></param>
            <param name="action"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGActionInstance.UpdateAction(Novalys.VisualGuard.Security.Membership.VGPermission,Novalys.VisualGuard.Security.Membership.VGAction)">
            <summary>
            Make a update of your action
            </summary>
            <param name="permission"></param>
            <param name="action"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGAdfsServer">
            <summary>
            Represente an Adfs Server 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServer.UpdateSigningAndEnryptionCertificate">
            <summary>
            Update ADFS in database
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.Id">
            <summary>
            This property is the ID of element.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.Name">
            <summary>
            Name of ADFS server
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.Description">
            <summary>
            Description of ADFS server
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.Url">
            <summary>
            Url of ADFS server
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.RelyingPartyUrl">
            <summary>
            Url of the Relying Party service
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServer.SetPrivateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Set the private certificate of the server
            </summary>
            <param name="privateCertificate"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.SigningCerticate">
            <summary>
            Return the Signing certificate
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.EncryptionCerticate">
            <summary>
            Return the Encryption Cerficate
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.LastModification">
            <summary>
            Return the last modification of ADFS Server (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdfsServer.LastModificationLT">
            <summary>
            Return the last modification of ADFS Server (Local Time)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance">
            <summary>
            Represente the manager of Adfs
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance.Create(System.String,System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Method to create an ADFS server
            </summary>
            <param name="name">Name of your Adfs Server</param>
            <param name="description">Description of your ADFS server</param>
            <param name="adfsUrl">Url of your Adfs server</param>
            <param name="relayingPartyUrl">Url of your Adfs server</param>
            <param name="privateCertificate">Private certicate of ADFS server , the certificate needs private key</param>
            <param name="certificatePassword">Password of certicate</param>
            <returns>Return VGAdfsServer object </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance.Update(Novalys.VisualGuard.Security.Membership.VGAdfsServer)">
            <summary>
            Update the Adfs server in database
            </summary>
            <param name="adfsServer"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance.Delete(Novalys.VisualGuard.Security.Membership.VGAdfsServer)">
            <summary>
            Delete the Adfs server in database
            </summary>
            <param name="adfsServer"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance.GetAllAdfsServer">
            <summary>
            Return all Adfs server contains in database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance.GetAdfsServer(System.Guid)">
            <summary>
            Get Adfs Server by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdfsServerIntance.GetAdfsServer(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Get Adfs server by user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance">
            <summary>
            Manage the internal security
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.ConsoleManagerId">
            <summary>
            Return the ApplicationId of Visual-Guard Console
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanUpdateRepository">
            <summary>
            This method checks if you have the right to update the repository
            </summary>
            <returns>true if the principal has the permission, false otherwise</returns>
            <remarks>This method use <see cref="!:CheckUpdateRepository"/></remarks>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanCreateGroup">
            <summary>
            Check if you have 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanUpdateGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Check if you have permission for update specific group
            </summary>
            <param name="groupId">Groups</param>
            <remarks>You need CanUpdateGroup permissions and you </remarks>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanImportDeployement">
            <summary>
            This method check if the current principal can import a deployment
            </summary>
            <returns>Return True if you can Import a deployment in this repository</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanApprovePendingUser">
            <summary>
            See more information on CheckApprovePendingUser() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanLockUnlockUsers">
            <summary>
            See more information on <see cref="!:CheckLockUnlockUsers"/> method
            </summary>
            <returns>If return true you have CanLockUnlockUser permission </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanGrantRevokePermissionToRole(Novalys.VisualGuard.Security.Membership.VGPermission,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Checks whether user has rights to grant or revoke a permission to role.
            </summary>
            <param name="permission">vgPermission</param>
            <param name="role">vgRole</param>
            <returns>true if user has rights to grant or revoke a permission to role otherwise false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.CanGrantRevokePermissionToRole(Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Checks whether user has rights to grant or revoke a permission to role.
            </summary>
            <param name="role">vgRole</param>
            <returns>true if user has rights to grant or revoke a permission to role otherwise false.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.Key">
            <summary>
            Return information on the current key license
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance">
            <summary>
            Take information in the key
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowPrivateVGServer">
            <summary>
            Return True if your key allow VGServer component
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowWebConsole">
            <summary>
            return True if your key allow web console 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowWebPortal">
            <summary>
            return True if your key allow web portal 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowPowerBuilder">
            <summary>
            return True if your key allow PowerBuilder application 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowDeploy">
            <summary>
            return True if your key allow deployment 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowVGUser">
            <summary>
            return True if your key allow vg user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowCustomAuthentication">
            <summary>
            return True if your key allow Custom Authentication
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowWindowsUser">
            <summary>
            return True if your key allow windows user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowWindowsGroup">
            <summary>
            return True if your key allow windows groups
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowFederatedSystem">
            <summary>
            return True if your key allow windows groups
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.MaxUsers">
            <summary>
            return number of user for your current license key
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowDevelopmentEnvironment">
            <summary>
            Returns true if you are in Development Environnement
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance.VGKeyAdministrationInstance.AllowMonitoringFeature">
            <summary>
            Returns true if your license allows monitoring feature else returns false.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGApplication">
             <summary>
             Exposes information about application set stored in a Visual Guard repository.
             </summary>
             <remarks>
             The <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object is used to represent a single application in a Visual Guard repository. It exposes information about the application such as the id, the name and the description.
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object is returned by <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplicationCollection"/> .</p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.Application">
            <summary>
            Gets a short description of the application. 
            </summary>
            <returns>A short description of the application.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplication.ToString">
            <summary>
            Returns the name for the application.
            </summary>
            <returns>The name for the application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.Comment">
            <summary>
            Gets a short description of the application. 
            </summary>
            <returns>A short description of the application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.FrameworkType">
            <summary>
            Represents a Framework type of the application.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.Name">
            <summary>
            Gets the name of the application. 
            </summary>
            <returns>the name of the application. </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId">
            <summary>
            Gets the unique identifier of the information used to store in a repository
            </summary>
            <value>the unique identifier of the information used to store in a repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.ApplicationId">
            <summary>
            Gets the unique identifier of the application of the application
            </summary>
            <value>The unique identifier of the application of the application</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.ApplicationType">
            <summary>
            Type of application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.WebPortalId">
            <summary>
            Get Id of WebPortal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.Version">
            <summary>
            Gets the version of the application. 
            </summary>
            <returns>The version of the application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.AnonymousRole">
            <summary>
            Gets the Anonymous Role of the application. 
            </summary>
            <returns>The Anonymous Role of the application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.AnonymousSystemRole">
            <summary>
            Gets the Anonymous Role of the Visual Guard. 
            </summary>
            <returns>The Anonymous Role of the Visual Guard.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.DefaultRole">
            <summary>
            Gets the Anonymous Role of the application. 
            </summary>
            <returns>The Anonymous Role of the application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.MemberShipAccessLevel">
            <summary>
            Gets the Membership Access Level of the application. 
            </summary>
            <returns>The Membership Access Level of the application.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplication.UpdateApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <param name="application">the repository name to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplication.GetAllPermissionSet(System.Guid)">
            <param name="application">the repository name to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.Id">
            <summary>
            Id of the application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.LastModification">
            <summary>
            Last time (Server Time) this entity been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.LastModificationUniversal">
            <summary>
            Last time (Server Time) this entity been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.LastModificationLT">
            <summary>
            Gets the modification date of the application. (Local Time)
            </summary>
            <returns>The modification date of the application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.GroupSelectionMode">
            <summary>
            Gets or Sets Group Selection Mode for Login.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.RoleSelectionMode">
            <summary>
            Gets or Sets Role Selection Mode for Login.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.GroupSelectionDisplayMode">
            <summary>
            Gets or sets group selection display mode.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplication.Item(System.String)">
            <summary>
            Gets or sets the attribute value for given propertyName 
            For updating profile value, You need to call 'Update Application' method to reflect the changes.<seealso cref="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.UpdateApplication(Novalys.VisualGuard.Security.Membership.VGApplication)"/>
            </summary>
            <param name="propertyName">propetyName of the attribute</param>
            <returns>Value for requested attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplication.GetValue(System.String)">
            <summary>
            Gets application attribute value for given propertyName
            </summary>
            <param name="propertyName">propetyName of the attribute</param>
            <returns>Value for the requested attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplication.SetValue(System.String,System.String)">
            <summary>
            Sets application attribute value for given propertyName.
            You need to call 'Update Application' method to reflect the changes for profile values.<seealso cref="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.UpdateApplication(Novalys.VisualGuard.Security.Membership.VGApplication)"/>
            </summary>
            <param name="propertyName">propetyName of the attribute</param>
            <param name="propertyValue">Value to be set</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGApplicationCollection">
             <summary>
             Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplicationCollection"/> objects.
             </summary>
             <remarks>
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplicationCollection"/> object is returned by the <see cref="!:VGRepository.GetAllapplicatons"/>.</p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationCollection.#ctor">
            <summary>
            Creates a new, empty Application collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationCollection.Remove(System.Guid)">
            <summary>
            Removes the application object with the specified repository id from the collection.
            </summary>
            <param name="id">The id of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplicationCollection"/> object to remove from the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationCollection.SetReadOnly">
            <summary>
            Makes the contents of the application collection read-only.
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplicationCollection.Item(System.Guid)">
            <summary>
            Gets the application in the collection referenced by the specified repository id.
            </summary>
            <param name="id">The repository id of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> to retrieve from the collection.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object representing the Application.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplicationCollection.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGApplicationInstance">
            <summary>
            Manages repository for a specific <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object.
            </summary>
            <remarks>
            Visual Guard role management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/> and allows to list, create and update roles</p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.CreateApplication(System.String,System.String,Novalys.VisualGuard.Security.Scripting.VGLanguages,Novalys.VisualGuard.Security.VGApplicationType)">
            <summary>
            Create a new application in the repository
            </summary>
            <param name="assemblyPath">Give full path of your application</param>
            <param name="appName">Name of your application</param>
            <param name="language">Language of your application</param>
            <param name="applicationType">Type of your application</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.CreateApplication(System.String,System.String,Novalys.VisualGuard.Security.Scripting.VGLanguages,Novalys.VisualGuard.Security.VGApplicationType,Novalys.VisualGuard.Security.App.VGApplicationFrameworkType)">
            <summary>
            Create a new application in the repository
            </summary>
            <param name="assemblyPath">Give full path of your application</param>
            <param name="appName">Name of your application</param>
            <param name="language">Language of your application</param>
            <param name="applicationType">Type of your application</param>
            <param name="frameworkType">Type of framework of your application</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.SetDefaultRole(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Set the default role of your applcation
            </summary>
            <param name="application">Application you want to define a default application</param>
            <param name="defaultRole">The default you need to put in the application, we accept null to remove the default role</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.SetAnonymousRole(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Set anonymous role
            </summary>
            <param name="application">The application you need to define the anonymous role</param>
            <param name="anonymousRole">The anonymous role you need to put in the application, we accept null to remove the default role</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.SetAnonymousSystemRole(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Set the Anonymous System role for this application
            </summary>
            <param name="application">The application you need to define the anonymous role system</param>
            <param name="anonymousSystemRole">System role you want</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.GetAllApplications">
            <summary>Gets a list of the applications for the repository.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object representing the list of Applications for the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.GetCurrentApplication">
            <summary>
            return the current application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.CreateNewVersion(Novalys.VisualGuard.Security.Membership.VGApplication,System.Version)">
            <summary>
            Create a new version of this application
            </summary>
            <param name="application">Application you want a new version</param>
            <param name="version">Version of the new application</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.GetApplication(System.Guid)">
            <summary>
            Return a VGApplication if you have right and exist in VGRepository else throw a Exception
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.UpdateApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Updates the application with the information for the specified application. 
            </summary>
            <param name="application">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object that represents the application to be updated.</param>
            <exception cref="T:System.ArgumentNullException">application is null.</exception>
            <exception cref="T:System.ArgumentException">the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to load the <paramref name="application"/> is not the current instance.</exception>
            <exception cref="T:System.InvalidOperationException">
            the permission set granted to the role was not found in the repository.
            <para>-or-</para>
            a role with the same name already exists for the application.</exception>
            <exception cref="T:System.InvalidOperationException">the permission set granted to the role was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.DeleteApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Deletes the Application including its' permissionsets, permissions, roles, and Folders.
            </summary>
            <param name="application">Application you want to delete</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.GetAllPermissionSet(System.Guid)">
            <summary>
            Get all permissionSets
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.SetWebPortal(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGWebPortal)">
            <summary>
            Define the webportal for this application
            </summary>
            <param name="application">Application to need to define the webportal</param>
            <param name="webPortal">Webportal you need to put in the application selected</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.GetAllProfileAttributes(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Gets all profile attributes.
            </summary>
            <param name="application">Application for which you want profile attributes.</param>
            <returns>profile attributes for application</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.CreateProfileAttribute(Novalys.VisualGuard.Security.Membership.VGApplication,System.String)">
            <summary>
            Creates profile attribute for application.
            </summary>
            <param name="application">application for which you want to create profile attribute</param>
            <param name="propertyName">propertyname of attribute</param>
            <returns>newly created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.CreateProfileAttribute(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates profile attribute for application.
            </summary>
            <param name="application">application for which you want to create profile attribute</param>
            <param name="propertyName">propertyname of attribute</param>
            <param name="isOverwriteWhenDeployed">set it to true if you want this attribute to be overwriten when deployed to repository, otherwise set it to false</param>
            <param name="isEncrypted">Set it to true if you want this attribute's value to be encrypted, otherwise set it to false</param>
            <returns>newly created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.UpdateProfileAttribute(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGApplicationProfileAttribute)">
            <summary>
            Updates application profile attribute
            </summary>
            <param name="application">application for which you want to update profile attribute</param>
            <param name="updatedAttribute">updated attribute</param>
            <returns>updated attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.DeleteProfileAttribute(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGApplicationProfileAttribute)">
            <summary>
            Deletes application profile attribute
            </summary>
            <param name="application">application for which you want to update profile attribute</param>
            <param name="updatedAttribute">attribute to delete</param>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.UpdateProfileValue(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.String)">
            <summary>
            Update application's profile value.
            </summary>
            <param name="application">Application for which you want to update profile values</param>
            <param name="propertyName">property name of attribute</param>
            <param name="propertyValue">property value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGApplicationInstance.GetStatistics(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Gets application wise all entities statistics information.
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplicationProfileAttribute.Value">
            <summary>
            That property give the real value enter in the system. 
            When the property is encrypted, we decrypt inside of the property
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGApplicationProfileAttribute.DisplayValue">
            <summary>
            Display the value in UI context
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.Name">
            <summary>
            Gets Name of the Hierarchy Item.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.Id">
            <summary>
            Gets Id of the Hierarchy Item.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.Description">
            <summary>
            Gets Description of the Hierarchy Item.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.Type">
            <summary>
            Gets Type of the Hierarchy Item.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.ParentId">
            <summary>
            Gets ParentId of the Hierarchy Item.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.EntityInformation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem.HierarchyCode">
            <summary>
            Parent1 / Parent2 / Item
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyRolesTree.GetRoles">
            <summary>
            This method will return all roles of tree.
            </summary>
            <returns>All Roles of Tree.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyRolesTree.GetRoles(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            This method will return roles for provided VGApplication.
            </summary>
            <param name="application">VGApplication</param>
            <returns>Roles for provided VGApplication.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyRolesTree.GetRoles(Novalys.VisualGuard.Security.VGContextualGroup)">
            <summary>
            This method will return roles for provided VGContextualGroup.
            </summary>
            <param name="contextualGroup">VGContextualGroup</param>
            <returns>Roles for provided VGContextualGroup</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyRolesTree.GetRoles(System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGApplication},System.Collections.Generic.List{Novalys.VisualGuard.Security.VGContextualGroup})">
            <summary>
            This method will return the roles for provided VGApplications and for provided contextual groups.
            Case1. If applications list is empty, and contextual group is provided, It will return roles for all applications with provided contextual groups.
            Case2. If contextual group is empty, and applications list is provided, It will return roles for provided applications with all contextual groups.
            Case3. If application list is provided, and contextual group is provided, It will return roles for provided applications and provided contextual groups.
            </summary>
            <param name="applications">List of VGApplications</param>
            <param name="contextualGroups">List of VGContextualGroups</param>
            <returns>Roles for provided VGApplications and for provided contextual groups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyTree.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGAuditInformationType">
            <summary>
            Represents enum for information type, whether audit is for user, role, group or permissionset.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGAuditInformationType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGAuditInformationType.User">
            <summary>
            Audit for User entity
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGAuditInformationType.Group">
            <summary>
            Audit for group entity
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGAuditInformationType.Role">
            <summary>
            Audit for role entity
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGAuditInformationType.PermissionSet">
            <summary>
            Audit for permissionset entity
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditingInstance.GetPermissions(Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported)">
            <summary>
            This method returns permissions contained by VGIPermissionAuditSupported object. (VGMembershipUser, VGGroup, VGRole, VGPermissionSet)
            1) permissions contained by user. (result will be a combination of user's permissions and user's groups' permissions, depending on authorization)
            2) permissions contained by group. (result will be a combination of group's permission and ancestor groups' permissions, depending on authorization)
            3) permissions contained by role. (result will be a combination of role's permission and role's permissionset's permission)
            4) permissions contained by permissionset. (result will be a combination of permissionset's granted permissions and permissionset's sub permissionsets' granted permissions.)
            </summary>
            <param name="entity">VGIPermissionAuditSupported object which can be VGMembershipUser, VGGroup, VGRole, VGPermissionSet</param>
            <returns>permissions contained by VGIPermissionAuditSupported object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditingInstance.GetHierarchicalItems(Novalys.VisualGuard.Security.Membership.VGPermissionAudit,Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported)">
            <summary>
            Gets whole hierarchy of permission for auditing purpose.        
            </summary>
            <param name="permissionAudit">VGPermissionAudit - permission object for which you require hierarchy</param>
            <param name="target">target object(ex. VGMembershipUser, VGGroup, VGRole, VGPermissionSet, etc.)</param>
            <returns>hierarchy of permission for auditing purpose in the form of <see cref="T:Novalys.VisualGuard.Security.Membership.VGAuditHierarchyItem"/> list.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditingInstance.GetRolesTree(Novalys.VisualGuard.Security.VGIPrincipal,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGApplication},System.Collections.Generic.List{Novalys.VisualGuard.Security.VGContextualGroup})">
            <summary>
            This method returns Tree of roles for user based on provided applications list and contextual groups list.
            </summary>
            <param name="principal">VGPrincipal</param>
            <param name="lstApplications">List of VGApplications</param>
            <param name="lstContextualGroups">List of VGContextual Groups</param>
            <returns>Roles for user </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditingInstance.GetRolesTree(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGApplication},System.Collections.Generic.List{Novalys.VisualGuard.Security.VGContextualGroup})">
            <summary>
            This method returns Tree of roles for user based on provided applications list and contextual groups list.
            </summary>
            <param name="user">VGMembershipUser</param>
            <param name="lstApplications">List of VGApplications</param>
            <param name="lstContextualGroups">List of VGContextual Groups</param>
            <returns>Roles for user </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGAuditingInstance.GetRolesTree(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGApplication},System.Collections.Generic.List{Novalys.VisualGuard.Security.VGContextualGroup})">
            <summary>
            This method returns all roles for user based on applications list and contextual groups list.
            </summary>
            <param name="userId">userId</param>
            <param name="subUserIds">List of subUserIds</param>
            <param name="lstApplications">List of VGApplications</param>
            <param name="lstContextualGroups">List of VGContextual Groups</param>
            <returns>Roles for user </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.Id">
            <summary>
            Gets a unique id of attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.PropertyName">
            <summary>
            Gets a property name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.DisplayName">
            <summary>
            Gets or sets Display name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.IsVisible">
            <summary>
            Gets or sets if attribute is visible or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.IsReadOnly">
            <summary>
            Gets or sets if attribute is readonly or not for API.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.IsReadOnlyForUI">
            <summary>
            Gets or sets if attribute is readonly or not for UI (WinConsole).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.IsRequired">
            <summary>
            Gets or sets if attribute's value is mandatory or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.AllowSearch">
            <summary>
            Gets or sets if search is allowed via this attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.ViewOrder">
            <summary>
            Gets or sets view order of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.GroupName">
            <summary>
            Gets or sets the category or section name of the attribute to display in.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.LastModification">
            <summary>
            Gets or sets the last modification date of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.SaveInLog">
            <summary>
            Gets or sets if attribute values need to be saved in log while modifying or deleting an entity (role or group).
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.DataTypeEnum">
            <summary>
            Gets datatype of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.ProfileAttributeDefinition">
            <summary>
            Gets or set profile attribute definition
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGCommonProfileAttribute.AttributeDefinitionDescription">
            <summary>
            Gets attribute definition description.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance">
            <summary>
            Manager of deploy fonction
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.CreateDeployFileForFullRepository(System.String,Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions,Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions,System.Exception@)">
            <summary>
            Create a deploy file to deploy a VG Repository
            </summary>
            <param name="filename">The fullpath you want to create deploy file</param>
            <param name="option" cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions">You need to select what option you want</param>
            <param name="deployOption" cref="T:Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions" >Put the option you want</param>
            <param name="exception">Return the exception if something </param>
            <returns>Return true if the deploy is successed else you can have some details in the exception</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.CreateDeployFileForApplication(System.String,Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions,Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode,Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions,System.Exception@)">
            <summary>
            Create Deploy file for one application
            </summary>
            <param name="filename">The fullpath you want to create deploy file</param>
            <param name="application" cref="T:Novalys.VisualGuard.Security.Membership.VGApplication">The application targeting</param>
            <param name="option" cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions" > The options you want for the application deployment</param>
            <param name="mode" cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode">The mode of the deployment</param>
            <param name="deployOption" cref="T:Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions">The global option for the deployment</param>
            <param name="exception">Detail of error when you executing the deployment</param>
            <returns>Return true if the deploy is successed else you can have some details in the exception</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.CreateDeployFileForRepositoryParameter(System.String,Novalys.VisualGuard.Security.Deployment.Actions.VGDeployParametersRepositoryAction.RepositoryParameter,Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions,Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions,System.Exception@)">
            <summary>
            Create a deploy file for the parameters of the VG Repository
            </summary>
            <param name="filename">The fullpath you want to create deploy file</param>
            <param name="parameter" cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGDeployParametersRepositoryAction.RepositoryParameter">Parameter you want to put in the deploy file</param>
            <param name="options" cref="T:Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions">Overwrite option of the deployment</param>
            <param name="deployOption" cref="T:Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions">Option of the deployment</param>
            <param name="exception">Detail of error when you executing the deployment</param>
            <returns>Return true if the deploy is successed else you can have some details in the exception</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.ProgressReporter">
            <summary>
            Gets progressReporter for deployment operations which supports progressReporting.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.DeployFullRepository(Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions,Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions,System.Exception@)">
            <summary>
            Deploy the current Repository to other one
            </summary>
            <param name="runtimeTarget">Target of the deployment</param>
            <param name="option" cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions" > The options you want for the application deployment</param>
            <param name="deployOption" cref="T:Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions">Option of the deployment</param>
            <param name="exception">Detail of error when you executing the deployment</param>
            <returns>Return true if the deploy is successed</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.DeployApplication(Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions,Novalys.VisualGuard.Security.Deployment.Common.VGApplicationDeploymentMode,Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions,System.Exception@)">
            <summary>
            
            </summary>
            <param name="runtimeTarget">Target of the deployment</param>
            <param name="application"></param>
            <param name="option" cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions" > The options you want for the application deployment</param>
            <param name="mode"></param>
            <param name="deployOptions" cref="T:Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions">Option of the deployment</param>
            <param name="exception">Detail of error when you executing the deployment</param>
            <returns>Return true if the deploy is successed</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.DeployRepositoryParameter(Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.Deployment.Actions.VGDeployParametersRepositoryAction.RepositoryParameter,Novalys.VisualGuard.Security.Deployment.Actions.VGRepositoryOverwriteOptions,Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions,System.Exception@)">
            <summary>
            
            </summary>
            <param name="runtimeTarget">Target of the deployment</param>
            <param name="parameter"></param>
            <param name="options" cref="T:Novalys.VisualGuard.Security.Deployment.Common.VGApplicationOverwriteOptions" > The options you want for the application deployment</param>
            <param name="deployOptions" cref="T:Novalys.VisualGuard.Security.Deployment.VGDeploymentOptions">Option of the deployment</param>
            <param name="exception"></param>
            <returns>Return true if the deploy is successed</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDeploymentInstance.ImportDeployFile(System.String,System.Exception@)">
            <summary>
            Import the data by deploy file
            </summary>
            <param name="path">The path of the deploy file</param>
            <param name="exception">If you have a error in the execution, the exception return the details of the problem</param>
            <returns>Return true if the deploy is successed</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGDomain">
            <summary>
            Represente a Active directory domain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.Id">
            <summary>
            Id of the Domain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.Name">
            <summary>
            Name of the Active Directory Domain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.Servers">
            <summary>
            Active directory controller domains
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ActiveDirectoryServers">
            <summary>
            Active directory servers
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.UserName">
            <summary>
            Username to connect of this Active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.Password">
            <summary>
            Password of the user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.LastModification">
            <summary>
            Last Modication of the domain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.LastModificationLT">
            <summary>
            Gets the modification date of the domain. (Local Time)
            </summary>
            <returns>The modification date of the vgDomains. (Local Time)</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ActionWhileUserCreation">
            <summary>
            Gets or Sets the type of action to perform while creating a user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ActionWhileUserDeletion">
            <summary>
            Gets or Sets the type of action to perform while deleting a user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ActionWhileUserLockUnlock">
            <summary>
            Gets or Sets the type of action to perform while locking/unlocking a user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ActionWhileUserChangePassword">
            <summary>
            Gets or Sets the type of action to perform while changing a password of a user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.DisplayNameSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for DisplayName between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.EmailSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for email address between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.DescriptionSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for description between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.NameSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Name between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.FirstNameSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Firstname between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.LastNameSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for LastName between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.MiddleNameSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for MiddleName between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.TitleSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Title between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.UserNameSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for UserName between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.CountrySynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Country between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.CitySynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for City between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.MobileSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Mobile between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.FaxSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Fax between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.HomePhoneSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Home Phone between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.CompanySynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Company between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.DepartmentSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Department between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ManagerSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for Manager between Visual-Guard and active directory
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomain.ZipPostalCodeSynchronizationType">
            <summary>
            Gets or Sets the type of synchronization for ZipPostalCode between Visual-Guard and active directory
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGDomainInstance">
            <summary>
            The manager of VGDomain
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGDomainInstance.Runtime">
            <summary>
            Runtime of the manager
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.CreateDomain(System.String,System.String,System.String)">
            <summary>
            Declares a new domain
            </summary>
            <param name="domainName">Name of Active Directory domain</param>
            <param name="domainUserName">User to connect to this domain</param>
            <param name="domainPassword">Password of the user</param>
            <returns>Return VGDomain if the domain is created</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.CreateDomain(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Declares a new domain
            </summary>
            <param name="domainName">Name of Active Directory domain</param>
            <param name="domainUserName">User to connect to this domain</param>
            <param name="domainPassword">Password of the user</param>
            <param name="domainControllerServers">List of Domain Controller Servers</param>
            <returns>Returns VGDomain if the domain is created</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.CreateDomain(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Declares a new domain
            </summary>
            <param name="domainName">Name of Active Directory domain</param>
            <param name="domainUserName">User to connect to this domain</param>
            <param name="domainPassword">Password of the user</param>
            <param name="domainControllerServers">List of Domain Controller Servers</param>
            <param name="activeDirectoryServers">List of Active Directory Servers</param>
            <returns>Returns VGDomain if the domain is created</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.UpdateDomain(Novalys.VisualGuard.Security.Membership.VGDomain)">
            <summary>
            Update the VGDomain in VGRepository
            </summary>
            <param name="domain">VGDomain needs to Update</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetDomain(System.Guid)">
            <summary>
            Get VGDomain by Id
            </summary>
            <param name="id">Represente the id of the domain you want</param>
            <returns>Return a VGDomain</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetAllDomains">
            <summary>
            Get all domains declare in VGRepository
            </summary>
            <returns>Return list of VGDomain</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetRecentDomains">
            <summary>
            Get Recent VGDomains
            </summary>
            <returns>Return list of VGDomain</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.DeleteDomain(Novalys.VisualGuard.Security.Membership.VGDomain)">
            <summary>
            Deletes a VGDomain in VGRepository
            </summary>
            <param name="domain">VGDomain want to delete</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetCurrentForest">
            <summary>
            Return the Current forest
            </summary>
            <returns>Return the forest</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetAllActiveDirectoryDomains">
            <summary>
            Get all Active directory in your environnement
            </summary>
            <returns>Return a list of VGActiveDirectoryDomain</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetAllDefinedActiveDirectoryDomains">
            <summary>
            Get all defined Active directories. Go to settings > Domain to register new domain.
            </summary>
            <returns>Return a list of VGActiveDirectoryDomain</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetAllActiveDirectoryUsers(Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGIActiveDirectoryLocation)">
            <summary>
            Get all users for Active Directory
            </summary>
            <param name="location">Put the location you want</param>
            <returns>Return list of VGActiveDirectoryUser</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetActiveDirectoryAccount(Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGIActiveDirectoryLocation,System.String)">
            <summary>
            
            </summary>
            <param name="location"></param>
            <param name="ldapPath"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.GetAllActiveDirectoryGroups(Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGIActiveDirectoryLocation)">
            <summary>
            Get all Groups of Active directory location
            </summary>
            <param name="location">Location of your active directory</param>
            <returns>Return list of VGActiveDirectoryGroup</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.FindActiveDirectoryEntries(Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGIActiveDirectoryLocation,Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectorySearch.SearchFilter,System.String)">
            <summary>
            Get all type of entities in Active Directory
            </summary>
            <param name="location">Where you need to find</param>
            <param name="filter">Type of filter, you want</param>
            <param name="searchName">Pattern of the search</param>
            <returns>Return a a list of VGActiveDirectoryEntity</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGDomainInstance.FindActiveDirectoryEntries(Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGIActiveDirectoryLocation,Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGActiveDirectorySearch.SearchFilter,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get all type of entities in Active Directory
            </summary>
            <param name="location">Where you need to find</param>
            <param name="filter">Type of filter, you want</param>
            <param name="searchName">Pattern of the search</param>        
            <param name="pageIndex">Page Index for Pagination</param>
            <param name="pageSize">Page Size for Pagination</param>
            <param name="totalRecords">Total records in the provider</param>
            <returns>Return a a list of VGActiveDirectoryEntity</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGEventId">
            <summary>
            Represente A EventId in the VGLog
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventId.IsPredefined">
            <summary>
            Return if the EventID is manage by the Visual-Guard system
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventId.EventId">
            <summary>
            Return the Id of this Event
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventId.Description">
            <summary>
            Get or Set the description of this VGEventID
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGEventLog">
            <summary>
            Represente one entry of the log of Visual-Guard
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.Username">
            <summary>
            Username to have perform this operation
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.UserId">
            <summary>
            UserId to have perform this operation
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.Title">
            <summary>
            Title of this operation
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.Message">
            <summary>
            Message of this VGEventId
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.Severity">
            <summary>
            Severity of this message
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.MachineName">
            <summary>
            Machine name can start or perform this operation
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.EventId">
            <summary>
            Return the EventId of this VGEventLog
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.ApplicationId">
            <summary>
            Return the application id of this VGEventLog
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.TimeStamp">
            <summary>
            Return the DateTime of created operation
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.TimeStampLT">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGEventLog.LogData">
            <summary>
            Returns the log data of the event log.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGEventLogInstance">
            <summary>
            Manage of VGEventLog
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance._GetEventLogByUsername(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            
            </summary>
            <param name="vgApp"></param>
            <param name="username"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLog(Novalys.VisualGuard.Security.Logging.VGEventLogArgs,System.Int32@)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLog">
            <summary>
            Get all Event log in VGRepository
            </summary>
            <returns>return list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLog(System.DateTime,System.DateTime)">
            <summary>
            Get all Event log between startDate and endDate
            </summary>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLog(System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">totalCounts</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLog(System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets eventlogs.
            </summary>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>       
            <param name="sortBy">sortby column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalRecords">total records (output variable)</param>
            <returns>list of eventlogs</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType)">
            <summary>
            Return all sevents by severity.
            </summary>
            <param name="traceEventType"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,System.DateTime,System.DateTime)">
            <summary>
            Return all sevents by severity, start date and end date.
            </summary>
            <param name="traceEventType"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Return all sevents by severity, start date and end date based on page index and page size.
            </summary>
            <param name="traceEventType"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Return all sevents by severity, start date and end date based on page index, page size, sort by and sort order.
            </summary>
            <param name="traceEventType"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="sortOrder"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Return all sevents by severity and application.
            </summary>
            <param name="traceEventType"></param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime)">
            <summary>
            Return all sevents by severity, application, start date and end date.
            </summary>
            <param name="traceEventType"></param>
            <param name="application"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Return all sevents by severity, application, start date and end date based on page index and page size.
            </summary>
            <param name="traceEventType"></param>
            <param name="application"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogBySeverity(System.Diagnostics.TraceEventType,Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Return all sevents by severity, application, start date and end date based on page index, page size, sort by and sort order.
            </summary>
            <param name="traceEventType"></param>
            <param name="application"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="sortOrder"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId)">
            <summary>
            Return all VGEventLog by VGEventId
            </summary>
            <param name="eventId">EventId</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,System.DateTime,System.DateTime)">
            <summary>
            Return all VGEventLog by VGEventId,start date and end date
            </summary>
            <param name="eventId">EventId</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="eventId">EventId</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">returns total count</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            
            </summary>
            <param name="eventId">EventId</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="sortBy">sortby column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalRecords">returns total count</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Return list of VGEventLog by eventId for one application
            </summary>
            <param name="eventId">EventId</param>
            <param name="application">application</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime)">
            <summary>
            Return a list of VGEventLog by VGEventId , startDate and endDate for one VGApplication
            </summary>
            <param name="eventId">eventId</param>
            <param name="application">application</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="eventId">eventId</param>
            <param name="application">application</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">returns totalRecords as out parameter</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogByEventId(Novalys.VisualGuard.Security.Membership.VGEventId,Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            
            </summary>
            <param name="eventId">eventId</param>
            <param name="application">application</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">returns totalRecords as out parameter</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Return 
            </summary>
            <param name="application">application</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByApplication(Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime)">
            <summary>
            Get All EventLogs by Application
            </summary>
            <param name="application">application</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByApplication(Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="application">application</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">contains totalcount as out parameter</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByApplication(Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            
            </summary>
            <param name="application">application</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="sortBy">sortby column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalRecords">contains totalcount as out parameter</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByCategory(Novalys.VisualGuard.Security.Logging.VGLogCategory,System.DateTime,System.DateTime)">
            <summary>
            Get All EventLogs by Category
            </summary>
            <param name="category">EventLogCategory</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Return a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByCategory(Novalys.VisualGuard.Security.Logging.VGLogCategory,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get All EventLogs by Category and other parameters
            </summary>
            <param name="category">EventLogCategory</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">contains totalcount as out parameter</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByCategory(Novalys.VisualGuard.Security.Logging.VGLogCategory,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Get All EventLogs by Category and other parameters
            </summary>
            <param name="category">EventLogCategory</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="sortBy">sortby column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalRecords">contains totalcount as out parameter</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByCategory(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Logging.VGLogCategory,System.DateTime,System.DateTime)">
            <summary>
            Get All EventLogs by Category and other parameters
            </summary>
            <param name="vgApp">application</param>
            <param name="category">EventLogCategory</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByCategory(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Logging.VGLogCategory,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get All EventLogs by Category and other parameters
            </summary>
            <param name="vgApp">application</param>
            <param name="category">EventLogCategory</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">totalRecords</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByCategory(Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Logging.VGLogCategory,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Get All EventLogs by Category and other parameters
            </summary>
            <param name="vgApp">application</param>
            <param name="category">EventLogCategory</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="sortBy">sortby column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalRecords">totalRecords</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByUsername(System.String,System.DateTime,System.DateTime)">
            <summary>
            Get All EventLogs by Username
            </summary>
            <param name="username">username</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByUsername(System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get All EventLogs by Username
            </summary>
            <param name="username">username</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">contains totalCounts as out parameter</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByUsername(System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Get All EventLogs by Username
            </summary>
            <param name="username">username</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="sortBy">sortby column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalRecords">contains totalCounts as out parameter</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByUsername(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get All EventLogs by Username
            </summary>
            <param name="vgApp">application</param>
            <param name="username">username</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByUsername(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get All EventLogs by Username
            </summary>
            <param name="vgApp">application</param>
            <param name="username">username</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">contains totalCounts as out parameter</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventLogByUsername(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Get All EventLogs by Username
            </summary>
            <param name="vgApp">application</param>
            <param name="username">username</param>
            <param name="startDate">startDate (Need to be in UTC)</param>
            <param name="endDate">endDate (Need to be in UTC)</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <param name="totalRecords">contains totalCounts as out parameter</param>
            <returns>Returns a list of VGEventLog</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogsEntriesForDataPoint(Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGIGraphDataPoint)">
            <summary>
            Get eventLog Entries for given dataPoint in Monitoring Charts.
            </summary>
            <param name="dataPoint">DataPoint</param>
            <returns>List of VGEventLog Entries</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogsEntriesForDataPoint(Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGIGraphDataPoint,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get eventLog Entries for given dataPoint in Monitoring Charts.
            </summary>
            <param name="dataPoint">DataPoint</param>
            <param name="pageIndex">PageIndex</param>
            <param name="pageSize">PageSize</param>
            <param name="totalCount">TotalCount</param>
            <returns>List of VGEventLog Entries</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogsEntriesForDataPoint(Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGIGraphDataPoint,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Get eventLog Entries for given dataPoint in Monitoring Charts.
            </summary>
            <param name="dataPoint">DataPoint</param>
            <param name="pageIndex">PageIndex</param>
            <param name="pageSize">PageSize</param>
            <param name="sortby">sort by column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalCount">TotalCount</param>
            <returns>List of VGEventLog Entries</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventLogsEntriesForDataPoint(Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGIGraphDataPoint,System.DateTime,System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Logging.VGEventLogSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Get eventLog Entries for given dataPoint in Monitoring Charts.
            </summary>
            <param name="dataPoint">DataPoint</param>
            <param name="startDate">StartDate</param>
            <param name="endDate">EndDate</param>
            <param name="pageIndex">PageIndex</param>
            <param name="pageSize">PageSize</param>
            <param name="sortby">sort by column</param>
            <param name="sortOrder">sort order</param>
            <param name="totalCount">TotalCount</param>
            <returns>List of VGEventLog Entries</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.AddCustomVGEventId(System.Int32,System.String)">
            <summary>
            Create a custom VGEventId
            </summary>
            <param name="eventId"></param>
            <param name="description"></param>
            <returns>Return VGEventId</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.DeleteCustomVGEventId(Novalys.VisualGuard.Security.Membership.VGEventId)">
            <summary>
            Delete a Custom VGEventId
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.ResetVGEventId(Novalys.VisualGuard.Security.Membership.VGEventId)">
            <summary>
            Reset VGEventId works only for a Predefined VGEventId
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.UpdateVGEventId(Novalys.VisualGuard.Security.Membership.VGEventId)">
            <summary>
            Update VGEventId
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetEventIdFromId(System.Int32)">
            <summary>
            Get VGEventId by Id
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllEventIds">
            <summary>
            Get All VGEventIds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllPredefinedEventIds">
            <summary>
            Get All Predefined VGEventIds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.GetAllCustomEventIds">
            <summary>
            Get All Custom VGEventIds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.ClearLog(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            ClearLog by VGApplication
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.ClearLog(Novalys.VisualGuard.Security.Membership.VGApplication,System.DateTime)">
            <summary>
            ClearLog by VGApplication and Date
            </summary>
            <param name="app"></param>
            <param name="olderThan"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGEventLogInstance.ClearLog(System.DateTime)">
            <summary>
            ClearLog by Date
            </summary>
            <param name="olderThan"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGFIPSComplianceException">
            <summary>
            Exception thrown when changes to the repository for FIPS compliance generates an exception.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttribute">
            <summary>
            Represente a Attribut in permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttribute.Id">
            <summary>
            Id of VGIPermissionAttribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttribute.Name">
            <summary>
            Name of the attribut
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttribute.Description">
            <summary>
            Description of the attribut
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttribute.ValueType">
            <summary>
            Type of the attribut
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttribute.Value">
            <summary>
            Value of the attribut
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGGrantedPermissionAttributeCollection">
            <summary>
            Represente a list of VGGrantedPermissionAttribute
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGGroup">
            <summary>
            VGGroup can conatins Users and Roles
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroup.op_Inequality(Novalys.VisualGuard.Security.Membership.VGGroup,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Check if the id of the both VGGroup is different
            </summary>
            <param name="a">VGGroup 1</param>
            <param name="b">VGGroup 2</param>
            <returns>Return true if the id of groups are different</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroup.op_Equality(Novalys.VisualGuard.Security.Membership.VGGroup,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Check if the id of the both VGGroup is a same
            </summary>
            <param name="a">VGGroup 1</param>
            <param name="b">VGGroup 2</param>
            <returns>Return true if the id of groups are same</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Id">
            <summary>
            Get the Id of the Group
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Name">
            <summary>
            Get or Set the Name of this VGGroup
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Description">
            <summary>
            Get or Set the Desciption of the VGGroup
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.LastModification">
            <summary>
            Return the Last modication for this group (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.LastModificationLT">
            <summary>
            Return the Last modication for this group (Local Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.ParentId">
            <summary>
            Return the id of parent of the Group
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Parent">
            <summary>
            Return the parent of the Group
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Data1">
            <summary>
            Get or Set a Data1 for this group 
            You need to save after 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Data2">
            <summary>
            Get or Set a Data2 for this group 
            You need to save after 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Data3">
            <summary>
            Get or Set a Data2 for this group 
            You need to save after 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.FriendlyName">
            <summary>
            Gets Friendly Name based on Group Display Information set on repository. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.DisplayName">
            <summary>
            Gets Display Name based on Group Display Information set on application. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.IsContextual">
            <summary>
            gets or sets whether the group is allowed for selection in group selection mode.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.IsMultiUserProfileSupported">
            <summary>
            gets or sets whether this group supports multi user profile.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGGroup.Type">
            <summary>
            Gets entityType
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGGroupsInstance">
            <summary>
            Manager of VGroups
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllGroup">
            <summary>
            Get all groups in VGRepository
            The list returned will be limited according to your rights in the console
            </summary>
            <returns>Return VGGroups list</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetRootGroups">
            <summary>
            Get all root vggroup
            The list returned will be limited according to your rights in the console
            </summary>
            <returns>List of VGGroups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetGroup(System.Guid)">
            <summary>
            Get VGGroup by id
            </summary>
            <param name="groupId">Group Id</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RefreshGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Refresh the VGGroup to ask VGRepository
            </summary>
            <param name="group"></param>
            <returns>Return VGGroupo refreshed</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetGroupsFromRole(Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Get All VGGroups by Role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.FindGroupsByName(System.String)">
            <summary>
            Find groups by name
            The list returned will be limited according to your rights in the console
            </summary>
            <param name="pattern">Le nom de groupe que vous recherchez</param>
            <returns>Retour la liste des groupes qui correspond à votre demande selon vos droits</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.FindGroupsByName(System.String,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Find groups by name
            The list returned will be limited according to your rights in the console
            </summary>
            <param name="pattern">Le nom de groupe que vous recherchez</param>
            <param name="parentGroup">parentGroup</param>
            <returns>Retour la liste des groupes qui correspond à votre demande selon vos droits</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.FindGroupsByName(System.Int32,System.Int32,System.String,Novalys.VisualGuard.Security.Common.VGSortOrderType,Novalys.VisualGuard.Security.Group.VGGroupSortByColumnType,System.Int32@)">
            <summary>
            Find groups by groupname pattern.
            </summary>
            <param name="pageIndex">pageIndex (0 based)</param>
            <param name="pageSize">pageSize</param>
            <param name="groupNamePattern">groupname to find</param>
            <param name="sortOrder">sort order</param>
            <param name="sortBy">sort by</param>
            <param name="totalRecords">total records</param>
            <returns>Return a list of <see cref="T:Novalys.VisualGuard.Security.Membership.VGGroup"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.FindGroupsByName(System.Int32,System.Int32,System.String,Novalys.VisualGuard.Security.Membership.VGGroup,Novalys.VisualGuard.Security.Common.VGSortOrderType,Novalys.VisualGuard.Security.Group.VGGroupSortByColumnType,System.Int32@)">
            <summary>
            Find groups by groupname pattern.
            </summary>
            <param name="pageIndex">pageIndex (0 based)</param>
            <param name="pageSize">pageSize</param>
            <param name="groupNamePattern">groupname to find</param>
            <param name="parentGroup">parentGroup</param>
            <param name="sortOrder">sort order</param>
            <param name="sortBy">sort by</param>
            <param name="totalRecords">total records</param>
            <returns>List<see cref="T:Novalys.VisualGuard.Security.Membership.VGGroup" /></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllGroupsAllowedForMultiProfileValues(System.Int32,System.Int32)">
            <summary>
            Gets all groups which are allowed to specify multi user profile values.
            </summary>
            <param name="pageIndex">0 based pageIndex</param>
            <param name="pageSize">pagesize</param>
            <returns>Groups which are allowed to specify multi user profile values</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllGroupsAllowedForMultiProfileValues(System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGSortOrderType,Novalys.VisualGuard.Security.Group.VGGroupSortByColumnType,System.Int32@)">
            <summary>
            Gets all groups which are allowed to specify multi user profile values.
            </summary>
            <param name="pageIndex">0 based pageIndex</param>
            <param name="pageSize">pagesize</param>
            <param name="sortOrder">sortOrder</param>
            <param name="sortBy">sortBy</param>
            <param name="totalRecords">out total no of counts</param>
            <returns>Groups which are allowed to specify multi user profile values.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllGroupsAllowedForMultiProfileValuesByUserId(System.String)">
            <summary>
            Gets all contextual groups allowed for multi profile value for particular user.
            </summary>
            <param name="userId">userId of user</param>
            <returns>All contextual groups allowed for multi profile value for particular user</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.CreateGroup(System.String)">
            <summary>
            Create a new VGGroup
            You need a CanCreateGroup permission
            </summary>
            
            <param name="name">Group name</param>
            <returns>Return VGGroup created</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.CreateGroup(System.String,System.Guid)">
            <summary>
            Create a new group
            You need a CanCreate permission
            </summary>
            <param name="name">Name of group</param>
            <param name="parentId">Id of parent</param>
            <returns>Return group created</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.CreateGroup(System.String,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Create a VGGroup 
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.CreateGroup(System.String,System.String,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Create a new vggroup 
            </summary>
            <param name="name">Name of group</param>
            <param name="parent">Reference of parent</param>
            <returns>Return group created</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.UpdateGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Updates the repository with the information for the specified VGGroup. 
            </summary>
            <param name="group">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGGroup"/> object that represents the group to be updated and the updated information for the group.</param>
            <exception cref="T:System.ArgumentNullException">group is null.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.DeleteGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Delete a VGGroup
            </summary>
            <param name="group"></param>
            <exception cref="T:System.ArgumentNullException">group is null.</exception>
            <exception cref="T:System.InvalidOperationException">The group have children, you delete children group before</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.DeleteGroup(Novalys.VisualGuard.Security.Membership.VGGroup,System.Boolean)">
            <summary>
            Delete a VGGroup
            </summary>
            <param name="group"></param>
            <param name="throwOnPopulatedGroup">If true, throws an exception.</param>
            <exception cref="T:System.ArgumentNullException">group is null.</exception>
            <exception cref="T:System.InvalidOperationException">The group have children, you delete children group before</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.DeleteGroup(System.Guid)">
            <summary>
            Delete a VGGroup
            </summary>
            <param name="group"></param>
            <exception cref="T:System.ArgumentNullException">group is null.</exception>
            <exception cref="T:System.InvalidOperationException">The group have children, you delete children group before</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllParentGroups(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get all parents the user can see
            </summary>
            <param name="group"> </param>
            <returns>LList of ancestor groups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllDescendantGroupsFromGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get All Descendant of the Group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllDescendantGroupsFromGroup(System.Guid)">
            <summary>
            Get All Descendant of the Group Id
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetDescendantGroupsFromGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get children of the Group 
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetDescendantGroupsFromGroup(System.Guid)">
            <summary>
            Get children of the Group Id
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetGroupsFromUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Get all VGGroups of the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetGroupsFromUser(System.String)">
            <summary>
            Get all VGGroups of the user Id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetUsersFromGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get users from group
            </summary>
            <param name="group">VGGroup </param>
            <returns>List of user</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetUsersFromGroup(Novalys.VisualGuard.Security.Membership.VGGroup,System.Int32,System.Int32)">
            <summary>
            Get Users from VGGroup
            </summary>
            <param name="group"></param>
            <param name="indexPage"></param>
            <param name="sizePage"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetUsersFromGroupAndDescendantGroups(Novalys.VisualGuard.Security.Membership.VGGroup,System.Int32@)">
            <summary>
            Gets users for group and its descendant groups.
            </summary>
            <param name="group">VGGroup object</param>
            <param name="totalRecords">Total Records Count</param>
            <returns>users for group and its descendant groups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetUsersFromGroupAndDescendantGroups(Novalys.VisualGuard.Security.Membership.VGGroup,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets users for group and its descendant groups.
            </summary>
            <param name="group">VGGroup object</param>
            <param name="pageIndex">PageIndex</param>
            <param name="pageSize">PageSize</param>
            <param name="totalRecords">Total Records Count</param>
            <returns>users for group and its descendant groups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetUsersFromGroupAndDescendantGroups(Novalys.VisualGuard.Security.Membership.VGGroup,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets users for group and its descendant groups.
            </summary>
            <param name="group">VGGroup object</param>
            <param name="pageIndex">Page Index</param>
            <param name="pageSize">Page Size</param>
            <param name="sortBy">Sort By</param>
            <param name="sortOrder">Sort Order</param>
            <param name="totalRecords">Total Records Count</param>
            <returns>Users for group and its descendant groups</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetUsersFromGroup(System.Guid)">
            <summary>
            Get users from VGGroup
            </summary>
            <param name="groupID">VGGroup ID</param>
            <returns>List of users</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetRolesFromGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get roles from a VGGroup
            </summary>
            <param name="group"></param>
            <returns>Return list of roles</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetRolesFromGroup(System.Guid)">
            <summary>
            Get roles from a group ID
            </summary>
            <param name="groupId">VGGroup ID</param>
            <returns>Return </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllRolesFromGroup(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get all roles from VGGroup by your access security
            </summary>
            <param name="group"></param>
            <returns>List of roles</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllRolesFromGroup(System.Guid)">
            <summary>
            Get All Roles from Group Id
            </summary>
            <param name="groupID"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddUserToGroup(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Add User to VGGroup
            </summary>
            <param name="user"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddUserToGroup(System.String,System.Guid)">
            <summary>
            Add User to VGGroup
            </summary>
            <param name="user"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddUserToGroups(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGGroup})">
            <summary>
            Add User to VGGroups
            </summary>
            <param name="user"></param>
            <param name="groups"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddUserToGroups(System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Add User to VGGroups
            </summary>
            <param name="userId"></param>
            <param name="groups"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddUsersToGroup(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGMembershipUser},Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Add Users to VGGroup
            </summary>
            <param name="users"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddUsersToGroup(System.Collections.Generic.ICollection{System.String},System.Guid)">
            <summary>
            You can add use to group, this method is not very fast, better if you use AddUsersToGroup(<see cref="T:System.Collections.ICollection"/> users, VGGroup group)
            </summary>
            <param name="usersID">User id (RepositoryId of user)</param>
            <param name="groupID">Id of Group (Guid)</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveUserFromGroups(System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Remove User from Groups
            </summary>
            <param name="userID"></param>
            <param name="groups"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveUserFromGroups(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGGroup})">
            <summary>
            Remove User from Groups
            </summary>
            <param name="user"></param>
            <param name="groups"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveUserFromGroup(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Remove User from VGGroup
            </summary>
            <param name="user"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveUserFromGroup(System.String,System.Guid)">
            <summary>
            Remove User from VGGroup
            </summary>
            <param name="userID"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveUsersFromGroup(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGMembershipUser},Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Remove Users from VGGroup
            </summary>
            <param name="users"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveUsersFromGroup(System.Collections.Generic.ICollection{System.String},System.Guid)">
            <summary>
            Remove Users from VGGroup
            </summary>
            <param name="usersID"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddRoleToGroup(System.Guid,System.Guid)">
            <summary>
            Add role into group
            </summary>
            <param name="roleId">Role ID</param>
            <param name="groupId">VGGroup ID</param>
            <permission cref="T:System.Security.PermissionSet"></permission>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddRoleToGroup(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Add Role to VGGroup
            </summary>
            <param name="role"></param>
            <param name="group"></param>
            <permission cref="T:System.Security.PermissionSet"></permission>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddRoleToGroups(Novalys.VisualGuard.Security.Membership.VGRole,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGGroup})">
            <summary>
            Add Role to Groups
            </summary>
            <param name="role"></param>
            <param name="groups"></param>
            <permission cref="T:System.Security.PermissionSet"></permission>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddRolesToGroup(System.Collections.Generic.ICollection{System.Guid},System.Guid)">
            <summary>
            Add Role to VGGroup
            </summary>
            <param name="roles"></param>
            <param name="groupId"></param>
            <permission cref="T:System.Security.PermissionSet"></permission>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.AddRolesToGroup(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGRole},Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Add Role to VGGroup
            </summary>
            <param name="roles"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveRoleFromGroup(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Remove Role to VGGroup
            </summary>
            <param name="role"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveRoleFromGroups(Novalys.VisualGuard.Security.Membership.VGRole,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGGroup})">
            <summary>
            Remove Role from Groups
            </summary>
            <param name="user"></param>
            <param name="groups"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveRoleFromGroup(System.Guid,System.Guid)">
            <summary>
            Remove Role to VGGroup
            </summary>
            <param name="roleID"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveRolesFromGroup(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGRole},Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Remove role in group
            </summary>
            <param name="roles"></param>
            <param name="group"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.RemoveRolesFromGroup(System.Collections.Generic.ICollection{System.Guid},System.Guid)">
            <summary>
            Remove Role to VGGroup
            </summary>
            <param name="rolesID"></param>
            <param name="groupID"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllProfileAttributes">
            <summary>
            Gets all group profile attribtues.
            </summary>
            <returns>Profile attributes of the group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.GetAllProfileAttributes(System.Int32,System.Int32)">
            <summary>
            Gets all group profile attributes.
            </summary>
            <param name="pageIndex">PageIndex</param>
            <param name="pageSize">PageSize</param>
            <returns>All group profile attributes.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.UpdateProfileAttributeViewOrder(System.Guid,System.Int32)">
            <summary>
            Updates profileAttribute ViewOrder
            </summary>
            <param name="profileAttributeId">profileAttributeId</param>
            <param name="newViewOrderNumber">new ViewOrderNumber</param>
            <returns>updated roleProfileAttribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.SetIsAllowedGrantingGroupRoleToDescendantGroups(Novalys.VisualGuard.Security.Membership.VGGroup,Novalys.VisualGuard.Security.Membership.VGRole,System.Boolean)">
            <summary>
            This method sets value if group's role is allowed to be granted to descendant groups in hierarchy automatically or not.        
            </summary>
            <param name="isAllowedGrantingGroupRoleToDescendantGroups">Set it to true, if you want to allow this role to be granted to descendant groups in hierarchy otherwise set it false.</param>
            <param name="group">group object for which you want to update group->roles behavior.</param>
            <param name="role">role object for which you want to set if it allows to be granted to descendant groups or not.</param>
            <returns>updated group object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.SetIsAllowedGrantingGroupRoleToDescendantGroups(System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGGroup},Novalys.VisualGuard.Security.Membership.VGRole,System.Boolean)">
            <summary>
            This method sets value if group's role is allowed to be granted to descendant groups in hierarchy automatically or not.        
            </summary>
            <param name="groups">List of group objects for which you want to update group->roles behavior.</param>
            <param name="role">role object for which you want to set if it allows to be granted to descendant groups or not.</param>
            <param name="isAllowedGrantingGroupRoleToDescendantGroups">role object for which you want to set if it allows to be granted to descendant groups or not.</param>
            <returns>updated group object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGGroupsInstance.MoveGroupToNewParentGroup(Novalys.VisualGuard.Security.Membership.VGGroup,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Moves a group to a new parent group.
            </summary>
            <param name="group">Group to be moved</param>
            <param name="newParentGroup">New parentGroup</param>
            <returns>Updated group</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGIMembershipObject.LastModification">
            <summary>
            Represente the last modification DateTime (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGIMembershipObject.LastModificationLT">
            <summary>
            Represente the last modification DateTime (Local Time)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance">
            <summary>
            Module Manager
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetVGICredential(System.String)">
            <summary>
            Convert xml to VGICredential
            </summary>
            <param name="vgCredentialData"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetAllIdentityModule">
            <summary>
            Get all identities modules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetAllSupportedCustomIdentityModulesForAuthentication(Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGCustomUserControlKind)">
            <summary>
            Get all custom identity modules whose authentication control exists in the custom module.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetAllCustomIdentityModule">
            <summary>
            Get all custom identity module
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetAllCustomIdentityModules">
            <summary>
            Get all custom identity modules.
            </summary>
            <returns>all custom identity modules</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetUserImage(System.String,System.Boolean)">
            <summary>
            Get User Image
            </summary>
            <param name="moduleName"></param>
            <param name="isAdministrator"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.GetUserCreatorEditor(System.String,Novalys.VisualGuard.Security.IdentityModule.ModuleOptions.VGCustomUserControlKind)">
            <summary>
            Get User Creator Editor 
            </summary>
            <param name="moduleName"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIdentityModuleInstance.Exists(System.String)">
            <summary>
            Check if the module exists
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGIDocumentationMembershipObject">
            <summary>
            Represents an interface for a VG Entity which can have documentation.
            Examples: User, Group, Application, Repository etc.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">
            <summary>
            Exception thrown when you try to delete a user and this user is member of another application.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException"/> class.
            </summary>
            <param name="message">A description of the reason for the exception.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException"/> class.
            </summary>
            <param name="message">A description of the reason for the exception.</param>
            <param name="innerException">The exception that caused the MembershipCreateUserException.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembership">
            <summary>
            Validates user credentials and manages user settings.
            </summary>
            <remarks>This class is used by the applications to manage user settings. The Membership class provides the same facilities as the <c>System.Web.Security.Membership</c> class:
            <ul><li>
            <p>Creating new users.</p>
            </li><li>
            <p>Storing membership information (user names, passwords, e-mail addresses, and supporting data) in a Visual Guard repository.</p>
            </li><li>
            <p>Managing passwords, which includes creating, changing, retrieving, and resetting them, and so on. You can optionally configure the Visual Guard repository to require a password question and answer to authenticate password reset or retrieval requests for users that have forgotten their password.</p>
            </li></ul>
            This class can interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoles"/> class to manage user membership in roles for authorization checking.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.Membership.VGMembership.ValidatingPassword">
            <summary>
            Occurs when a user is created, a password is changed, or a password is reset.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateInstance(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipInstance"/> using a specific security runtime
            </summary>
            <param name="runtime">The security runtime used by the created instance.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> class.</returns>
            <exception cref="T:System.ArgumentNullException">the specified runtime is null.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.AddWindowsAccount(System.Security.Principal.NTAccount)">
            <summary>
            Adds a new windows account to the Visual Guard repository.
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account that will be added to the repository.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>This method is available only for the .Net framework version 2.0 or later</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.AddWindowsAccount(System.Security.Principal.NTAccount,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new windows account to the Visual Guard repository.
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account that will be added to the repository.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the account was added successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>This method is available only for the .Net framework version 2.0 or later</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.DeleteWindowsAccount(System.Security.Principal.NTAccount)">
            <summary>
            Deletes a windows account from the repository. 
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account to delete.</param>
            <returns>true if the account was deleted; otherwise, false.</returns>
            <remarks>This method deletes the user even if the account is a member of another application.
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <para>This method is available only for the .Net framework version 2.0 or later</para></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.DeleteWindowsAccount(System.Security.Principal.NTAccount,System.Boolean)">
            <summary>
            Deletes a windows account from the repository. 
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object represnting the windows account to delete.</param>
            <param name="forAllApplications">true if the account must be deleted even the account is a member of another application, false otherwise</param>
            <returns>true if the account was deleted; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">The account is a member of an another application and the <paramref name="forAllApplications"/> not equal to true.
            <P>- or </P>
            The account is a master administrator of the console.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>This method is available only for the .Net framework version 2.0 or later</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String,System.String)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. </returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. a null value (Nothing in VB) when the creation fails.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="firstName">the first name of the user.</param>
            <param name="lastName">the last name of the user.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. a null value (Nothing in VB) when the creation fails.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="firstName">the first name of the user.</param>
            <param name="lastName">the last name of the user.</param>
            <param name="mustChangePasswordAtNextLogon">A Boolean value that indicates whether the new user must change the password at next logon.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. a null value (Nothing in VB) when the creation fails.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.DeleteUserById(System.String,System.Boolean)">
            <summary>
            Deletes a user specified by its repository id from the repository. 
            </summary>
            <param name="userId">The repository id of the user to delete.</param>
            <param name="forAllApplications">true if the user must be deleted even the user is a member of another application, false otherwise</param>
            <returns>true if the user was deleted; otherwise, false.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">The user is a member of an another application and the <paramref name="forAllApplications"/> not equal to true.
            <P>-or-</P>
            The user is a master administrator of the console.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is empty or is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.DeleteUser(System.String)">
            <summary>
            Deletes a user from the repository. 
            </summary>
            <param name="username">The name of the user to delete.</param>
            <returns>true if the user was deleted; otherwise, false.</returns>
            <remarks>This method deletes the user even if the user is a member of another application.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.DeleteUser(System.String,System.Boolean)">
            <summary>
            Deletes a user from the repository. 
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="forAllApplications">true if the user must be deleted even the user is a member of another application, false otherwise</param>
            <returns>true if the user was deleted; otherwise, false.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">The user is a member of an another application and the <paramref name="forAllApplications"/> not equal to true.
            <P>-or- </P>
            The user is a master administrator of the console.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByEmail(System.String)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for. this expression must be a valid regular expression.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the emailToMatch parameter. Leading and trailing spaces are trimmed from the emailToMatch parameter value. </returns>
            <remarks>Regular expression can be used in the emailToMatch parameter value.</remarks>
            <exception cref="T:System.ArgumentException">emailToMatch is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users, in a page of data, where the e-mail address contains the specified e-mail address to match. 
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            emailToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="emailToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByName(System.String)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the usernameToMatch parameter. Leading and trailing spaces are trimmed from the usernameToMatch parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the usernameToMatch parameter value.</remarks>
            <exception cref="T:System.ArgumentException">usernameToMatch is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByName(System.String,System.Guid)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="applicationId">The Guid of the aplication to search in.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the usernameToMatch parameter. Leading and trailing spaces are trimmed from the usernameToMatch parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the usernameToMatch parameter value.</remarks>
            <exception cref="T:System.ArgumentException">usernameToMatch is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByLastName(System.String)">
            <summary>
            Gets a collection of membership users where the last name contains the specified user name to match.
            </summary>
            <param name="lastNameToMatch">The last name to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="lastNameToMatch"/> parameter. Leading and trailing spaces are trimmed from the <paramref name="lastNameToMatch"/> parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="lastNameToMatch"/> parameter value.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="lastNameToMatch"/> is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByLastName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the last name contains the specified name to match.
            </summary>
            <param name="lastNameToMatch">The last name to search for. Empy string or null is equal to '*'.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="lastNameToMatch"/> is longer than 256 characters.
            <para>-or -</para>
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="lastNameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@,System.Guid)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            usernameToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            usernameToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByAuthenticationMode(Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Gets a collection of membership users where the user authentication mode contains the specified user authentication mode to match.
            </summary>
            <param name="authenticationModeToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> object that represents the user authentication mode to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all windows users.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="authenticationModeToMatch"/> is null.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByAuthenticationMode(Novalys.VisualGuard.Security.VGAuthenticationMode,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user authentication mode contains the specified user authentication mode to match.
            </summary>
            <param name="authenticationModeToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> object that represents the user authentication mode to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByState(Novalys.VisualGuard.Security.VGMemberShipUserState)">
            <summary>
            Gets a collection of membership users where the user state is Locked / Unlocked or Approved / UnApproved.
            </summary>
            <param name="stateToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGMemberShipUserState"/> object that represents the user state to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all visual guard users.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateToMatch"/> is null.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByState(Novalys.VisualGuard.Security.VGMemberShipUserState,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user state is Locked / Unlocked or Approved / UnApproved.
            </summary>
            <param name="stateToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGMemberShipUserState"/> object that represents the user state to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersWithoutApplications">
            <summary>
            Gets a collection of membership users without applications.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users without applications.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersWithoutApplications(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users without applications.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersInApplication(System.Guid)">
            <summary>
            Gets a collection of membership users where the application name contains the specified application name to match.
            </summary>
            <param name="applicationToMatch">The application to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the applicationToMatch parameter. Leading and trailing spaces are trimmed from the applicationToMatch parameter value.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersInApplication(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the application name contains the specified application name to match.
            </summary>
            <param name="applicationToMatch">The application to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetAllUsers">
            <summary>
            Gets a collection of all the users in the repository.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects representing all of the users in the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the repository in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. Use 0 to indicate the first page.</param>
            <param name="pageSize">The size of the page of results to return. pageIndex is zero-based.</param>
            <param name="totalRecords">The total number of users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects representing all the users in the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUser">
            <summary>
            Gets the information from the repository and updates the last-activity date/time stamp for the current logged-on membership user.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the current logged-on user.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUser(System.String)">
            <summary>
            Gets the information from the repository for the specified membership user.
            </summary>
            <param name="username">The name of the user to retrieve.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user. Null (Nothing) when the user was not found</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to want to look in other order of the order specifed bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Gets the information from the repository for the specified membership user with the specified authenication mode.
            </summary>
            <param name="username">The name of the user to retrieve.</param>
            <param name="mode">the mode of authentication of the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user. Null (Nothing) when the user was not found in the repository.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of values.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>The value of <paramref name="mode"/> is not defined in the list of supported authentication mode declared in the Visual Guard configuration file.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUserNameByEmail(System.String)">
            <summary>
            Gets a user name where the e-mail address for the user matches the specified e-mail address.
            </summary>
            <param name="emailToMatch">The e-mail address to search for. </param>
            <returns>The user name where the e-mail address for the user matches the specified e-mail address. If no match is found, a null reference (Nothing in Visual Basic) is returned.</returns>
            <remarks><para>GetUserNameByEmail can be used to retrieve the user name for a membership user in the case where a user does not know their user name, but does know their e-mail address. If more than one user in the data store has the same e-mail address, the first user name encountered is returned.</para>
            Leading and trailing spaces are trimmed from all parameter values.
            </remarks>
            <exception cref="T:System.ArgumentNullException">emailToMatch is null.</exception>
            <exception cref="T:System.ArgumentException">emailToMatch is empty or longer than 64 characters after trimming.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUserIdByEmail(System.String)">
            <summary>
            Gets the repository id of a user where the e-mail address matches the specified e-mail address.
            </summary>
            <param name="emailToMatch">The e-mail address to search for. </param>
            <returns>The repository id of the user where the e-mail address for the user matches the specified e-mail address. If no match is found, a null reference (Nothing in Visual Basic) is returned.</returns>
            <remarks><para><see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUserIdByEmail(System.String)"/> can be used to retrieve the user name for a membership user in the case where a user does not know their user name, but does know their e-mail address. If more than one user in the data store has the same e-mail address, the first user name encountered is returned.</para>
            Leading and trailing spaces are trimmed from all parameter values.
            </remarks>
            <exception cref="T:System.ArgumentNullException">emailToMatch is null.</exception>
            <exception cref="T:System.ArgumentException">emailToMatch is empty or longer than 64 characters after trimming.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.UpdateUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Updates the repository with the information for the specified user. 
            </summary>
            <param name="user">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object that represents the user to be updated and the updated information for the user.</param>
            <exception cref="T:System.ArgumentNullException">user is null.</exception>
            <exception cref="T:System.ArgumentException"> the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresUniqueEmail"/> is set to true and the email is not unique.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the supplied user name and password are valid.
            </summary>
            <param name="username">The name of the user to be validated.</param>
            <param name="password">The password for the specified user.</param>
            <returns>true if the supplied user name and password are valid; otherwise, false.</returns>
            <remarks>This method do not change the current user managed by Visual Guard. You must use the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> method to change the current user.
            <para>This method will update the number of invalid password attempts and can lock out the user if the password is invalid.</para></remarks>
            <exception cref="T:System.ArgumentNullException">username or password is null.</exception>
            <exception cref="T:System.ArgumentException"> username or password is empty or is longer than 64 characters after trimming.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.
            </summary>
            <value>true if the membership provider supports password reset; otherwise, false. </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <returns>A regular expression used to evaluate a password.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the repository is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the repository  is configured to require a unique e-mail address for each user name.
            </summary>
            <returns>true if the repository requires a unique e-mail address; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.MaxUsers">
            <summary>
            Gets the maximum number of users allowed in the repository according to the granted license.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembership.Count">
            <summary>
            Gets the number of users in the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUserById(System.String)">
            <summary>
            Gets the information from the repository for the user identified by the specified Visual Guard repository id.
            </summary>
            <param name="repositoryId">The Visual Guard repository id identifying the user to retrieve.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryId"/> is empty or is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GrantMembershipPermission(System.String)">
            <summary>
            Grants the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to grant membership permission for. </param>
            <returns>true if the membership permission was successfully granted; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.GrantMembershipPermission(System.String,System.Guid)">
            <summary>
            Grants the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to grant membership permission for. </param>
            <param name="applicationId">The application Id of the application you want to revoke membership permission for. </param>
            <returns>true if the membership permission was successfully granted; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.RevokeMembershipPermission(System.String)">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to revoke membership permission for. </param>
            <returns>true if the membership permission was successfully revoked; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.RevokeMembershipPermission(System.String,System.Guid)">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to revoke membership permission for. </param>
            <param name="applicationId">The application Id of the application you want to revoke membership permission for. </param>
            <returns>true if the membership permission was successfully revoked; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Updates the password question and answer for the membership user in the Visual Guard repository
            </summary>
            <param name="username">The user to update the password question and answer for. </param>
            <param name="password">The current password for the membership user.</param>
            <param name="newPasswordQuestion">The new password question value for the membership user.</param>
            <param name="newPasswordAnswer">The new password answer value for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">password is null
            <para>or</para>
            newPasswordQuestion is null and the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true.
            <para>or</para>
            newPasswordAnswer is null and newPasswordQuestion is not null or empty.
            <para>or</para>
            username is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            password or newPasswordAnswer is longer than  64 characters.
            <para>or</para>
            <para>newPasswordQuestion is empty or longer than 256 characters</para>
            <para>or</para>
            <para>newPasswordQuestion is empty or null and the repository property "Requires Question And Answer" is set to true.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <para>
            <code lang="CSharp">user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Updates the password for the membership user in the Visual Guard repository.
            </summary>
            <param name="username">The user to update the password for. </param>
            <param name="oldPassword">The current password for the membership user.</param>
            <param name="newPassword">The new password for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> or <paramref name="oldPassword"/> or <paramref name="newPassword"/>is null
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="oldPassword"/> or <paramref name="newPassword"/> is longer than  64 characters.
            <para>
            <paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.UnlockUser(System.String)">
            <summary>Clears the user's locked-out status so that the membership user can be validated.</summary>
            <returns>true if the membership user was successfully unlocked; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to clear the locked-out status for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.LockUser(System.String)">
            <summary>Clears the user's locked-out status so that the membership user can be unvalidated.</summary>
            <returns>true if the membership user was successfully locked; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to clear the unlocked-out status for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.ApproveUser(System.String)">
            <summary>Approved a user.</summary>
            <returns>true if the membership user was successfully approved; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to approved for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.DisapproveUser(System.String)">
            <summary>Disappove a user</summary>
            <returns>true if the membership user was successfully disapprove; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to disaprove for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembership.ConvertUsernameToRepositoryId(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Converts the username of a user to a Visual Guard unique repository id for the specified authentication mode
            </summary>
            <param name="username">the username to convert</param>
            <param name="mode">the Visual Guard authentication mode</param>
            <returns>A Visual Guard unique repository id</returns>
            <remarks>The Visual Guard unique repository id is used by Visual Guard to identify uniquely a user account in a Visual Guard repository.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty.
            <para>- or -</para>
            <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> and is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>- or -</para>
            <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> and <paramref name="username"/> cannot be converted to a valid SID.
            <para>- or -</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus">
            <summary>
            Describes the result of a <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String)"/> operation. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.Success">
            <summary>
            The user was successfully created.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidUserName">
            <summary>
            The user name was not found in the repository or the user name is null or is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidPassword">
            <summary>
            The password is not formatted correctly or is null or is longer than 64 characters.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidQuestion">
            <summary>
            The password question is not formatted correctly
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidAnswer">
            <summary>
            The password answer is not formatted correctly
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidEmail">
            <summary>
            The e-mail address is not formatted correctly.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidComment">
            <summary>
            The comment is not formatted correctly. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.DuplicateUserName">
            <summary>
            The user name already exists in the repository. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.DuplicateEmail">
            <summary>
            The e-mail address already exists in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.UserRejected">
            <summary>
            The user was not created, for a reason defined by the provider.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.ProviderError">
            <summary>
            The provider returned an error that is not described by other values.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.TooManyUsers">
            <summary>
            The maximum number of users allowed in the repository by the license has been reached.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus.InvalidWindowsAccount">
            <summary>
            The specified NT account is not a valid. 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">
            <summary>
            Exception thrown when an action generates an exception.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException"/> class.
            </summary>
            <param name="message">A description of the reason for the exception.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.#ctor(Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException"/> class.
            </summary>
            <param name="statusCode">A VGMembershipCreateStatus enumeration value that describes the reason for the exception.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException"/> class.
            </summary>
            <param name="message">A description of the reason for the exception.</param>
            <param name="innerException">The exception that caused the MembershipCreateUserException.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode">
            <summary>
            Gets a description of the reason for the exception. 
            </summary>
            <value>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> enumeration value that describes the reason for the exception.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object. 
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">A StreamingContext that specifies the destination for this serialization.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipInstance">
            <summary>
            Validates user credentials and manages user settings for a specific security runtime.
            </summary>
            <remarks>This class is used by WinForm application to manage user settings. The Membership class provides the same facilities as the <c>System.Web.Security.Membership</c> class:
            <ul><li>
            <p>Creating new users.</p>
            </li><li>
            <p>Storing membership information (user names, passwords, e-mail addresses, and supporting data) in a Visual Guard repository.</p>
            </li><li>
            <p>Managing passwords, which includes creating, changing, retrieving, and resetting them, and so on. You can optionally configure the Visual Guard repository to require a password question and answer to authenticate password reset or retrieval requests for users that have forgotten their password.</p>
            </li></ul>
            This class can interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoles"/> class to manage user membership in roles for authorization checking.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ValidatingPassword">
            <summary>
            Occurs when a user is created, a password is changed, or a password is reset.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipInstance"/> for the specified <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> instance.
            </summary>
            <param name="runtime">The <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used to load the information.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUserForCurrentApplication(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository for a current application.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.String)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.String,System.String)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. </returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.String,System.String,System.Guid)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. </returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.Security.SecureString,System.String,System.String,System.String,System.Boolean,System.String,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="securePassword">The secureString password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="firstName">The first name of the user.</param>
            <param name="lastName">The last name of the user.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,System.Guid,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new user to the Visual Guard repository.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password-question value for the membership user.</param>
            <param name="passwordAnswer">The password-answer value for the membership user.</param>
            <param name="isApproved">A Boolean value that indicates whether the new user is approved to log on.</param>
            <param name="comment">Specific information for the user.</param>
            <param name="firstName">The first name of the user.</param>
            <param name="lastName">The last name of the user.</param>
            <param name="mustChangePasswordAtNextLogon">A Boolean value that indicates whether the new user must change the password at next logon.</param>
            <param name="groupId">A group of the user .</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the user was created successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <remarks>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DuplicateVGUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.String,System.String,System.String,System.String,System.String,System.Boolean,Novalys.VisualGuard.Security.VGDuplicateUserEventArgs,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Duplicates a VisualGuard user from the given user.
            </summary>
            <param name="userToDuplicateFrom">(VGMembershipUser) User to duplicate from</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="email">Email</param>        
            <param name="passwordQuestion">Password Question</param>
            <param name="passwordAnswer">Password Answer</param>
            <param name="mustChangePasswordAtNextLogon">Must change password at next logon</param>
            <param name="eventArgsDuplicateUser">Event args</param>
            <param name="status">Status for duplicating user</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DuplicateVGUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,Novalys.VisualGuard.Security.VGDuplicateUserEventArgs,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Duplicates a VisualGuard user from the given user.
            </summary>
            <param name="userToDuplicateFrom">(VGMembershipUser) User to duplicate from</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <param name="email">Email</param>
            <param name="firstname">Firstname</param>
            <param name="lastname">Lastname</param>
            <param name="passwordQuestion">Password Question</param>
            <param name="passwordAnswer">Password Answer</param>
            <param name="mustChangePasswordAtNextLogon">Must change password at next logon</param>
            <param name="eventArgsDuplicateUser">Event args</param>
            <param name="status">Status for duplicating user</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DuplicateWindowAccountUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Domain.ActiveDirectory.VGIActiveDirectoryAccount,Novalys.VisualGuard.Security.VGDuplicateUserEventArgs,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Duplicates window account
            </summary>
            <param name="userToDuplicateFrom">VGMembershipUser to duplicate from</param>
            <param name="entityWindowAccount">VGIActiveDirectoryAccount - windowaccount</param>
            <param name="eventArgsDuplicateUser">eventArgs</param>
            <param name="status">user creation status </param>
            <returns>Duplicated VGMembershipUser</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DuplicateWindowAccountUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.Security.Principal.NTAccount,Novalys.VisualGuard.Security.VGDuplicateUserEventArgs,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Duplicates window account
            </summary>
            <param name="userToDuplicateFrom">VGMembershipUser to duplicate from</param>
            <param name="WindowAccount">NTAccount - windowaccount</param>
            <param name="eventArgsDuplicateUser">eventArgs</param>
            <param name="status">user creation status </param>
            <returns>Duplicated VGMembershipUser</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetWindowsAccount(System.Security.Principal.NTAccount)">
            <summary>
            Gets the information from the repository for the specified Windows account.
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account that will be added to the repository.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.AddWindowsAccount(System.Security.Principal.NTAccount)">
            <summary>
            Adds a new windows account to the Visual Guard repository.
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account that will be added to the repository.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <remarks>This method is available only for the .Net framework version 2.0 or later</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.AddWindowsAccount(System.Security.Principal.NTAccount,System.Guid)">
            <summary>
            Adds a new windows account to the Visual Guard repository.
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account that will be added to the repository.</param>
            <param name="groupId">A <see cref="T:System.Guid"/> object representing groupId </param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException">The user was not created. Check the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipCreateUserException.StatusCode"/> property for a VGMembershipCreateStatus value. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <remarks>This method is available only for the .Net framework version 2.0 or later</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.AddWindowsAccount(System.Security.Principal.NTAccount,System.Guid,Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus@)">
            <summary>
            Adds a new windows account to the Visual Guard repository.
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object representing the windows account that will be added to the repository.</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipCreateStatus"/> indicating that the account was added successfully or the reason creation failed.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object for the newly created user. null value when the creation fails.</returns>
            <remarks>This method is available only for the .Net framework version 2.0 or later.
            <para>When a default role is defined for your application, the default role is automatically granted to the user. You can define a default role to your application in the Visual Guard console.</para></remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DeleteWindowsAccount(System.Security.Principal.NTAccount)">
            <summary>
            Deletes a windows account from the repository. 
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object represnting the windows account to delete.</param>
            <returns>true if the account was deleted; otherwise, false.</returns>
            <remarks>This method deletes the user even if the account is a member of another application.
            <para>This method is available only for the .Net framework version 2.0 or later</para></remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DeleteWindowsAccount(System.Security.Principal.NTAccount,System.Boolean)">
            <summary>
            Deletes a windows account from the repository. 
            </summary>
            <param name="account">A <see cref="T:System.Security.Principal.NTAccount"/> object represnting the windows account to delete.</param>
            <param name="forAllApplications">true if the account must be deleted even the account is a member of another application, false otherwise</param>
            <returns>true if the account was deleted; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">The account is a member of an another application and the <paramref name="forAllApplications"/> not equal to true.
            <P>- or </P>
            The account is a master administrator of the console.</exception>
            <remarks>This method is available only for the .Net framework version 2.0 or later</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DeleteUser(System.String)">
            <summary>
            Deletes a user from the repository. 
            </summary>
            <param name="username">The name of the user to delete.</param>
            <returns>true if the user was deleted; otherwise, false.</returns>
            <remarks>This method deletes the user even if the user is a member of another application.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DeleteUserById(System.String,System.Boolean)">
            <summary>
            Deletes a user specified by its repository id from the repository. 
            </summary>
            <param name="repositoryId">The repository id of the user to delete.</param>
            <param name="forAllApplications">true if the user must be deleted even the user is a member of another application, false otherwise</param>
            <returns>true if the user was deleted; otherwise, false.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">The user is a member of an another application and the <paramref name="forAllApplications"/> not equal to true.
            <P>-or-</P>
            The user is a master administrator of the console.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryId"/> is empty or is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DeleteUser(System.String,System.Boolean)">
            <summary>
            Deletes a user from the repository. 
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="forAllApplications">true if the user must be deleted even the user is a member of another application, false otherwise</param>
            <returns>true if the user was deleted; otherwise, false.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGIsMemberOfAnotherApplicationException">The user is a member of an another application and the <paramref name="forAllApplications"/> not equal to true.
            <P>-or- </P>
            The user is a master administrator of the console.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByEmail(System.String)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for. this expression must be a valid regular expression.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the emailToMatch parameter. Leading and trailing spaces are trimmed from the emailToMatch parameter value. </returns>
            <remarks>Regular expression can be used in the emailToMatch parameter value.</remarks>
            <exception cref="T:System.ArgumentException">emailToMatch is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users, in a page of data, where the e-mail address contains the specified e-mail address to match. 
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            emailToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="emailToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByEmail(System.String,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users, in a page of data, where the e-mail address contains the specified e-mail address to match. 
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            emailToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>     
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="emailToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByName(System.String)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="usernameToMatch"/> parameter. Leading and trailing spaces are trimmed from the usernameToMatch parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="usernameToMatch"/> is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByName(System.String,System.Guid)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="applicationId">The Guid of the application to search in.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="usernameToMatch"/> parameter. Leading and trailing spaces are trimmed from the usernameToMatch parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="usernameToMatch"/> is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            usernameToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByName(System.String,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            usernameToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@,System.Guid)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="applicationId">The Guid of the application to search in.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            usernameToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByName(System.String,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@,System.Guid)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="applicationId">The Guid of the application to search in.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            usernameToMatch is longer than 64 characters.
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByAuthenticationMode(Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Gets a collection of membership users where the user authentication mode contains the specified user authentication mode to match.
            </summary>
            <param name="authenticationModeToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> object that represents the user authentication mode to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="authenticationModeToMatch"/> parameter. Leading and trailing spaces are trimmed from the usernameToMatch parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="authenticationModeToMatch"/> parameter value.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByAuthenticationMode(Novalys.VisualGuard.Security.VGAuthenticationMode,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user authentication mode contains the specified user authentication mode to match.
            </summary>
            <param name="authenticationModeToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> object that represents the user authentication mode to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="authenticationModeToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByAuthenticationMode(Novalys.VisualGuard.Security.VGAuthenticationMode,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user authentication mode contains the specified user authentication mode to match.
            </summary>
            <param name="authenticationModeToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> object that represents the user authentication mode to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="authenticationModeToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByAuthenticationMode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the moduleName contains the specified moduleName to match.
            </summary>
            <param name="moduleName">ModuleName</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="authenticationModeToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByAuthenticationMode(System.String,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the moduleName contains the specified moduleName to match.
            </summary>
            <param name="moduleName">ModuleName</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="authenticationModeToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindInactiveUsersByLastActivityDate(System.DateTime,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users which are inactive since provided Date.
            </summary>
            <param name="date">Provide date to search records since</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - ascending or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>Membership users which are inactive (no activities identified for these users) since provided Date.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindInactiveUsersByLastActivityDate(System.DateTime,System.Boolean,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users which are inactive since provided Date.
            </summary>
            <param name="date">Provide date to search records since</param>
            <param name="isExcludeNewlyCreatedNotauthenticatedUsers">is to exclude newly created but not authenticated users in the result</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - ascending or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>Membership users which are inactive (no activities identified for these users) since provided Date.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByFirstName(System.String)">
            <summary>
            Gets a collection of membership users where the first name contains the specified name to match.
            </summary>
            <param name="lastNameToMatch">The first name to search for. Empy string or null is equal to '*'.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="lastNameToMatch"/> parameter. Leading and trailing spaces are trimmed from the <paramref name="lastNameToMatch"/> parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the usernameToMatch parameter value.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="firstNameToMatch"/> is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByFirstName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the first name contains the specified name to match.
            </summary>
            <param name="firstNameToMatch">The first name to search for. Empy string or null is equal to '*'.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="firstNameToMatch"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="firstNameToMatch"/> is longer than 256 characters.
            <para>-or -</para>
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="firstNameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByFirstName(System.String,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the first name contains the specified name to match.
            </summary>
            <param name="firstNameToMatch">The first name to search for. Empy string or null is equal to '*'.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="firstNameToMatch"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="firstNameToMatch"/> is longer than 256 characters.
            <para>-or -</para>
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="firstNameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByLastName(System.String)">
            <summary>
            Gets a collection of membership users where the last name contains the specified name to match.
            </summary>
            <param name="lastNameToMatch">The last name to search for. Empy string or null is equal to '*'.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="lastNameToMatch"/> parameter. Leading and trailing spaces are trimmed from the <paramref name="lastNameToMatch"/> parameter value.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the usernameToMatch parameter value.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="lastNameToMatch"/> is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByLastName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the last name contains the specified name to match.
            </summary>
            <param name="lastNameToMatch">The last name to search for. Empy string or null is equal to '*'.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="lastNameToMatch"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="lastNameToMatch"/> is longer than 256 characters.
            <para>-or -</para>
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="lastNameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByLastName(System.String,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the last name contains the specified name to match.
            </summary>
            <param name="lastNameToMatch">The last name to search for. Empy string or null is equal to '*'.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="lastNameToMatch"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="lastNameToMatch"/> is longer than 256 characters.
            <para>-or -</para>
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="lastNameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByState(Novalys.VisualGuard.Security.VGMemberShipUserState)">
            <summary>
            Gets a collection of membership users where the user state is Locked / Unlocked or Approved / UnApproved.
            </summary>
            <param name="stateToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGMemberShipUserState"/> object that represents the user state to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="stateToMatch"/> parameter.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByState(Novalys.VisualGuard.Security.VGMemberShipUserState,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user state is Locked / Unlocked or Approved / UnApproved.
            </summary>
            <param name="stateToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGMemberShipUserState"/> object that represents the user state to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="lastNameToMatch"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersByState(Novalys.VisualGuard.Security.VGMemberShipUserState,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user state is Locked / Unlocked or Approved / UnApproved.
            </summary>
            <param name="stateToMatch">A <see cref="T:Novalys.VisualGuard.Security.VGMemberShipUserState"/> object that represents the user state to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="lastNameToMatch"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersWithoutApplications">
            <summary>
            Gets a collection of membership users where the user is without applications.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users without application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersWithoutApplications(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user is without applications.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersWithoutApplications(System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user is without applications.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="pageIndex"/> is less than 0.
            <para>-or -</para>
            <paramref name="pageSize"/> is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersInApplication(System.Guid)">
            <summary>
            Gets a collection of membership users where the application name contains the specified application name to match.
            </summary>
            <param name="applicationToMatch">The application name to search for.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains all users that match the <paramref name="usernameToMatch"/> parameter. Leading and trailing spaces are trimmed from the usernameToMatch parameter value.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="usernameToMatch"/> is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersInApplication(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the application name contains the specified application name to match.
            </summary>
            <param name="applicationToMatch">The application name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersInApplication(System.Guid,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the application name contains the specified application name to match.
            </summary>
            <param name="applicationToMatch">The application name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.FindUsersInApplication(Novalys.VisualGuard.Security.Membership.VGApplication,System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of membership users where the application to match.
            </summary>
            <param name="applicationToMatch">The application object - VGApplication.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> that contains a page of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects beginning at the page specified by pageIndex.</returns>
            <para>-or -</para>
            pageIndex is less than 0.
            <para>-or -</para>
            pageSize is less than 1.
            <para>-or -</para>
            pageSize multiplied by pageIndex, plus pageSize, minus 1 is greater than <see cref="F:System.Int32.MaxValue"/>
            
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetAllUsers">
            <summary>
            Gets a collection of all the users in the repository.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects representing all of the users in the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the repository in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. Use 0 to indicate the first page.</param>
            <param name="pageSize">The size of the page of results to return. pageIndex is zero-based.</param>
            <param name="totalRecords">The total number of users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects representing all the users in the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetAllUsers(System.Int32,System.Int32,Novalys.VisualGuard.Security.Common.VGPrincipalSortByColumnType,Novalys.VisualGuard.Security.Common.VGSortOrderType,System.Int32@)">
            <summary>
            Gets a collection of all the users in the repository in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. Use 0 to indicate the first page.</param>
            <param name="pageSize">The size of the page of results to return. pageIndex is zero-based.</param>
            <param name="sortBy">Column to sort by - VGPrincipalSortByColumnType</param>
            <param name="sortOrder">Sorting Order - Ascedning or descending (VGSortOrderType)</param>
            <param name="totalRecords">The total number of users.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects representing all the users in the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUser">
            <summary>
            Gets the information from the repository and updates the last-activity date/time stamp for the current logged-on membership user.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the current logged-on user.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Gets the information from the repository for the specified membership user with the specified authenication mode.
            </summary>
            <param name="username">The name of the user to retrieve.</param>
            <param name="mode">the mode of authentication of the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user. Null (Nothing) when the user was not found in the repository.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUser(System.String)">
            <summary>
            Gets the information from the repository for the specified membership user.
            </summary>
            <param name="username">The name of the user to retrieve.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user. Null (Nothing) when the user was not found</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to want to look in other order of the order specifed bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUserById(System.String)">
            <summary>
            Gets the information from the repository for the user identified by the specified Visual Guard repository id.
            </summary>
            <param name="repositoryId">The Visual Guard repository id identifying the user to retrieve.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the specified user.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryId"/> is empty or is longer than 256 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUserNameByEmail(System.String)">
            <summary>
            Gets a user name where the e-mail address for the user matches the specified e-mail address.
            </summary>
            <param name="emailToMatch">The e-mail address to search for. </param>
            <returns>The user name where the e-mail address for the user matches the specified e-mail address. If no match is found, a null reference (Nothing in Visual Basic) is returned.</returns>
            <remarks><para>GetUserNameByEmail can be used to retrieve the user name for a membership user in the case where a user does not know their user name, but does know their e-mail address. If more than one user in the data store has the same e-mail address, the first user name encountered is returned.</para>
            Leading and trailing spaces are trimmed from all parameter values.
            </remarks>
            <exception cref="T:System.ArgumentNullException">emailToMatch is null.</exception>
            <exception cref="T:System.ArgumentException">emailToMatch is empty or longer than 64 characters after trimming.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUserIdByEmail(System.String)">
            <summary>
            Gets the repository id of a user where the e-mail address matches the specified e-mail address.
            </summary>
            <param name="emailToMatch">The e-mail address to search for. </param>
            <returns>The repository id of the user where the e-mail address for the user matches the specified e-mail address. If no match is found, a null reference (Nothing in Visual Basic) is returned.</returns>
            <remarks><para><see cref="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetUserIdByEmail(System.String)"/> can be used to retrieve the user name for a membership user in the case where a user does not know their user name, but does know their e-mail address. If more than one user in the data store has the same e-mail address, the first user name encountered is returned.</para>
            Leading and trailing spaces are trimmed from all parameter values.
            </remarks>
            <exception cref="T:System.ArgumentNullException">emailToMatch is null.</exception>
            <exception cref="T:System.ArgumentException">emailToMatch is empty or longer than 64 characters after trimming.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.UpdateUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Updates the repository with the information for the specified user. 
            </summary>
            <param name="user">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object that represents the user to be updated and the updated information for the user.</param>
            <exception cref="T:System.ArgumentNullException">user is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RequiresUniqueEmail"/> property is set to true and the email is not unique or is empty or is longer than 64 characters.
            <para>-or-</para>
            the comment is longer than 1024 characters
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <exception cref="T:System.InvalidOperationException">The Visual Guard Security Runtime used to write modification to the repository is not the same as the runtime used to read the information about the user.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GrantMembershipPermission(System.String)">
            <summary>
            Grants the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to grant membership permission for. </param>
            <returns>true if the membership permission was successfully granted; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GrantMembershipPermission(System.String,System.Guid)">
            <summary>
            Grants the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to grant membership permission for. </param>
            <returns>true if the membership permission was successfully granted; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RevokeMembershipPermission(System.String)">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to revoke membership permission for. </param>
            <returns>true if the membership permission was successfully revoked; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RevokeMembershipPermission(System.String,System.Guid)">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="username">The user to revoke membership permission for. </param>
            <returns>true if the membership permission was successfully revoked; otherwise, false. A value of false is also returned if the user does not exist in the repository.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RevokeMembershipPermission(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RevokeMembershipPermission(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <param name="user"></param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Updates the password question and answer for the membership user in the Visual Guard repository
            </summary>
            <param name="username">The user to update the password question and answer for. </param>
            <param name="password">The current password for the membership user.</param>
            <param name="newPasswordQuestion">The new password question value for the membership user.</param>
            <param name="newPasswordAnswer">The new password answer value for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">password is null
            <para>or</para>
            newPasswordQuestion is null and the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true.
            <para>or</para>
            newPasswordAnswer is null and newPasswordQuestion is not null or empty.
            <para>or</para>
            username is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            password or newPasswordAnswer is longer than  64 characters.
            <para>or</para>
            <para>newPasswordQuestion is empty or longer than 256 characters</para>
            <para>or</para>
            <para>newPasswordQuestion is empty or null and the repository property "Requires Question And Answer" is set to true.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <para>
            <code lang="CSharp">user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String)">
            <summary>
            Updates the password question and answer for the membership user in the Visual Guard repository
            </summary>
            <param name="username">The user to update the password question and answer for. </param>
            <param name="password">The current password for the membership user.</param>
            <param name="newPasswordQuestion">The new password question value for the membership user.</param>
            <param name="newPasswordAnswer">The new password answer value for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">password is null
            <para>or</para>
            newPasswordQuestion is null and the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true.
            <para>or</para>
            newPasswordAnswer is null and newPasswordQuestion is not null or empty.
            <para>or</para>
            username is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            password or newPasswordAnswer is longer than  64 characters.
            <para>or</para>
            <para>newPasswordQuestion is empty or longer than 256 characters</para>
            <para>or</para>
            <para>newPasswordQuestion is empty or null and the repository property "Requires Question And Answer" is set to true.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <para>
            <code lang="CSharp">user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePasswordByAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Change password by answer, works only for Visual Guard User
            </summary>
            <param name="username">Username of visual-guard user</param>
            <param name="answer">answer of your user</param>
            <param name="newPassword">new password to define for this user</param>
            <param name="passwordConfirmation">new password to define for this user</param>
            <returns>Return a status of ChangePassword</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Updates the password for the membership user in the Visual Guard repository.
            </summary>
            <param name="username">The user to update the password for. </param>
            <param name="oldPassword">The current password for the membership user.</param>
            <param name="newPassword">The new password for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> or <paramref name="oldPassword"/> or <paramref name="newPassword"/>is null
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="oldPassword"/> or <paramref name="newPassword"/> is longer than  64 characters.
            <para>
            <paramref name="username"/> is empty or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePassword(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential,System.String,System.String,System.String)">
            <summary>
            Changes password.
            </summary>
            <param name="credential"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <param name="passwordConfirmation"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Change password only for Visual-Guard User
            </summary>
            <param name="username"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <param name="passwordConfirmation"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.UnlockUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.UnlockUser(System.String)">
            <summary>Clears the user's locked-out status so that the membership user can be validated.</summary>
            <returns>true if the membership user was successfully unlocked; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to clear the locked-out status for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.LockUser(System.String)">
            <summary>Clears the user's unlocked-out status so that the membership user can be validated.</summary>
            <returns>true if the membership user was successfully locked; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to clear the unlocked-out status for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ApproveUser(System.String)">
            <summary>Approved a user.</summary>
            <returns>true if the membership user was successfully approved; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to approved for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DisapproveUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.DisapproveUser(System.String)">
            <summary>Disappove a user</summary>
            <returns>true if the membership user was successfully disapprove; otherwise, false. A value of false is also returned if the user does not exist in the database.</returns>
            <param name="username">The name of the membership user to disaprove for.</param>
            <exception cref="T:System.ArgumentException"><paramref name="username"/> is an empty string, is longer than 64 characters, or contains invalid characters ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the supplied user name and password are valid.
            </summary>
            <param name="username">The name of the user to be validated.</param>
            <param name="password">The password for the specified user.</param>
            <returns>true if the supplied user name and password are valid; otherwise, false.</returns>
            <remarks>This method do not change the current user managed by Visual Guard. You must use the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> method to change the current user.
            <para>This method will update the number of invalid password attempts and can lock out the user if the password is invalid.</para></remarks>
            <exception cref="T:System.ArgumentNullException">username or password is null.</exception>
            <exception cref="T:System.ArgumentException">username is empty  or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            user or password is longer than 64 characters.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> mode.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ResetPassword(System.String)">
            <summary>
            Resets to random generated password for current user by providing valid answer
            </summary>
            <param name="passwordAnswer">Answer to reset the password</param>
            <returns>Returns radom generated password by system</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ResetPassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.String)">
            <summary>
            Resets to random generated password for a user by providing valid answer
            </summary>
            <param name="user">VGMembership User for whom to reset the password</param>
            <param name="passwordAnswer">Answer to reset the password</param>
            <returns>Returns radom generated password by system</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ResetPassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.String,Novalys.VisualGuard.Security.VGPasswordModificationStatus@)">
            <summary>
            Resets to random generated password for a user by providing valid answer
            </summary>
            <param name="user">VGMembership User for whom to reset the password</param>
            <param name="passwordAnswer">Answer to reset the password</param>
            <param name="status">Password modification status</param>
            <returns>Returns radom generated password by system</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ForcePassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.String@)">
            <summary>
            Sets the random generated password for the user.
            </summary>
            <param name="user">VGMembership User for whom to set the password</param>
            <param name="password">Randomly generated password by system.</param>
            <returns>Returns Password Modification Status</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetPassword">
            <summary>
            Gets the password of current user if supported by identity module and allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetPassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Gets the password of user if supported by identity module and allowed.
            </summary>
            <param name="user">VGMembership User for whom to get the password.</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.GetChangePasswordIdentifier(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.DateTime)">
            <summary>
            Gets the unique identifier key for the user and end date to change the password
            </summary>
            <param name="user">VGMembership User for whom to get the identifier.</param>
            <param name="endDate">End Date</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ChangePassword(System.String,System.String)">
            <summary>
            Changes the password based on request identifier key provided by GetChangePasswordIdentifier method and sets new password.
            </summary>
            <param name="requestIdentifier">Request Identifier key to change the password</param>
            <param name="newPassword">New password to set for the user</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.ForcePassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.String)">
            <summary>
            Sets the new password of the user.
            </summary>
            <param name="user">VGMembershipUser object</param>
            <param name="newPassword">New password to set for user</param>
            <returns>Returns Password Modification Status</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.
            </summary>
            <value>true if the membership provider supports password reset; otherwise, false. </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <returns>A regular expression used to evaluate a password.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the repository is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the repository  is configured to require a unique e-mail address for each user name.
            </summary>
            <returns>true if the repository requires a unique e-mail address; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.MaxUsers">
            <summary>
            Gets the maximum number of users allowed in the repository according to the granted license.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.Count">
            <summary>
            Gets the number of users in the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportResetPassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            If the user support a reset passord
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedResetPassword(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            If the user support a reset passord
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedActivityDate(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            You can know if the user have StartDate and EndDate fonctionnality
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedApproval(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            You can know if the user have Approve or Disapprove fonctionnality
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedLastActivityRead(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            You can watch the Last Activity Date
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedLastLoginRead(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            You can watch the last login
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedLock(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            You can know if the user supported lock and unlock
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedPasswordAnswerAndQuestion(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            You can know if the user supported Password Anwers and the question
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedEmail(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Support write and read email on user provide in parameter
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedEmailRead(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Support read email on user provide in parameter
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedSetProfileAttributeValue(System.String,System.Collections.Generic.List{Novalys.VisualGuard.Security.Membership.VGProfileAttribute})">
            <summary>
            If the user can set the profileattribute's value
            </summary>
            <param name="moduleName">Identity Module Name</param>
            <param name="attributes">List of VGProfileAttribute</param>
            <returns>Checks If user can set the profileattribute's value else returns false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipInstance.VGMemberShipUserSupported.SupportedSetProfileAttributeValue(System.String,Novalys.VisualGuard.Security.Membership.VGProfileAttribute)">
            <summary>
            If the user can set the profileattribute's value
            </summary>
            <param name="moduleName">Identity Module Name</param>
            <param name="attribute">VGProfileAttribute</param>
            <returns>True If user can set the profileattribute's value else returns false.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">
            <summary>
            The exception that is thrown when a password cannot be retrieved from the Visual Guard repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.#ctor(System.String,Novalys.VisualGuard.Security.VGPasswordModificationStatus)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> enumeration value that describes the reason for the exception.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.</summary>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination. </param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown. </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.#ctor(System.String,Novalys.VisualGuard.Security.VGPasswordModificationStatus,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="status">A <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> enumeration value that describes the reason for the exception.</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException.Status">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> enumeration value that describes the reason for the exception.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser">
             <summary>
             Exposes and updates membership user information in the Visual Guard repository.
             </summary>
             <remarks>
             The <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object is used to represent a single membership user in the Visual Guard repository. It exposes information about the membership user such as the e-mail address, and provides functionality for the membership user such as the ability to reset his or her password.
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object is returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetUser(System.String)"/> and <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.CreateUser(System.String,System.String)"/> methods or as part of a <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.GetAllUsers"/>, <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByName(System.String)"/>, and <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.FindUsersByEmail(System.String)"/> methods.</p>
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object is required by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGMembership.UpdateUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)"/> method when you want to update the information for an existing membership user.</p>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUser.DefaultInvalidCharsForName">
            <summary>
            An array of chars containing the list of invalid chars for a name ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Runtime">
            <summary>
            Return the current Runtime
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IdentityInformation">
            <summary>
            Return the information of the user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ChangePassword(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Updates the password for the membership user in the Visual Guard repository.
            </summary>
            <param name="oldPassword">The current password for the membership user.</param>
            <param name="newPassword">The new password for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ChangePassword(System.String,System.String)">
            <summary>
            Updates the password for the membership user in the Visual Guard repository.
            </summary>
            <param name="oldPassword">The current password for the membership user.</param>
            <param name="newPassword">The new password for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String)">
            <summary>
            Updates the password question and answer for the membership user in the Visual Guard repository
            </summary>
            <param name="password">The current password for the membership user.</param>
            <param name="newPasswordQuestion">The new password question value for the membership user.</param>
            <param name="newPasswordAnswer">The new password answer value for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">password is null
            <para>or</para>
            newPasswordQuestion is null and the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true.
            <para>or</para>
            newPasswordAnswer is null and newPasswordQuestion is not null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">password or newPasswordAnswer is longer than  64 characters.
            <para>or</para>
            <para>newPasswordQuestion is empty or longer than 256 characters</para>
            <para>or</para>
            <para>newPasswordQuestion is empty or null and the repository property "Requires Question And Answer" is set to true.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <code lang="CSharp">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            <code lang="vb.net">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ResetPassword(System.String)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ChangePasswordQuestionAndAnswer(System.String,System.String)">
            <summary>
            Updates the password question and answer for the membership user in the Visual Guard repository
            </summary>
            <param name="newPasswordQuestion">The new password question value for the membership user.</param>
            <param name="newPasswordAnswer">The new password answer value for the membership user.</param>
            <returns>true if the update was successful; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">password is null
            <para>or</para>
            newPasswordQuestion is null and the <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true.
            <para>or</para>
            newPasswordAnswer is null and newPasswordQuestion is not null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">password or newPasswordAnswer is longer than  64 characters.
            <para>or</para>
            <para>newPasswordQuestion is empty or longer than 256 characters</para>
            <para>or</para>
            <para>newPasswordQuestion is empty or null and the repository property "Requires Question And Answer" is set to true.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <code lang="CSharp">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            <code lang="vb.net">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ResetPassword(System.String)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ResetPassword">
            <summary>
            Resets a user's password to a new, automatically generated password. 
            </summary>
            <returns>The new password for the membership user.</returns>
            <remarks>If the property "Enable Password Reset" of the repository is not set to true a <see cref="T:System.NotSupportedException"/> will be thrown.</remarks>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true.</para>
            or
            <para><see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.EnablePasswordReset"/> is not set to true.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ResetPassword(System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password. 
            </summary>
            <param name="passwordAnswer">The password answer for the membership user.</param>
            <returns>The new password for the membership user.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.EnablePasswordReset"/> is not set to true.
            <para>- or -</para>
            The user is not a Visual Guard account.</exception>
            <exception cref="T:System.ArgumentNullException">
            <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembership.RequiresQuestionAndAnswer"/> is set to true and the passwordAnswer is null.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">passwordAnswer is invalid.
            <para>- or -</para>
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <code lang="CSharp">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            <code lang="vb.net">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String)"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ChangePassword(System.Security.SecureString,System.Security.SecureString)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ToString">
            <summary>
            Returns the user name for the membership user.
            </summary>
            <returns>The Username for the membership user. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.UnlockUser">
            <summary>
            Clears the locked-out state of the user so that the membership user can be validated.
            </summary>
            <returns>true if the membership user was successfully unlocked; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Comment">
            <summary>
            Gets or sets repository-specific information for the membership user. 
            </summary>
            <exception cref="T:System.ArgumentException">the value is longer than 1024 characters </exception>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.CreationDate">
            <summary>
            Gets the date and time when the user was added to the repository. (Server Time)
            </summary>
            <value>The date and time when the user was added to the repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.CreationDateUniversal">
            <summary>
            Gets the date and time when the user was added to the repository. (Server Time)
            </summary>
            <value>The date and time when the user was added to the repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.CreationDateLT">
            <summary>
            Gets the date and time when the user was added to the repository. (Local Time)
            </summary>
            <value>The date and time when the user was added to the repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Email">
            <summary>
            Gets or sets the e-mail address for the membership user.
            </summary>
            <value>The e-mail address for the membership user.</value>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId">
            <summary>
            Gets the unique identifier of the information used to store in a repository
            </summary>
            <value>the unique identifier of the user used to store in a repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.FirstName">
            <summary>
            Gets or sets the first name of the membership user.
            </summary>
            <value>The first name of the membership user.</value>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetFirstName(System.String)">
            <summary>
            Sets firstname - via Profileattribute or property - purpose is to handle synchronization 
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastName">
            <summary>
            Gets or sets the first name of the membership user.
            </summary>
            <value>The last name of the membership user.</value>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetLastName(System.String)">
            <summary>
            Sets lastname - via Profileattribute or property - purpose is to handle synchronization
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Title">
            <summary>
            Gets the title of the membership user. 
            </summary>
            <value>The title of the membership user.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IsApproved">
            <summary>
            Gets or sets whether the membership user can be authenticated. 
            </summary>
            <value>true if the user can be authenticated; otherwise, false.</value>
            <remarks>if the user is not approved, the authentication process will always return failed even if the supplied user name and password are correct.</remarks>
            <exception cref="T:System.NotSupportedException">the user is not a Visual Guard user and cannot be modified.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IsLockedOut">
            <summary>
            Gets a value indicating whether the membership user is locked out and unable to be validated.
            </summary>
            <value>true if the membership user is locked out and unable to be validated; otherwise, false.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastActivityDate">
            <summary>
            Gets or sets the date and time when the membership user was last authenticated or accessed the repository
            </summary>
            <value>The date and time when the membership user was last authenticated or accessed the repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastActivityDateUniversal">
            <summary>
            Gets or sets the date and time when the membership user was last authenticated or accessed the repository
            </summary>
            <value>The date and time when the membership user was last authenticated or accessed the repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastLockoutDate">
            <summary>
            Gets the most recent date and time that the membership user was locked out.
            </summary>
            <value>A DateTime object that represents the most recent date and time that the membership user was locked out.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastLockoutDateUniversal">
            <summary>
            Gets the most recent date and time that the membership user was locked out.
            </summary>
            <value>A DateTime object that represents the most recent date and time that the membership user was locked out.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastLoginDate">
            <summary>
            Gets or sets the date and time when the user was last authenticated. 
            </summary>
            <value>The date and time when the user was last authenticated.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastLoginDateUniversal">
            <summary>
            Gets or sets the date and time when the user was last authenticated. 
            </summary>
            <value>The date and time when the user was last authenticated.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastModificationDate">
            <summary>
            Gets the date and time when the user was last modified. 
            </summary>
            <value>The date and time when the user was last modified.</value>
            <remarks>this date is not modified when the credentials are modified. This date is modified only when the roles granted to the user, the mail, the first name, the last name or the comment is modified.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastModification">
            <summary>
            Gets the date and time when the user was last modified. (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastModificationUniversal">
            <summary>
            Gets the date and time when the user was last modified. (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastModificationLT">
            <summary>
            Gets the date and time when the user was last modified. (Local Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastPasswordChangedDate">
            <summary>
            Gets the date and time when the membership user's password was last updated.
            </summary>
            <value>The date and time when the membership user's password was last updated.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.LastPasswordChangedDateUniversal">
            <summary>
            Gets the date and time when the membership user's password was last updated.
            </summary>
            <value>The date and time when the membership user's password was last updated.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.PasswordQuestion">
            <summary>
            Gets the password question for the membership user.
            </summary>
            <value>The password question for the membership user.</value>
            <remarks>Returns a null (Nothing in VB) if the user is nit a Visual Guard user</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.UserName">
            <summary>
            Gets the logon name of the membership user. 
            </summary>
            <value>The logon name of the membership user.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.StartDate">
            <summary>
            Gets start date for the membership user.
            </summary>
            <value>The start for the membership user.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.StartDateUniversal">
            <summary>
            Gets start date for the membership user.
            </summary>
            <value>The start for the membership user.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.EndDate">
            <summary>
            Gets the end date for the membership user.
            </summary>
            <value>The end date for the membership user.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.EndDateUniversal">
            <summary>
            Gets the end date for the membership user.
            </summary>
            <value>The end date for the membership user.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IsDirty">
            <summary>
            Gets a value indicating whether the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> has been modified.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.AuthenticationMode">
            <summary>
            Gets a value indicating the mode of authentication used by Visual Guard to authenticate the given user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.PasswordExpirationDate">
            <summary>
            Gets the password expiration date and time.
            </summary>
            <value><see cref="F:System.DateTime.MaxValue"/> when the password never expires, the expiration date and time otherwise</value>
            <remarks>Returns always <see cref="F:System.DateTime.MaxValue"/> for Windows and Database account.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.PasswordExpirationDateUniversal">
            <summary>
            Gets the password expiration date and time.
            </summary>
            <value><see cref="F:System.DateTime.MaxValue"/> when the password never expires, the expiration date and time otherwise</value>
            <remarks>Returns always <see cref="F:System.DateTime.MaxValue"/> for Windows and Database account.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IsPasswordExpired">
            <summary>
            Gets a boolean value that specifies whether the password for the user has expired.
            </summary>
            <value>false if the password is not expired, true otherwise.</value>
            <remarks>returns always false for Windows and database account.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.GraceLoginRemaining">
            <summary>
            Gets the number of logons that are allowed before the account is locked out.
            </summary>
            <value>The number of grace logons when the password must be changed. 0 when the account is already locked out. <see cref="F:System.Int32.MaxValue"/> if the password has not expired or if the number of grace logins is unlimited.</value>
            <remarks>returns always <see cref="F:System.Int32.MaxValue"/> for Windows and database account.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.MembershipPermission">
            <summary>
            Gets a value that indicates whether the current user can use Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.GrantMembershipPermission">
            <summary>
            Grants the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RevokeMembershipPermission">
            <summary>
            Revokes the permission to use the Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IsMemberOfAnotherApplication">
            <summary>
            Returns a boolean value indicating whether the user is a member of an application different from the current application
            </summary>
            <returns><c>true</c> when the user is a member of another application or is member of a shared role. <c>False</c> otherwise.</returns>
            <remarks>A user is a member of an application when this user is a member of a role of another application or a member of a shared role.
            <para>You can use the property <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ApplicationId"/> to determine the application for which the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> was created.</para>
            </remarks>
            <example>The following code show how to test if a user is a member of an application different from the current application:
            <code lang="vb.net">
            If user.IsMemberOfAnotherApplication Then
                MessageBox.Show(string.Format("'{0}' is a member of another application", user.UserName)
            End If
            </code>
            <code lang="c#">
            if (user.IsMemberOfAnotherApplication)
            {
                MessageBox.Show(string.Format("'{0}' is a member of another application", user.UserName);
            }
            </code>
            </example>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.IsMemberOfApplication">
            <summary>
            Returns a boolean value indicating whether the user is a member of the current application.
            </summary>
            <returns><c>true</c> when the user is a member of the current application. <c>False</c> otherwise.</returns>
            <remarks>A user is a member of an application when this user is member of a role of this application or member of shared role with a permission set of this application.
            <para>You can use the property <see cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ApplicationId"/> to determines the application for which the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> was created.</para>
            </remarks>
            <example>The following code show how to test if a user is a member of the current application:
            <code lang="vb.net">
            If user.IsMemberOfApplication Then
                MessageBox.Show(string.Format("'{0}' is a member of the application", user.UserName)
            End If
            </code>
            <code lang="c#">
            if (user.IsMemberOfApplication)
            {
                MessageBox.Show(string.Format("'{0}' is a member of the application", user.UserName);
            }
            </code>
            </example>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.MustChangePasswordAtNextLogon">
            <summary>
            Gets or sets a boolean value indicating when the password must be changed at next logon.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.ApplicationId">
            <summary>
            Gets the unique identifier of the application for which the user was created
            </summary>
            <value>The unique identifier of the application for which the user was created.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue(Novalys.VisualGuard.Security.UserProfile.VGProfileAttributeInformation,System.Object,Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            this variable will be used as a flag - to indicate from which way value is set.(Via property or Attribute), as we require both values to be sync
            value of properties(ex. firstname,lastname) can be set via profileattribute(as they are internal attributes) or directly via properties (ex.VGMembershipUser.Firstname).
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.GetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.String)">
            <summary>
            Gets value for particular contextual group's user profile value by property name.
            </summary>
            <param name="groupId">GroupId of contextual group which supports MultiUserProfile</param>
            <param name="propertyName">property name of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.GetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid)">
            <summary>
            Gets value for particular contextual group's user profile value by property Id.
            </summary>
            <param name="groupId">GroupId of contextual group which supports MultiUserProfile</param>
            <param name="propertyId">propertyId of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.GetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.String)">
            <summary>
            Gets value for particular contextual group's user profile value by property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="groupId">GroupId of contextual group which supports MultiUserProfile</param>
            <param name="propertyName">property name of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.GetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid)">
            <summary>
            Gets value for particular contextual group's user profile value by property Id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="groupId">GroupId of contextual group which supports MultiUserProfile</param>
            <param name="propertyId">propertyId of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.CheckIfGroupSupportsMultiUserProfile(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            checks if group supports multi user profile
            </summary>
            <param name="groupId">groupId</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue``1(System.String,``0)">
            <summary>
            Sets user profile value by propertyname.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">propertyName of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue``1(System.Guid,``0)">
            <summary>
            Sets user profile value by propertyId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.String,``0)">
            <summary>
            Sets user profile value for particular contextual group by propertyname.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyName">propertyName of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid,``0)">
            <summary>
            Sets user profile value for particular contextual group by propertyId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.String,System.Object)">
            <summary>
            Sets user profile value for particular contextual group by propertyname.
            </summary>
            <param name="group">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyName">propertyName of attribute</param>
            <param name="propertyValue">propertyValue</param>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUser.SetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid,System.Object)">
            <summary>
            Sets user profile value for particular contextual group by propertyId.
            </summary>
            <param name="group">Contextual group object for which you want to set user profile value.</param>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Id">
            <summary>
            Gets a id of the user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Name">
            <summary>
            Gets name of the user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.Type">
            <summary>
            Gets type of the entity
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.#ctor">
            <summary>
            Creates a new, empty membership user collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.#ctor(System.Int32)">
            <summary>
            Creates a new, empty membership user collection.
            </summary>
            <param name="capacity">the approximate number of elements that the collection can intially contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than zero. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.Add(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Adds the specified membership user to the collection.
            </summary>
            <param name="user">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object to add to the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.CopyTo(Novalys.VisualGuard.Security.Membership.VGMembershipUser[],System.Int32)">
            <summary>
            Copies the membership user collection to a one-dimensional array.
            </summary>
            <param name="array">A one-dimensional array of type <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> that is the destination of the elements copied from the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/>. The array must have zero-based indexing.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.Remove(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Removes the membership user object with the specified user name from the collection.
            </summary>
            <param name="name">The user name of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object to remove from the collection.</param>
            <param name="authenticationMode">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> value indicating the mode of authentication of the user.</param>
            <exception cref="T:System.ArgumentException">The authentication modes cannot be a combination of several modes.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.Remove(System.String)">
            <summary>
            Removes the membership user object with the specified user name from the collection.
            </summary>
            <param name="name">The user name of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object to remove from the collection.</param>
            <remarks>this method can only be used to remove Visual Guard user. You must specify the authentication mode to remove database or windows account.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.SetReadOnly">
            <summary>
            Makes the contents of the membership user collection read-only.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the membership user collection is thread safe.
            </summary>
            <value>Always false because thread-safe membership user collections are not supported.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.Item(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Gets the membership user in the collection referenced by the specified user name.
            </summary>
            <param name="name">The Username of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> to retrieve from the collection.</param>
            <param name="authenticationMode">the mode of authentication of the user.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the user.</returns>
            <exception cref="T:System.ArgumentException">The authentication mode cannot be a combination of several modes.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.Item(System.String)">
            <summary>
            Gets the membership user in the collection referenced by the specified user name.
            </summary>
            <param name="name">The Username of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> to retrieve from the collection.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> object representing the user if the user exists. null (Nothing in VB.Net) if the user does not exist in the collection.</returns>
            <remarks>this method can only be used to look for a Visual Guard user. You must specify the authentication mode to remove database or windows account.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection.GetSortedList(Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer)">
            <summary>
            Returns a sorted collection using the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer"/> object. 
            </summary>
            <param name="comparer">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer"/> object used to compare the members of the collection.</param>
            <returns>A sorted collection using the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer"/> object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer">
            <summary>Compares two <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUser"/> for equivalence.</summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.#ctor(Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn,System.Boolean,System.ComponentModel.ListSortDirection)">
            <summary>
            Creates a new instance of the class <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer"/>
            </summary>
            <param name="column">the column used to sort.</param>
            <param name="ignoreCase">indicates whether the comparison is case sensitive</param>
            <param name="sortDirection">indicates the sort direction</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects returns an indication of their relative values.
            </summary>
            <param name="x">the object to compare.</param>
            <param name="y">the object to compare.</param>
            <returns>Less than zero when x is less than y. Zero when x equals y. Greater than zero when x is greater than y.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.Compare(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Compares two users returns an indication of their relative values.
            </summary>
            <param name="x">the first user to compare.</param>
            <param name="y">the second user to compare.</param>
            <returns>Less than zero when x is less than y. Zero when x equals y. Greater than zero when x is greater than y.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn">
            <summary>
            The column used to sort a <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.UserName">
            <summary>
            Sort by username
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.RepositoryId">
            <summary>
            Sort by repository id
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.Email">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.CreationDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.LastModificationDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.LastLoginDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.LastLockoutDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGMembershipUserComparer.SortColumn.LastActivityDate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGModuleInstance.GetFeaturesInformation(System.String)">
            <summary>
            Get all modules (Visual-Guard and Custom) from storage
            </summary>
            <returns></returns>
            <summary>
            Get features' list for module.
            </summary>
            <param name="module"></param>
            <returns>returns features list for module.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGModuleInstance.IsModuleConfigurationSupported(System.String)">
            <summary>
            Returns true if module supports configuration of itself, else returns false
            </summary>
            <param name="moduleName">name of the module</param>
            <returns>true if module supports configuration of itself, else returns false</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMonitoringGraph">
            <summary>
            Represents a class for Monitoring information in Graph format.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMonitoringGraph.Title">
            <summary>
            Gets a Title for the Graph.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMonitoringGraph.XAxisTitle">
            <summary>
            Gets a XAxis Title for the Graph.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMonitoringGraph.YAxisTitle">
             <summary>
            Gets a YAxis Title for the Graph.
             </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMonitoringGraph.Id">
            <summary>
            Gets a unique id for the graph.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMonitoringGraph.lstGraphs">
            <summary>
            Gets a list of GraphSerieses.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGMonitoringInstance">
            <summary>
            Represents a Manager for Monitoring.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGMonitoringInstance.Runtime">
            <summary>
            Runtime
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMonitoringInstance.GetHistoricalGraph(System.DateTime,System.DateTime,Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDurationTypes,System.Collections.Generic.List{Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGIGraphSeries})">
            <summary>
            This method gets historical information in graph format for specified eventIds and parameters.
            </summary>
            <param name="startTime">StarTime</param>
            <param name="endTime">EndTime</param>
            <param name="durationType">Duration Type of graph. ex. hourly, daily, monthly etc.</param>
            <param name="lstGraphSeries">List of graph series, ex. SuccessfulLogins, BadLogins, etc.</param>
            <returns>VGMonitoringGraph object containing information to represent a  graph.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMonitoringInstance.GetAttendanceHoursGraph(System.DateTime,System.DateTime,System.Collections.Generic.List{Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGIGraphSeries})">
            <summary>
            This method gets attendance hours information in graph format for specified eventIds and parameters.
            </summary>
            <param name="startTime">startTime</param>
            <param name="endTime">endTime</param>
            <param name="lstGraphSeries">List of graph series, ex. SuccessfulLogins, BadLogins, etc.</param>
            <returns>VGMonitoringGraph object containing information to represent a  graph.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGMonitoringInstance.GetRealTimeGraph(System.DateTime,System.DateTime,System.Collections.Generic.List{Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGIGraphSeries})">
            <summary>
            This method gets realtime information in graph format for specified eventIds and parameters.
            </summary>
            <param name="startTime">startTime</param>
            <param name="endTime">endTime</param>
            <param name="lstGraphSeries">List of graph series, ex. SuccessfulLogins, BadLogins, etc.</param>
            <returns>VGMonitoringGraph object containing information to represent a graph.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.RefreshPasswordPolicy">
            <summary>
            Update the password policy from VGRepository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.CanUpdatePasswordPolicy">
            <summary>
            Return true if you can modify the password policy
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.RequiresUniqueEmail">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <value>The number of failed password answer attempts a user is allowed before the account is locked.</value>
            <remarks></remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the repository requires the user to answer a password question for password reset.
            </summary>
            <value>true if a password answer is required for password reset; otherwise, false.</value>
            <remarks>Requiring a password question and answer provides an additional layer of security when retrieving or resetting a user's password. Users can supply a question and answer when their user name is created that they can later use to reset a forgotten password.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate if the password.
            </summary>
            <value>A regular expression used to evaluate a password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.MinRequiredPasswordLength">
            <summary>
            Gets or sets the minimum length required for a password.
            </summary>
            <value>The minimum length required for a password.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.PasswordAttemptWindow">
            <summary>
            Gets the time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.
            </summary>
            <value>The time window during which consecutive failed attempts to provide a valid password or a valid password answer are tracked.</value>
            <remarks>This property works in conjunction with the <see cref="!:MaxInvalidPasswordAttempts"/> property to help guard against an unwanted source guessing the password or password answer of a membership user through repeated attempts.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.HistoryLength">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.GraceLoginsAllowed">
            <summary>
            Gets the number of times the user can log on after the password has expired.
            </summary>
            <value>the number of times the user can log on after the password has expired. <see cref="F:System.Int32.MaxValue"/> means that the grace logins are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.ConsecutiveBadLoginsAllowed">
            <summary>
            Gets or sets the maximum number of consecutive invalid password.
            </summary>
            <value>the maximum number of consecutive invalid password. <see cref="F:System.Int32.MaxValue"/> means that invalid password attempts are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the repository is configured to allow users to reset their passwords.
            </summary>
            <value>true the repository supports password reset; otherwise, false.</value>
            <remarks>Password reset is the ability for ASP.NET application to replace the current password for a user name with a new, randomly generated password when a user has forgotten their password or the current password is no longer valid.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets or sets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.GenerateNewPassword">
            <summary>
            Generate a new password for user
            </summary>
            <returns>Return a new password compliance with Password Policy</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPasswordPolicyInstance.Update">
            <summary>
            Save the password policy
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingInstance">
            <summary>
            Represents a class to manage Performance tracing activities for a specific <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object. 
            </summary>    
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingInstance.IsPerformanceTracingEnabled">
            <summary>
            Gets or sets Performance tracing is eabled or not
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingInstance.CleanUpPerformanceTracing">
            <summary>
            Cleanup the performance tracing for the local connection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingInstance.CleanUpGlobalPerformanceTracing">
            <summary>
            Cleanup all performance tracing for this instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingInstance.GetPerformanceTracingInformation">
            <summary>
            Gets performance tracing information for current connection only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingInstance.GetGlobalPerformanceTracingInformation">
            <summary>
            Gets global performance tracing information (for all connections to the repository).
            </summary>
            <returns><see cref="T:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingItem" ></see>List of VGPerformance element</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingItem">
            <summary>
            Represents a class to contain performance tracing item information
            </summary>    
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingItem.MethodName">
            <summary>
            Gets method name
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingItem.NumberOfCalls">
            <summary>
            Gets number of calls executed for this particular method
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingItem.TotalTime">
            <summary>
            Gets total time taken for executing number of times this particular method 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPerformanceTracingItem.AverageTimeTaken">
            <summary>
            Gets average time taken for executing one time this particular method
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPermission">
            <summary>
            Represente a permission of Visual-Guard
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.Id">
            <summary>
            Get the Id of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.LastModification">
            <summary>
            Get the last moditification of the current permission (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.LastModificationLT">
            <summary>
            Get the last modification of the current permission (Local Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.Name">
            <summary>
            Get or Set the name of the current permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.FullName">
            <summary>
            Get the full name of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.Description">
            <summary>
            Get or Set the description of the current permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.FolderId">
            <summary>
            Get the folder id of the current application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermission.ApplicationId">
            <summary>
            Get the application id fo the current permission
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPermissionAudit">
            <summary>
            This class represents permission information for auditing. (ex. Whether it is Granted to User or Role, whether it is inherited or not, etc.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.AuditInformationType">
            <summary>
            Gets auditInformaionType, whether audit information is for user, group, role or permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.Permission">
            <summary>
            Gets the VGIGrantedPermission object.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.PermissionName">
            <summary>
            Gets the name of the permission.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.Description">
            <summary>
            Gets the description of the permission.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.IsBuiltIn">
            <summary>
            Gets whether the permission is VisualGuards' BuitIn or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.ApplicationName">
            <summary>
            Gets the name of the application for permission.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.GrantedViaType">
            <summary>
            Gets the type, how the permission has been granted. (ex. via PermissionSet, via Role, etc.)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.GrantedToType">
            <summary>
            Gets the type, how the permission has been granted to. (ex. via User, via Group, etc.)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionAudit.IsInherited">
            <summary>
            Gets whether the permission is inherited or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.ApplicationId">
            <summary>
            Return the id of application where this folder is storage
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.Parent">
            <summary>
            return the ID of the parent folder
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.Id">
            <summary>
            Return the ID of the folder permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.Name">
            <summary>
            Get and Set the name of permission folder
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.Description">
            <summary>
            Get and Set the description of the permission folder
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.LastModification">
            <summary>
            return the last modification date (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionFolder.LastModificationLT">
            <summary>
            return the last modification date (Local Time)
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.CreatePermission(Novalys.VisualGuard.Security.Membership.VGApplication,System.String,System.String)">
            <summary>
            Create a new permission in the VG Repository
            </summary>
            <param name="app">Application, you want a new permission</param>
            <param name="name">Name of the permission</param>
            <param name="description">Description of the permission</param>
            <returns>Return a VGPermission </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.GetPermission(System.Guid)">
            <summary>
            Get permission by permission id
            </summary>
            <param name="id">id of permission</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.GetAllPermissionByApp(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Get all permission for an application
            </summary>
            <param name="app">Enter the application you need the permission</param>
            <returns>List of VGPermission</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.UpdatePermission(Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            Update VGPermission from the repository
            </summary>
            <param name="permission">Permssion to update.</param>
            <exception cref="!:VGAdministrationException" >You have a security exception if you don't have the right to update.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.DeletePermission(Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            Delete a permission from the repository. 
            </summary>
            <param name="permission">Permission to delete.</param>
            <exception cref="!:VGAdministrationException" >You have a security exception if you don't have the right to delete.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.GetAllPermission(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            Get all permission for a group , this method include a children Group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.GetRootFolderByAppId(System.Guid)">
            <summary>
            Get root folders by appId
            </summary>
            <param name="app">AppId for which you want fetch permissionFolders</param>
            <returns>All root folders by AppId</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.GetPermissionsByFolderId(Novalys.VisualGuard.Security.Membership.VGApplication,System.Guid)">
            <summary>
            Gets all permissions for the given application by folderId
            </summary>
            <param name="application">VGApplication</param>
            <param name="folderId">folderId</param>
            <returns>permissions for the given application by folderId</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionInstance.GetPermissionFoldersByFolderId(Novalys.VisualGuard.Security.Membership.VGApplication,System.Guid)">
            <summary>
            Gets all permissionfolders for the give application by folderId
            </summary>
            <param name="application">VGApplication</param>
            <param name="folderId">folderId</param>
            <returns> Permissionfolders for the give application by folderId</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet">
             <summary>
             Exposes information about permission set stored in a Visual Guard repository.
             </summary>
             <remarks>
             The <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object is used to represent a single permission set in a Visual Guard repository. It exposes information about the permission set such as the id, the name and the description.
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object is returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetPermissionSet(System.Guid)"/> or as part of a <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection"/> returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllPermissionSets"/>.</p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSet.ToString">
            <summary>
            Returns the name for the permission set.
            </summary>
            <returns>The name for the permission set.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.Comment">
            <summary>
            Gets a short description of the permission set. 
            </summary>
            <returns>A short description of the permission set.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.Name">
            <summary>
            Gets the name of the permission set. 
            </summary>
            <returns>the name of the permission set. </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.RepositoryId">
            <summary>
            Gets the unique identifier of the information used to store in a repository
            </summary>
            <value>the unique identifier of the information used to store in a repository.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.ApplicationId">
            <summary>
            Gets the unique identifier of the application of the permission set
            </summary>
            <value>The unique identifier of the application of the permission set</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.LastModificationDate">
            <summary>
            Gets or sets the date and time when the permission set was last modified. 
            </summary>
            <value>The date and time when the permission set was last modified.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.GrantedPermissionSets">
            <summary>
            Gets the granted permissionset list
            </summary>
            <value>The collection of the granted permission set</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.LastModification">
            <summary>
            The last modification of this Permission (Server time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.LastModificationLT">
            <summary>
            The last modification of this Permission (Local time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.GrantedRoles">
            <summary>
            Gets the granted role list
            </summary>
            <value>The collection of the granted permission set</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSet.Type">
            <summary>
            Gets EntityType
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection">
             <summary>
             Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> objects.
             </summary>
             <remarks>
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection"/> object is returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllPermissionSets"/>.</p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.#ctor(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Creates a new, empty permission set collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the permission set collection.
            </summary>
            <returns>An IEnumerator for the entire <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.SetReadOnly">
            <summary>
            Makes the contents of the permission set collection read-only.
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.Count">
            <summary>
            Gets the number of permission set objects in the collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the permission set collection is thread safe.
            </summary>
            <value>Always false because thread-safe permission set collections are not supported.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.Item(System.Guid)">
            <summary>
            Gets the permission set in the collection referenced by the specified repository id.
            </summary>
            <param name="id">The repository id of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> to retrieve from the collection.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the permission set.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.Item(System.Int32)">
            <summary>
            Gets the permission set in the collection at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object to retrieve from the collection.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the permission set.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPermissionSets">
            <summary>
            Manages user membership in roles for authorization checking in a WinForm application.
            </summary>
            <remarks>
            Visual Guard role management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/></p>
            </remarks>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSets.CreateInstance(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> using a specific security runtime
            </summary>
            <param name="runtime">The security runtime used by the created instance.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> class.</returns>
            <exception cref="T:System.ArgumentNullException">the specified runtime is null.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSets.GetPermissionSetInRole(System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSets.GetPermissionSetInRole(System.Guid,System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSets.GrantPermissionSetToRole(System.Guid,System.Guid)">
            <summary>Gets a permission set to a role.</summary>
            <returns>A <see cref="T:System.Guid"/> representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSets.GrantPermissionSetToRole(System.Guid,System.Guid,System.Guid)">
            <summary>
            Grant a permission set to a role. 
            </summary>
            <param name="roleID">A <see cref="T:System.Guid"/>  that represents the Id of the role.</param>
            <param name="permSetID">A <see cref="T:System.Guid"/> that represent the ID of the permission Set </param>
            <param name="applicationID">A <see cref="T:System.Guid"/> that represent the ID of the application </param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance">
            <summary>
            Manages user membership in permission sets for a specific <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object.
            </summary>
            <remarks>
            Visual Guard permission set management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/> and allows to list, create and update permission set</p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.ApplicationId">
            <summary>
            Gets the Visual Guard unique identifier of the application managed by this instance.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GetPermissionSet(System.Guid)">
            <summary>
            Get VGPermissionSet by id
            </summary>
            <param name="permissionSetId">Id of permissionSet</param>
            <returns>VGPermissionSet</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GetAllPermissionSets">
            <summary>Gets a list of the permission set from the repository.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection"/> object representing the list of permission sets for the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GetPermissionSetInRole(Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Get permission set collection of a role. 
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/>  that is the role.</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GrantPermissionSetToRole(System.Guid,System.Guid)">
            <summary>
            Set a permission set to a role. 
            </summary>
            <param name="roleID">A <see cref="T:System.Guid"/>  that represents the Id of the role.</param>
            <param name="permSetID">A <see cref="T:System.Guid"/> that represent the ID of the permission Set </param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GrantPermissionSetToRole(System.Guid,System.Guid,System.Guid)">
            <summary>
            Grant a permission set to a role. 
            </summary>
            <param name="roleID">A <see cref="T:System.Guid"/>  that represents the Id of the role.</param>
            <param name="applicationIdOfRole">A <see cref="T:System.Guid"/> that represent the ID of the application </param>
            <param name="permSetID">A <see cref="T:System.Guid"/> that represent the ID of the permission Set </param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GrantPermissionSetToRole(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGPermissionSet)">
            <summary>
            Grant a permission set to a role. 
            </summary>
            <param name="role">A that represents the Role </param>
            <param name="permSet">A that represents the PermissionSet </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.RevokePermissionSetToRole(System.Guid,System.Guid)">
            <summary>
            Revoke a permission set to a role. 
            </summary>
            <param name="roleID">A <see cref="T:System.Guid"/>  that represents the Id of the role.</param>
            <param name="permSetID">A <see cref="T:System.Guid"/> that represent the ID of the permission Set </param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.RevokePermissionSetToRole(System.Guid,System.Guid,System.Guid)">
            <summary>
            Revoke a permission set to a role. 
            </summary>
            <param name="roleID">A <see cref="T:System.Guid"/>  that represents the Id of the role.</param>
            <param name="applicationIdOfRole">A <see cref="T:System.Guid"/> that represent the ID of the application </param>
            <param name="permSetID">A <see cref="T:System.Guid"/> that represent the ID of the permission Set </param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.RevokePermissionSetToRole(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGPermissionSet)">
            <summary>
            Revoke a permission set to a role. 
            </summary>
            <param name="roleID"></param>
            <param name="applicationID"></param>
            <param name="permSetID"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGPermissionSetsInstance.GetAttributes(Novalys.VisualGuard.Security.Membership.VGPermissionSet,Novalys.VisualGuard.Security.Membership.VGPermission)">
             <summary>
             Get all attributes of permission contains in permissionSet
             </summary>
             <example>
             <p>How to change the value of attribut</p>
             <code lang="C#">
             
             </code>
            
             </example>
             <param name="permissionSet"></param>
             <param name="permission"></param>
             <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.Id">
            <summary>
            Gets an Id of the attribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.PropertyName">
            <summary>
            Gets PropertName
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DisplayName">
            <summary>
            Gets or sets DisplayName
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DataTypeValue">
            <summary>
            Gets DataType
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.MaxLength">
            <summary>
            Gets or sets MaxLength
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DefaultBinaryData">
            <summary>
            Gets or sets default BinaryData value
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DefaultImageValue">
            <summary>
            Gets or sets DefaultValue for Image attribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DropDownItems">
            <summary>
            Gets or sets drop down items.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DefaultValue">
            <summary>
            Gets or sets default value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.IsVisible">
            <summary>
            Gets or sets if this attribute is visible in WinConsole while editing the user details.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.IsReadOnly">
            <summary>
            Gets or sets if this attribute is read only
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.IsReadOnlyForUI">
            <summary>
            Gets or sets if this attribute is read only for UI (WinConsole)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.IsRequired">
            <summary>
            Gets or sets if this attribute is required
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.AllowSearch">
            <summary>
            Gets or sets if users can be searched using this attribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.ViewOrder">
            <summary>
            Gets or sets viewing order in the WinConsole while editing user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.GroupName">
            <summary>
            Gets or sets logical container for the attribute to display while editing user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.ValidationExpression">
            <summary>
            Gets or sets validation expression for string datatype attribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.Description">
            <summary>
            Gets or sets description of the attribute
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.VGAttributeInformationType">
            <summary>
            Gets VGAttribute information type
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.AttributeType">
            <summary>
            Gets type of the attribute  (ex. Custom or VG attribute)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.IsMultiProfileSupported">
            <summary>
            Gets or sets whether this profile attribute supports multi profile value or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.LastModification">
            <summary>
            Gets or sets last modification
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.SaveInLog">
            <summary>
            Gets or sets if any changes to this attribute value need to be saved in log
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.DataType">
            <summary>
            Gets datatype of the attribute (ex. Int, string, DateTime etc)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileAttribute.LastModificationLT">
            <summary>
            Gets Local LastModification date 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGProfileInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.UserProfile.VGProfileDataType,System.String,System.String,System.Int32,System.String,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.String,Novalys.VisualGuard.Security.UserProfile.VGAttribute_InformationType,System.Boolean)">
            <summary>
            Creates a new profile attribute.
            </summary>
            <param name="propertyName"></param>
            <param name="dataType"></param>
            <param name="displayName"></param>
            <param name="description"></param>
            <param name="maxLength"></param>
            <param name="defaultValue"></param>
            <param name="defaultImageValue"></param>
            <param name="isVisible"></param>
            <param name="isReadOnly"></param>
            <param name="isReadOnlyForUI"></param>
            <param name="isRequired"></param>
            <param name="allowSearch"></param>
            <param name="allowMultiUserProfile"></param>
            <param name="viewOrder"></param>
            <param name="groupName"></param>
            <param name="validationExpression"></param>
            <param name="attributeInformationType"></param>
            <param name="isSaveInLog"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGProfileInstance.CreateBinaryDataProfileAttribute(System.String,System.String,System.String,System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,Novalys.VisualGuard.Security.UserProfile.VGAttribute_InformationType,System.Boolean)">
            <summary>
            Creates a new binary data profile attribute
            </summary>
            <param name="propertyName"></param>
            <param name="displayName"></param>
            <param name="description"></param>
            <param name="defaultBinaryData"></param>
            <param name="isVisible"></param>
            <param name="isReadOnly"></param>
            <param name="isReadOnlyForUI"></param>
            <param name="isRequired"></param>
            <param name="allowSearch"></param>
            <param name="allowMultiUserProfile"></param>
            <param name="viewOrder"></param>
            <param name="groupName"></param>
            <param name="attributeInformationType"></param>
            <param name="isSaveInLog"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGProfileInstance.CreateBinaryDataProfileAttribute(System.String,System.String,System.String,System.Byte[])">
            <summary>
            Creates a new binary data profile attribute
            </summary>
            <param name="propertyName"></param>
            <param name="displayName"></param>
            <param name="description"></param>
            <param name="defaultBinaryData"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGProfileInstance.CreateDropDownProfileAttribute(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,Novalys.VisualGuard.Security.UserProfile.VGAttribute_InformationType,System.Boolean)">
            <summary>
            Creates a new dropdown profile attribute
            </summary>
            <param name="propertyName"></param>
            <param name="displayName"></param>
            <param name="description"></param>
            <param name="dropDownItems"></param>
            <param name="defaultDropDownItem"></param>
            <param name="isVisible"></param>
            <param name="isReadOnly"></param>
            <param name="isReadOnlyForUI"></param>
            <param name="isRequired"></param>
            <param name="allowMultiUserProfile"></param>
            <param name="viewOrder"></param>
            <param name="groupName"></param>
            <param name="attributeInformationType"></param>
            <param name="isSaveInLog"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGProfileInstance.CreateDropDownProfileAttribute(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates a new dropdown profile attribute
            </summary>
            <param name="propertyName"></param>
            <param name="displayName"></param>
            <param name="description"></param>
            <param name="dropDownItems"></param>
            <param name="defaultDropDownItem"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGProfileInstance.GetThumbnailImageForImageType(System.Drawing.Image)">
            <summary>
            Get Thumbnail image for profile attribute (with image datatype)
            </summary>
            <param name="imgOriginal">Image original</param>
            <returns>thumbnail image</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileValueProxy.Value">
            <summary>
            PropertyValue
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGProfileValueProxy.ValueImage">
            <summary>
            PropertyValueImage
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRepository">
            <summary>
            Manages all the informations in the repository
            </summary>
            <remarks>
            Visual Guard role management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/></p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRepository"/> class
            </summary>
            <param name="Repository">a <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation"/> object corresponding to the repository</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.CreateInstance(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance"/> using a specific security runtime
            </summary>
            <param name="runtime">The security runtime used by the created instance.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> class.</returns>
            <exception cref="T:System.ArgumentNullException">the specified runtime is null.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the repository is configured to require a unique e-mail address for each user name.
            </summary>
            <value>true if the repository requires a unique e-mail address; otherwise, false. The default is true.</value>
            <remarks>
            This value is defined in the Visual Guard repository and can be modified by editing the password policy in the Visual Guard console. 
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.ComputerId">
            <summary>
            Gets a value indicating ComputerId generated by VisualGuard.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.AllowToRenameUser">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.UseUpdateMethod">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.LastModification">
            <summary>
            Represente the last modification of Repository entity (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.LastModificationLT">
            <summary>
            Represente the last modification of Repository entity (Local Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.LicenseType">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.LicenseMaxUsers">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.LicenseExpirationDate">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the default membership provider requires the user to answer a password question for password reset and retrieval.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.
            </summary>
            <value>true if the membership provider supports password reset; otherwise, false. </value>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.RepositoryName">
            <summary>
            Specifies the name of the repository used by the runtime.
            </summary>
            <value>The name of the repository. This value must exist in the list of repository defined in the Visual Guard configuration file.
            <para>When the value is null. The runtime will use the reposiotry defined as default.</para></value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.SupportedAuthenticationModes">
            <summary>
            Gets the authentication modes supported by the repository.
            </summary>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> value indicating the modes supported by the repository.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.LogEnabled">
             <summary>
             Gets a value indicating whether the log is enabled for the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.RepositoryType">
            <summary>
            Gets the Visual Guard unique identifier of the application managed by this instance.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.CreateNewLicenseRequest(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <param name="name"></param>
            <param name="company"></param>
            <param name="phoneNumber"></param>
            <param name="state"></param>
            <param name="additionnalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.GetAllApplications">
            <summary>Gets a list of the applications from the repository.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplicationCollection"/> object representing the list of applications for the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.GetApplication(System.Guid)">
            <summary>
            Gets a application for the application
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object representing the specified application. null if the application was not found in the repository or does not belong to the application.</returns>
            <param name="application">the application id of the applicationt to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.GetRepository(System.String)">
            <summary>Gets a repository Information.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation"/> object representing the specified repository. null if the repository was not found.</returns>
            <param name="RepositoryName">the repository name to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepository.UpdateRepository(Novalys.VisualGuard.Security.Membership.VGRepository)">
            <summary>Gets a repository Information.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation"/> object representing the specified repository. null if the repository was not found.</returns>
            <param name="RepositoryName">the repository name to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.GroupDisplayInfo">
            <summary>
            Gets or Sets Group Display Information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.CacheDuration">
            <summary>
            Gets or sets cache duration.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.IsAllowedMultiUserProfile">
            <summary>
            Gets or sets if repository allows multi user profile.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepository.WorkFlowImpersonatedUserInfo">
            <summary>
            Gets or Sets impersonated user id to execute workflow with.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance">
            <summary>
            Manages repository for a specific <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object.
            </summary>
            <remarks>
            Visual Guard role management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/> and allows to list, create and update roles</p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.GetApplication(System.Guid)">
            <summary>
            Gets a aplication for the application ID
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object representing the specified application. null if the Application was not found in the repository or does not belong to the application.</returns>
            <param name="ApplicationId">the repository id of the Application to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.GetAllApplications">
            <summary>Gets a list of the applications for the repository.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplication"/> object representing the list of Applications for the repository.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.UpdateRepository(Novalys.VisualGuard.Security.Membership.VGRepository)">
            <summary>
            Updates the repository with the information for the specified repository. 
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object that represents the role to be updated and the updated information for the role.</param>
            <exception cref="T:System.ArgumentNullException">role is null.</exception>
            <exception cref="T:System.ArgumentException">the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to load the <paramref name="role"/> is not the current instance.</exception>
            <exception cref="T:System.InvalidOperationException">
            the permission set granted to the role was not found in the repository.
            <para>-or-</para>
            a role with the same name already exists for the application.</exception>
            <exception cref="T:System.InvalidOperationException">the permission set granted to the role was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.UpdateLicenseRequestInfo(Novalys.VisualGuard.Security.License.VGLicenseRequestInfo)">
            <summary>
            Update the license request of this repository
            </summary>
            <param name="requestInfo"></param>
            <returns>Return the new repository updated</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.GetAllDBUsers">
            <summary>
            Get all users store (Database or File)
            </summary>
            <returns>Return list of users</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.GetCurrentDBUser">
            <summary>
            Get the current user connected to the database
            </summary>
            <returns>Return name of the user</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.ActiveStorageCryptography">
            <summary>
            Active Cryptography inside of the storage
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.ReplaceStorageCryptography(System.Byte[])">
            <summary>
            Replace the key inside of the storage
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.ReplaceCommunicationCryptography(System.Byte[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.GetAllKeysBackup">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.ExtractRepositoryInformation(Novalys.VisualGuard.Security.Membership.VGExtractorInput)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.UpdateGroupFriendlySelection(Novalys.VisualGuard.Security.Common.VGGroupFriendlyType)">
            <summary>
            Sets VG Group Display and updates Repository
            </summary>
            <param name="groupDisplayType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.UpdateGroupFriendlySelection(Novalys.VisualGuard.Security.Common.VGGroupFriendlyType,Novalys.VisualGuard.Security.Membership.VGGroupProfileAttribute)">
            <summary>
            Sets VG Group Display and updates Repository
            </summary>
            <param name="groupDisplayType"></param>
            <param name="groupProfileAttribute"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.GetStatistics">
            <summary>
            Gets statistics data for all entities of repository.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance.Performance">
            <summary>
            Gets Performance tracking instance
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRepositoryStatus">
            <summary>
            Describes the result of a <see cref="!:VGRepository.UpdateRepository(VGIRepositoryInformation)"/> operation. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryStatus.InvalidRequiresQuestionAndAnswer">
            <summary>
            Question And Answer are required whereas one of the user didn't have question and answer.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryStatus.InvalidRequiresUniqueEmail">
            <summary>
            Email are required whereas one of the user didn't have question and answer.
            </summary>
            
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryStatus.RepositoryIsValid">
            <summary>
            Repository Data are valid.
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRole">
             <summary>
             Exposes and updates role information in the Visual Guard repository.
             </summary>
             <remarks>
             The <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object is used to represent a role in the Visual Guard repository. It exposes information about the role such as the id, name, description and permission sets, and provides functionality for the role such as change the list of members.
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object is returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRole(System.String)"/> and <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.CreateRole(System.String,System.String,System.Guid)"/> methods or as part of a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> returned by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllRoles"/>, <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.String)"/> methods.</p>
             <p>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object is required by the <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.UpdateRole(Novalys.VisualGuard.Security.Membership.VGRole)"/> method when you want to update the information for an existing role.</p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.op_Equality(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            VGRole check if both VGrole are equals
            </summary>
            <param name="a">VGRole A</param>
            <param name="b">VGRole B</param>
            <returns>Return true, if the both is same</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.op_Inequality(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            VGRole check if both VGrole are NOT equals
            </summary>
            <param name="a">VGRole A</param>
            <param name="b">VGRole B</param>
            <returns>Return true, if both are NOT same</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.#ctor(Novalys.VisualGuard.Security.Role.VGIRoleInformation)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> class
            </summary>
            <param name="role">a <see cref="T:Novalys.VisualGuard.Security.Role.VGIRoleInformation"/> object corresponding to the role</param>
            <param name="roleInstance">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object that manage this role.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.IsMembershipManagerRole">
            <summary>
            Return true if this role is Membership Role
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.ToString">
            <summary>
            Returns the name of the role.
            </summary>
            <returns>The name of the role.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.Comment">
            <summary>
            Gets or sets a short description of the role. 
            </summary>
            <returns>A short description of the permission set.</returns>
            <exception cref="T:System.ArgumentException">the value is longer than 1024 characters </exception>
            <exception cref="T:System.InvalidOperationException">the value is modified and the role is marked as a built-in role.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.LastModificationDate">
            <summary>
            Gets or sets the date and time when the role was last modified. 
            </summary>
            <value>The date and time when the role was last modified.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.Name">
            <summary>
            Gets or sets the name of the role. 
            </summary>
            <returns>the name of the role.</returns>
            <exception cref="T:System.ArgumentNullException">the value is null.</exception>
            <exception cref="T:System.ArgumentException">the value is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            the value is longer than 64 characters.
            <para>or</para>
            the value start whith '#'.</exception>
            <exception cref="T:System.InvalidOperationException">the value is modified and the role is marked as a built-in role.</exception>
            <remarks>all shared role names are prefixed by "#".</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId">
            <summary>
            Gets the unique identifier from the repository for the role.
            </summary>
            <value>the unique identifier from the repository for the role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.PermissionSet">
            <summary>
            Gets or sets the permission set granted to the role.
            </summary>
            <value>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the permission set granted to the role.</value>
            <exception cref="T:System.InvalidOperationException">the value is modified and the role is marked as a built-in role or is a shared role.
            <para>-or-</para>
            the application of the permission set is not equal to the application of the role.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.PermissionSets">
            <summary>
            Gets permission set list granted to the role.
            </summary>
            <value>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSets"/> object representing the permission set list granted to the role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.IsBuiltIn">
            <summary>
            Gets a boolean value indicating whether the role is a built-in role and cannot be modified or deleted
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.IsAnonymous">
            <summary>
            Gets a boolean value indicating whether the role is an anonymous role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.IsDefault">
            <summary>
            Gets a boolean value indicating whether the role is an default role for a current application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.IsSharedRole">
            <summary>
            Gets a boolean value indicating whether the role is a shared role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.RoleId">
            <summary>
            Gets a <paramref name="VGRoleId"/>of role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.ApplicationId">
            <summary>
            Gets the unique identifier of the application of the role
            </summary>
            <value>The unique identifier of the application of the role. returns <see cref="F:System.Guid.Empty"/> when the role is a shared role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.Id">
            <summary>
            Return the ID of role 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.LastModification">
            <summary>
            Return the last modification date (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.LastModificationUniversal">
            <summary>
            Return the last modification date (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.LastModificationLT">
            <summary>
            Return the last modification date (Lcoal Time) 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.Item(System.String)">
            <summary>
            Gets or sets profileAttribute Value by attribute's propertyName.
            </summary>
            <param name="propertyName">attribute PropertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.Item(System.Guid)">
            <summary>
            Gets or sets profileAttribute Value by attribute's Id.
            </summary>
            <param name="attributeId"></param>
            <returns>Value for attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.GetValue``1(System.Guid)">
            <summary>
            Gets profileattribute Value by attributeId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attributeId">attributeId</param>
            <returns>profileattribute Value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.GetValue(System.Guid)">
            <summary>
            Gets profileattribute Value by attributeId
            </summary>
            <param name="attributeId">profileAttributeId</param>
            <returns>profileattribute Value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.GetValue``1(System.String)">
            <summary>
            Gets profileAttribute Value by propertyName 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">propertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.GetValue(System.String)">
            <summary>
            Gets profileAttribute Value by propertyName
            </summary>
            <param name="propertyName">propertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.SetValue``1(System.String,``0)">
            <summary>
            Sets profileattribute Value by propertyname
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">propertyName</param>
            <param name="value">value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.SetValue(System.String,System.Object)">
            <summary>
            Sets profileattribute Value by propertyname
            </summary>
            <param name="propertyName">propertyName</param>
            <param name="value">value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.SetValue(System.Guid,System.Object)">
            <summary>
            Sets profileattribute Value by attributeId
            </summary>
            <param name="attributeId">profileAttributeId</param>
            <param name="value">value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.SetValue``1(System.Guid,``0)">
            <summary>
            Sets profileattribute Value by attributeId
            </summary>
            <param name="attributeId">profileAttributeId</param>
            <param name="value">value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRole.GetVGCommonProfileValueCollection(Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileValue.VGCommonProfileValueCollection)">
            <summary>
            Temp method for the bug of set value
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.CanBeGrantedToUser">
            <summary>
            Gets or sets whether this role can be granted to user or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.CanBeGrantedToGroup">
            <summary>
            Gets or sets whether this role can be granted to group or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.GrantedPermissions">
            <summary>
            Gets Granted permissions to role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRole.Type">
            <summary>
            Gets entityType
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleCollection.#ctor">
            <summary>
            Creates a new, empty role collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleCollection.Add(Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Adds the specified role to the collection.
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object to add to the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleCollection.Remove(System.Guid)">
            <summary>
            Removes the role object with the specified repository id from the collection.
            </summary>
            <param name="id">The id of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object to remove from the collection.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleCollection.SetReadOnly">
            <summary>
            Makes the contents of the role collection read-only.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleCollection.Count">
            <summary>
            Gets the number of role objects in the collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the role collection is thread safe.
            </summary>
            <value>Always false because thread-safe role collections are not supported.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleCollection.Item(System.Guid)">
            <summary>
            Gets the role in the collection referenced by the specified repository id.
            </summary>
            <param name="id">The repository id of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> to retrieve from the collection.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the role.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleCollection.Item(System.Int32)">
            <summary>
            Gets the role in the collection referenced at the specified index.
            </summary>
            <param name="index">The repository id of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> to retrieve from the collection.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the role with the specified index.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleCollection.SyncRoot">
            <summary>
            Gets the synchronization root. 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleCollection.GetSortedList(Novalys.VisualGuard.Security.Membership.VGRoleComparer)">
            <summary>
            Returns a sorted collection using the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleComparer"/> object. 
            </summary>
            <param name="comparer">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleComparer"/> object used to compare the roles of the collection.</param>
            <returns>A sorted collection</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRoleComparer">
            <summary>Compares two <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> for equivalence.</summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleComparer.#ctor(Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn,System.Boolean,System.ComponentModel.ListSortDirection)">
            <summary>
            Creates an instance of the class <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleComparer"/>
            </summary>
            <param name="column">The column used for the comparison</param>
            <param name="ignoreCase">Indicates whether the comparison is case sensitive or not</param>
            <param name="sortDirection">Indicates the direction of the sort.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects returns an indication of their relative values.
            </summary>
            <param name="x">the first object to compare.</param>
            <param name="y">the second object to compare.</param>
            <returns>Less than zero when x is less than y. Zero when x equals y. Greater than zero when x is greater than y.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoleComparer.Compare(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Compares two roles returns an indication of their relative values.
            </summary>
            <param name="x">the first role to compare.</param>
            <param name="y">the second tole to  compare.</param>
            <returns>Less than zero when x is less than y. Zero when x equals y. Greater than zero when x is greater than y.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn">
            <summary>
            The column used to sort a collection
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn.RepositoryId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn.PermissionSetId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn.PermissionSetName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRoleComparer.SortColumn.LastModificationDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleProfileValueProxy.Value">
            <summary>
            PropertyValue
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoleProfileValueProxy.ValueImage">
            <summary>
            PropertyValueImage
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRoles">
            <summary>
            Manages user membership in roles for authorization checking in a WinForm application.
            </summary>
            <remarks>
            Visual Guard role management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/></p>
            </remarks>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.CreateInstance(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> using a specific security runtime
            </summary>
            <param name="runtime">The security runtime used by the created instance.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> class.</returns>
            <exception cref="T:System.ArgumentNullException">the specified runtime is null.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRole(System.String[],System.String,System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRole(System.String[],System.String)">
            <summary>Adds the specified users to the specified role.</summary>
            <param name="roleName">The role to add the specified user names to.</param>
            <param name="usernames">A string array of user names to add to the specified role. </param>
            <exception cref="T:System.ArgumentNullException">roleName is null.
            <para>-or-</para>
            <paramref name="usernames"/> is null or one of the elements in usernames is null.</exception>
            <exception cref="T:System.ArgumentException">roleName is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the elements in usernames is an empty string or is longer than 64 characters.
            <para>-or-</para>
            usernames contains a duplicate element.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRoles(System.String[],System.String[])">
            <summary>Adds the specified users to the specified roles.</summary>
            <param name="usernames">A string array of user names to add to the specified roles. </param>
            <param name="roleNames">A string array of role names to add the specified user names to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or <paramref name="usernames"/> is null
            <para>-or-</para>
            One of the roles specified in roleNames is null.
            <para>-or-</para>
            One of the users specified in usernames is null.</exception>
            <exception cref="T:System.ArgumentException">
            <para>-or-</para>
            One of the roles specified in roleNames is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the users specified is an empty string or is longer than 64 characters.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>usernames contains a duplicate element.
            <para>-or-</para>One of the roles was found in the repository for the application.
            <para>-or-</para>One of the users was found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRoles(System.String[],System.String[],System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRole(System.String,System.String)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="username">The user name to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRole(System.String,System.String,System.Guid)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="username">The user name to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRoles(System.String,System.String[])">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="username">The user name to add to the specified roles. </param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or one of the roles is null.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>
            username is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles in roleNames is an empty string contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            username is an empty string or is longer than 64 chars.
            <para>-or-</para>roleNames contains a duplicate element.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRoles(System.String,System.String[],System.Guid)">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="username">The user name to add to the specified roles. </param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> or one of the roles is null.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>username is null.
            <para>-or-</para>applicationId is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles in roleNames is an empty string contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            username is an empty string or is longer than 64 chars.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>application was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.FindUsersInRole(System.String,System.String)">
            <summary>Gets a list of users in a specified role where the user name contains the specified user name to match.</summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="roleName">The role to search in. For shared role the value must be prefixed by '#'.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in Visual Basic).
            <para>-or-</para>
            <paramref name="usernameToMatch"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or contains invalid invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') or is longer than 64 characters.
            <para>-or-</para>
            role identified by <paramref name="roleName"/> does not exists in the repository.
            <para>-or-</para>
            <paramref name="usernameToMatch"/> is an empty string.</exception>
            <returns>A string array containing the names of all the users whose user name matches usernameToMatch and who are members of the specified role.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.FindUsersInRoleById(System.Guid,System.String)">
            <summary>Gets a list of users in a specified role where the user name contains the specified user name to match.</summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="roleId">The repository of the role to search in.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="usernameToMatch"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository for belongs to another application.
            <para>-or-</para>
            <paramref name="usernameToMatch"/> is an empty string.</exception>
            <returns>A string array containing the names of all the users whose user name matches usernameToMatch and who are members of the specified role.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetDefaultRole(System.Guid)">
            <summary>Gets the default role of an application.</summary>
            <param name="applicationId">The <see cref="T:System.Guid"/> code of the application.</param>
            <returns>Return the <see cref="T:System.Guid"/> of the default role.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllRoles">
            <summary>Gets a list of all the roles for the application.</summary>
            <returns>A string array containing the names of all the roles stored in the repository for the application.</returns>
            <remarks>Shared roles are prefixed by '#'.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser">
            <summary>Gets a list of the roles that the currently logged-on user is in.</summary>
            <returns>A string array containing the names of all roles that the currently logged-on user is in.</returns>
            <exception cref="T:System.ArgumentNullException">There is no current logged-on user.</exception>
            <remarks>this method returns the complete list of roles granted to the user for the application. This list can be different from the list of roles granted to the user for the current session (see <see cref="P:Novalys.VisualGuard.Security.VGIPrincipal.Roles"/>) that can be filtered during the authentication process.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.String)">
            <summary>Gets a list of the roles that a Visual Guard user is in.</summary>
            <returns>A string array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to look in other order of the order specofy bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSpecialRolesForUser(System.String)">
            <summary>Gets a list of speciales roles that a Visual Guard user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to look in other order of the order specofy bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetUsersInRole(System.String)">
            <summary>Gets a list of users in the specified role.</summary>
            <returns>A string array containing the names of all the users who are members of the specified role.</returns>
            <param name="roleName">The name of the role to get the list of users for. For shared role the name must be prefixed by '#'.</param>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string
            <para>-or-</para>
            <paramref name="roleName"/> is longer than 64 characters.
            <para>-or-</para>
            <paramref name="roleName"/> contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.IsUserInRole(System.String)">
            <summary>Gets a value indicating whether the currently logged-on user is in the specified role.</summary>
            <returns>true if the currently logged-on user is in the specified role; otherwise, false.</returns>
            <param name="roleName">The name of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            There is no current logged-on user.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters.
            </exception>
            <remarks>this method is equivalent to <see cref="M:Novalys.VisualGuard.Security.VGIPrincipal.IsInRole(System.String)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.IsUserInRole(System.String,System.String)">
            <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
            <returns>true if the specified user is in the specified role; otherwise, false.</returns>
            <param name="username">The name of the user to search for. </param>
            <param name="roleName">The name of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException">roleName is null.
            <para>-or-</para>
            username is null.</exception>
            <exception cref="T:System.ArgumentException">roleName is an empty string or is longer than 64 characters.
            <para>-or-</para>
            username is an empty string or is longer than 64 characters.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRole(System.String,System.String)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="username">The user to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            username is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRole(System.String,System.String,System.Guid)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="username">The user to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <param name="applicationId">The applicationId of the remove role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            username is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRoles(System.String,System.String[])">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified user from. </param>
            <param name="username">The user to remove from the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRoles(System.String,System.String[],System.Guid)">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified user from. </param>
            <param name="username">The user to remove from the specified roles. </param>
            <param name="applicationId">The application Id the selected role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null or one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRole(System.String[],System.String)">
            <summary>Removes the specified users from the specified role.</summary>
            <param name="roleName">The name of the role to remove the specified users from. </param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="usernames"/> is null or one of the user names in <paramref name="usernames"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the user names in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',')..
            <para>-or-</para>
            <paramref name="usernames"/> contains a duplicate element.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRole(System.String[],System.String,System.Guid)">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles  is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>Removes the specified user names from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or <paramref name="usernames"/> is null.
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para><paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para><paramref name="usernames"/> contains a duplicate element.
            <para>-or-</para>One of the roles was found in the repository for the application.
            <para>-or-</para>One of the users was found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRoles(System.String[],System.String[],System.Guid)">
            <summary>Removes the specified user names from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or <paramref name="usernames"/> is null.
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para><paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para><paramref name="usernames"/> contains a duplicate element.
            <para>-or-</para>One of the roles was found in the repository for the application.
            <para>-or-</para>One of the users was found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RoleExists(System.String)">
            <summary>
            Checks if a role exists in the current repository for the application
            </summary>
            <param name="roleName">the name of the role. For shared role the name must be prefixed by '#'.</param>
            <returns>true if the role exists false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RoleExists(System.Guid)">
            <summary>
            Checks if a role exists in the current repository for the application
            </summary>
            <param name="roleId">the <see cref="T:System.Guid"/>  of the role</param>
            <returns>true if the role exists false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleId"/> is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoles.DefaultRole">
            <summary>
            Gets the name of the default role of the application.
            </summary>
            <value>the name of the default role of the current application, null (Nothing in Visual Basic) if there is no default role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoles.DefaultRoleId">
            <summary>
            Gets the unique identifier of the default role of the application.
            </summary>
            <value>the unique identifier of the default role of the current application, <see cref="F:System.Guid.Empty"/> if there is no default role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoles.AnonymousRole">
            <summary>
            Gets the name of the role granted to a user during an anonymous session.
            </summary>
            <value>the name of the anomynous role of the current application, null (Nothing in Visual Basic) when the current application does not supports anonymous session.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRoles.AnonymousRoleId">
            <summary>
            Gets the unique identifier of the role granted to a user during an anonymous session.
            </summary>
            <value>the unique identifier of the role granted to a user during an anonymous session, <see cref="F:System.Guid.Empty"/> when the current application does not supports anonymous session.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.Security.Principal.NTAccount)">
            <summary>Gets a list of the roles that a Windows account is in.</summary>
            <returns>A string array containing the names of all the roles that the specified user is in.</returns>
            <param name="account">The Windows account to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="account"/> cannot be converted to a valid SID.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSpecialRolesForUser(System.Security.Principal.NTAccount)">
            <summary>Gets a list of the speciales roles that a Windows account is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> array containing the names of all the roles that the specified user is in.</returns>
            <param name="account">The Windows account to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="account"/> cannot be converted to a valid SID.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.IsUserInRole(System.Security.Principal.NTAccount,System.String)">
            <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
            <returns>true if the specified user is in the specified role; otherwise, false.</returns>
            <param name="account">The Windows account to search for. </param>
            <param name="roleName">The name of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters.
            <para>-or-</para>
            <paramref name="account"/> cannot be converted to a valid SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRole(System.Security.Principal.NTAccount[],System.String)">
            <summary>Adds the specified users to the specified role.</summary>
            <param name="roleName">The role to add the specified user names to.</param>
            <param name="accounts">An array of Windows account to add to the specified role. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRole(System.Security.Principal.NTAccount[],System.String,System.Guid)">
            <summary>Adds the specified users to the specified role.</summary>
            <param name="roleName">The role to add the specified user names to.</param>
            <param name="accounts">An array of Windows account to add to the specified role. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null or the application Id is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRolesById(System.Security.Principal.NTAccount[],System.Guid[])">
            <summary>Adds the specified Windows accounts to the specified roles.</summary>
            <param name="accounts">An array of Windows accounts to add to the specified roles. </param>
            <param name="roleIds">A string array of role id to add the specified user names to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRolesById(System.Security.Principal.NTAccount[],System.Guid[],System.Guid)">
            <summary>Adds the specified Windows accounts to the specified roles.</summary>
            <param name="accounts">An array of Windows accounts to add to the specified roles. </param>
            <param name="roleIds">A string array of role id to add the specified user names to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            The application Id was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRoles(System.Security.Principal.NTAccount[],System.String[])">
            <summary>Adds the specified users to the specified roles.</summary>
            <param name="accounts">An array of Windows accounts to add to the specified roles. </param>
            <param name="roleNames">A string array of role names to add the specified user names to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accouns is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles specified in <paramref name="roleNames"/> is an empty string or contains invalid chars.
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRoles(System.Security.Principal.NTAccount[],System.String[],System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRole(System.Security.Principal.NTAccount,System.String)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> cannot be converted to SID.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRole(System.Security.Principal.NTAccount,System.String,System.Guid)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> cannot be converted to SID.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRoles(System.Security.Principal.NTAccount,System.String[])">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null of one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            One of the roles specified in <paramref name="roleNames"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRoles(System.Security.Principal.NTAccount,System.String[],System.Guid)">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null of one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            One of the roles specified in <paramref name="roleNames"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRole(System.Security.Principal.NTAccount,System.String)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="account">The windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRole(System.Security.Principal.NTAccount,System.String,System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRoles(System.Security.Principal.NTAccount,System.String[])">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="account">The Windows account to remove from the specified role.</param>
            <param name="roleNames">The list of roles to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles is an empty string.
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="account"/> was not found in the repository for the application or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRoles(System.Security.Principal.NTAccount,System.String[],System.Guid)">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="account">The Windows account to remove from the specified role.</param>
            <param name="roleNames">The list of roles to remove the specified user from.</param>
            <param name="applicationId">The application Id where the selected role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null or one of the roles is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles is an empty string.
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="account"/> was not found in the repository for the application or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRole(System.Security.Principal.NTAccount[],System.String)">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="accounts">An array of Windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified windows accounts from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRole(System.Security.Principal.NTAccount[],System.String,System.Guid)">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="accounts">An array of Windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified windows accounts from.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRoles(System.Security.Principal.NTAccount[],System.String[])">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles  is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRoles(System.Security.Principal.NTAccount[],System.String[],System.Guid)">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles  is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRolesById(System.Security.Principal.NTAccount[],System.Guid[])">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleIds">A string array of repository id identifying the roles to remove the specified users from.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> is an empty array.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRolesById(System.Security.Principal.NTAccount[],System.Guid[],System.Guid)">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleIds">A string array of repository id identifying the roles to remove the specified users from.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> is an empty array.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.CreateRole(System.String,System.String,System.Guid)">
            <summary>
            Adds a new role to the repository.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <param name="description">a short description of the role</param>
            <param name="permissionSetId">The repository id of the permission set assigned to the role. <see cref="F:System.Guid.Empty"/> when there is no permission set assigned to the role.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            <paramref name="roleName"/> is longer than 64 characters. or a role with the same name already exists in the repository.
            <para>or</para>
            <paramref name="permissionSetId"/> does not exist in the repository fro the application.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllPermissionSets"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteRole(System.String,System.Boolean)"/>
            <returns>the role added to the repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.CreateRole(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Adds a new role to the repository.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <param name="description">a short description of the role</param>
            <param name="permissionSetId">The repository id of the permission set assigned to the role. <see cref="F:System.Guid.Empty"/> when there is no permission set assigned to the role.</param>
            <param name="applicationId">The Id of the application where you want to create the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null (Nothing in VB.Net).
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            <paramref name="roleName"/> is longer than 64 characters. or a role with the same name already exists in the repository.
            <para>or</para>
            <paramref name="permissionSetId"/> does not exist in the repository from the application.
            <para>or</para>
            <paramref name="applicationId"/> does not exist in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllPermissionSets"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteRole(System.String,System.Boolean)"/>
            <returns>the role added to the repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.CreateSharedRole(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Adds a new role to the repository.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <param name="description">a short description of the role</param>
            <param name="permissionSetId">The repository id of the permission set assigned to the role. <see cref="F:System.Guid.Empty"/> when there is no permission set assigned to the role.</param>
            <param name="applicationId">The Id of the application where you want to create the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null (Nothing in VB.Net).
            <para>-or-</para>
            <paramref name="applicationId"/>is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            <paramref name="roleName"/> is longer than 64 characters. or a role with the same name already exists in the repository.
            <para>or</para>
            <paramref name="permissionSetId"/> does not exist in the repository fro the application.
            <para>or</para>
            <paramref name="applicationId"/> does not exist in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllPermissionSets"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteRole(System.String,System.Boolean)"/>
            <returns>the role added to the repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteRole(System.String,System.Boolean)">
            <summary>
            Deletes a role specified by its name from the repository.
            </summary>
            <param name="roleName">the name of role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if <paramref name="roleName"/> has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') or is longer than 64 characters.</exception>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role or is a shared role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteRole(Novalys.VisualGuard.Security.Membership.VGRole,System.Boolean)">
            <summary>
            Deletes the role represented by the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object from the repository.
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> representing the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role or is a shared role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteRole(System.Guid,System.Boolean)">
            <summary>
            Deletes a role specified by its repository id from the repository.
            </summary>
            <param name="roleId">the repository id of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role or is a shared role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetUsersInRole(System.Guid)">
            <summary>Gets a list of users in the specified role.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> object containing the the users who are members of the specified role.</returns>
            <param name="roleId">A <see cref="T:System.Guid"/> value representing the role to get the list of users for. </param>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRolesById(System.String,System.Guid[])">
            <summary>Adds a user specified by repository id to the specified roles.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to add the specified user to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRolesById(System.String,System.Guid[],System.Guid)">
            <summary>Adds a user specified by repository id to the specified roles.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to add the specified user to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRolesById(System.String[],System.Guid[])">
            <summary>Adds a list of users specified by repository ids to the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to add to the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to add the specified users to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToRolesById(System.String[],System.Guid[],System.Guid)">
            <summary>Adds a list of users specified by repository ids to the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to add to the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to add the specified users to.</param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.
            <para>-or-</para>
            <paramref name="applicatinId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository
            <para>-or-</para>
            The application was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRoleById(System.String,System.Guid)">
            <summary>Adds the user specified by the repository id to the specified role.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleId">the repository id of the roles to add the specified user to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToRoleById(System.String,System.Guid,System.Guid)">
            <summary>Adds the user specified by the repository id to the specified role.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleId">the repository id of the roles to add the specified user to.</param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null.
            <para>-or-</para>
            <paramref name="roleId"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRolesById(System.String,System.Guid[])">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="userId">The repository id of the user to remove from the specified roles.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to remove the specified user from. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRolesById(System.String,System.Guid[],System.Guid)">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="userId">The repository id of the user to remove from the specified roles.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to remove the specified user from. </param>
            <param name="applicationId"> The application Id <see cref="T:System.Guid"/> where the selected role come from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRolesById(System.String[],System.Guid[])">
            <summary>Removes a list of users specified by repository ids from the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null or one of the user ids is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRolesById(System.String[],System.Guid[],System.Guid)">
            <summary>Removes a list of users specified by repository ids from the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to remove the specified users from.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null or one of the user ids is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRoleById(System.String,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userId">the repository id identifying the user to remove from the specified roles.</param>
            <param name="roleId">the repository id identifying the role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repositoryor is an empty string.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromRoleById(System.String,System.Guid,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userId">the repository id identifying the user to remove from the specified roles.</param>
            <param name="roleId">the repository id identifying the role to remove the specified user from.</param>
            <param name="applicationId">The application id of the selected rolecome from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repositoryor is an empty string.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRoleById(System.String[],System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleId">The repository id identifying the role to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null or one of the users is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromRoleById(System.String[],System.Guid,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleId">The repository id identifying the role to remove the specified users from.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null or one of the users is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUserById(System.String)">
            <summary>Gets a list of the roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUserById(System.String,System.Guid)">
            <summary>Gets a list of the roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <param name="applicationId">The application id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            <para>-or-</para>
            <paramref name="application"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSpecialRolesForUserById(System.String)">
            <summary>Gets a list of speciales roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllPermissionSets">
            <summary>Gets a list of the permission set fro the repository.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection"/> object representing the list of permission sets for the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetPermissionSet(System.Guid)">
            <summary>
            Gets a permission set for the application
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the specified permission set. null if the permission set was not found in the repository or does not belong to the application.</returns>
            <param name="permissionSetId">the repository id of the permission set to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetPermissionSet(System.Guid,System.Guid)">
            <summary>
            Gets a permission set for the application
            </summary>
            <param name="permissionSetId">the repository id of the permission set to get information for./// </param>
            <param name="applicationId">The id of the application where the permission comme from</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the specified permission set. null if the permission set was not found in the repository or does not belong to the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.IsUserInRoleById(System.String,System.Guid)">
            <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
            <returns>true if the specified user is in the specified role; otherwise, false.</returns>
            <param name="userId">The repository id of the user to search for. </param>
            <param name="roleId">The repository id of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllRolesAsCollection">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllRolesAsCollection(System.Guid)">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <param name="appID">ID of the application you want roles collection</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="appId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="appID"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllSharedRolesAsCollection">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <param name="appID">ID of the application you want roles collection</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllSharedRolesAsCollection(System.Guid)">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <param name="appID">ID of the application where you want shared roles collection</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="appID"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetAllSpecialRolesAsCollection(System.Guid)">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all speciale roles for the application.</summary>
            <param name="appID">the ID of the application</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="appID"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="appID"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.IsUserInRole(System.Guid)">
            <summary>Gets a value indicating whether the currently logged-on user is in the specified role.</summary>
            <returns>true if the currently logged-on user is in the specified role; otherwise, false.</returns>
            <param name="roleId">The repository id of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException">There is no current logged-on user.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRole(System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRole(System.Guid,System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <param name="applicationID">The application Id where the role come from</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSharedRole(System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSharedRole(System.Guid,System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <param name="applicationId">The application ID of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRole(System.String)">
            <summary>Gets a roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleName">the name of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.FindRolesByName(System.String,System.Guid)">
            <summary>Gets a roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleName">the name of the role to get information for.</param>
            <param name="appID">The ID of the application</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.FindSharedRolesByName(System.String)">
            <summary>Gets a shared roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified shared role. null if the shared role was not found in the repository or does not belong to the application.</returns>
            <param name="roleName">the name of the role to get information for.</param>
            <param name="appID">The ID of the application</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.FindPermissionSetByName(System.String,System.Guid)">
            <summary>
            Gets a permission set list for the selected permission name and for the application
            </summary>
            <param name="permissionSetName">the name of the permission set to get information for.</param>
            <param name="applicationId">The id of the application where the permission comme from</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the specified permission set. null if the permission set was not found in the repository or does not belong to the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.UpdateRole(Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Updates the repository with the information for the specified role. 
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object that represents the role to be updated and the updated information for the role.</param>
            <exception cref="T:System.ArgumentNullException">role is null.</exception>
            <exception cref="T:System.ArgumentException">the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to load the <paramref name="role"/> is not the current instance.</exception>
            <exception cref="T:System.InvalidOperationException">
            the permission set granted to the role was not found in the repository.
            <para>-or-</para>
            a role with the same name already exists for the application.</exception>
            <exception cref="T:System.InvalidOperationException">the permission set granted to the role was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>Gets a list of the roles that a user is in.</summary>
            <returns>A string array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <param name="mode">the mode of authentication of the user.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <exception cref="T:System.ArgumentNullException">username is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSpecialRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>Gets a list of speciales roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <param name="mode">the mode of authentication of the user.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <exception cref="T:System.ArgumentNullException">username is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromSharedRoleById(System.String[],System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="sharedRoleId">An array of repository id identifying the roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null or one of the users is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sharedRoleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUsersFromSharedRolesById(System.String[],System.Guid[])">
            <summary>Removes a list of users specified by repository ids from the specified shared roles.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified shared roles.</param>
            <param name="sharedRoleIds">An array of repository id identifying the shared roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedRoleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null or one of the user ids is null.</exception>
            <exception  cref="T:System.ArgumentException">
            <paramref name="sharedRoleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.RemoveUserFromSharedRoleById(System.String,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userId">the repository id identifying the user to remove from the specified roles.</param>
            <param name="sharedRoleId">the repository id identifying the role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sharedRoleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repositoryor is an empty string.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUsersToSharedRolesById(System.String[],System.Guid[])">
            <summary>Adds a list of users specified by repository ids to the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to add to the specified roles.</param>
            <param name="sharedRoleIds">An array of repository id identifying the roles to add the specified users to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedRoleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sharedRoleIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.AddUserToSharedRoleById(System.String,System.Guid)">
            <summary>Adds the user specified by the repository id to the specified role.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="sharedRoleId">the repository id of the roles to add the specified user to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sharedRoleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSharedRolesForUserById(System.String)">
            <summary>Gets a list of the shared roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetSharedRolesForUser(System.String)">
            <summary>Gets a list of the shared roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> containing all shared roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to look in other order of the order specofy bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGRoles.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteSharedRole(System.Guid,System.Boolean)">
            <summary>
            Deletes a Shared role specified by its repository id from the repository.
            </summary>
            <param name="sharedRoleId">the repository id of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteSharedRole(System.String,System.Boolean)">
            <summary>
            Deletes a shared role specified by its name from the repository.
            </summary>
            <param name="sharedRoleName">the name of shared role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if <paramref name="sharedRoleName"/> has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') or is longer than 64 characters.</exception>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRoles.DeleteSharedRole(Novalys.VisualGuard.Security.Membership.VGRole,System.Boolean)">
            <summary>
            Deletes the shared role represented by the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object from the repository.
            </summary>
            <param name="sharedRole">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> representing the shered role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance">
            <summary>
            Manages user membership in roles for a specific <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object.
            </summary>
            <remarks>
            Visual Guard role management enables you to manage authorization for your application.
            <p>This class can be used to interact with <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembership"/> and allows to list, create and update roles</p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DefaultRoleId">
            <summary>
            Gets the unique identifier of the default role of the application.
            </summary>
            <value>the unique identifier of the default role of the current application, <see cref="F:System.Guid.Empty"/> if there is no default role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AnonymousRole">
            <summary>
            Gets the name of the role granted to a user during an anonymous session.
            </summary>
            <value>the name of the anomynous role of the current application, null (Nothing in Visual Basic) when the current application does not supports anonymous session.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AnonymousRoleId">
            <summary>
            Gets the unique identifier of the role granted to a user during an anonymous session.
            </summary>
            <value>the unique identifier of the role granted to a user during an anonymous session, <see cref="F:System.Guid.Empty"/> when the current application does not supports anonymous session.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRolesInstance.ApplicationName">
            <summary>
            Gets the name of the application managed by this instance.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRolesInstance.ApplicationId">
            <summary>
            Gets the Visual Guard unique identifier of the application managed by this instance.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRole(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Grant role to user
            </summary>
            <param name="user"></param>
            <param name="role"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRoles(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGMembershipUser},System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGRole})">
            <summary>
            Grant role to users
            </summary>
            <param name="users"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRole(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGMembershipUser},Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Grant role to users
            </summary>
            <param name="users"></param>
            <param name="role"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoles(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGRole})">
            <summary>
            Grant roles to user
            </summary>
            <param name="user"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRole(System.String[],System.String)">
            <summary>Adds the specified users to the specified role.</summary>
            <param name="roleName">The role to add the specified user names to.</param>
            <param name="usernames">A string array of user names to add to the specified role. </param>
            <exception cref="T:System.ArgumentNullException">roleName is null.
            <para>-or-</para>
            <paramref name="usernames"/> is null or one of the elements in usernames is null.</exception>
            <exception cref="T:System.ArgumentException">roleName is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the elements in usernames is an empty string or is longer than 64 characters.
            <para>-or-</para>
            usernames contains a duplicate element.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRole(System.String[],System.String,System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRoles(System.String[],System.String[])">
            <summary>Adds the specified users to the specified roles.</summary>
            <param name="usernames">A string array of user names to add to the specified roles. </param>
            <param name="roleNames">A string array of role names to add the specified user names to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or <paramref name="usernames"/> is null
            <para>-or-</para>
            One of the roles specified in roleNames is null.
            <para>-or-</para>
            One of the users specified in usernames is null.</exception>
            <exception cref="T:System.ArgumentException">
            <para>-or-</para>
            One of the roles specified in roleNames is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the users specified is an empty string or is longer than 64 characters.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>usernames contains a duplicate element.
            <para>-or-</para>One of the roles was found in the repository for the application.
            <para>-or-</para>One of the users was found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRoles(System.String[],System.String[],System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRole(System.String,System.String)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="username">The user name to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRole(System.String,System.String,System.Guid)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="username">The user name to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoles(System.String,System.String[])">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="username">The user name to add to the specified roles. </param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or one of the roles is null.
            <para>-or-</para><paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles in roleNames is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters.
            <para>-or-</para><paramref name="roleNames"/> contains a duplicate element.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoles(System.String,System.String[],System.Guid)">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="username">The user name to add to the specified roles. </param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> or one of the roles is null.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>username is null.
            <para>-or-</para>applicationId is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles in roleNames is an empty string contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            username is an empty string or is longer than 64 chars.
            <para>-or-</para>roleNames contains a duplicate element.
            <para>-or-</para>application was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRole(System.Security.Principal.NTAccount[],System.String)">
            <summary>Adds the specified users to the specified role.</summary>
            <param name="roleName">The role to add the specified user names to.</param>
            <param name="accounts">An array of Windows account to add to the specified role. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRole(System.Security.Principal.NTAccount[],System.String,System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRoles(System.Security.Principal.NTAccount[],System.String[])">
            <summary>Adds the specified users to the specified roles.</summary>
            <param name="accounts">An array of Windows accounts to add to the specified roles. </param>
            <param name="roleNames">A string array of role names to add the specified user names to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">
            One of the roles specified in <paramref name="roleNames"/> is an empty string or contains invalid chars.
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRoles(System.Security.Principal.NTAccount[],System.String[],System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRolesById(System.Security.Principal.NTAccount[],System.Guid[])">
            <summary>Adds the specified Windows accounts to the specified roles.</summary>
            <param name="accounts">An array of Windows accounts to add to the specified roles. </param>
            <param name="roleIds">A string array of role id to add the specified user names to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRolesById(System.Security.Principal.NTAccount[],System.Guid[],System.Guid)">
            <summary>Adds the specified Windows accounts to the specified roles.</summary>
            <param name="accounts">An array of Windows accounts to add to the specified roles. </param>
            <param name="roleIds">A string array of role id to add the specified user names to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            The application Id was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRole(System.Security.Principal.NTAccount,System.String)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> cannot be converter to SID.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRole(System.Security.Principal.NTAccount,System.String,System.Guid)">
            <summary>Adds the specified user to the specified role.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleName">The role to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> cannot be converted to SID.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoles(System.Security.Principal.NTAccount,System.String[])">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null of one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            One of the roles specified in <paramref name="roleNames"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoles(System.Security.Principal.NTAccount,System.String[],System.Guid)">
            <summary>Adds the specified user to the specified roles.</summary>
            <param name="account">The Windows account to add to the specified role.</param>
            <param name="roleNames">A string array of roles to add the specified user name to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null of one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            One of the roles specified in <paramref name="roleNames"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository.
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoleById(System.String,System.Guid)">
            <summary>Adds the user specified by the repository id to the specified role.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleId">the repository id of the roles to add the specified user to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRoleById(System.String,System.Guid,System.Guid)">
            <summary>Adds the user specified by the repository id to the specified role.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleId">the repository id of the roles to add the specified user to.</param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null.
            <para>-or-</para>
            <paramref name="roleId"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRolesById(System.String,System.Guid[])">
            <summary>Adds a user specified by repository id to the specified roles.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to add the specified user to. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToRolesById(System.String,System.Guid[],System.Guid)">
            <summary>Adds a user specified by repository id to the specified roles.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to add the specified user to. </param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRolesById(System.String[],System.Guid[])">
            <summary>Adds a list of users specified by repository ids to the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to add to the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to add the specified users to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToRolesById(System.String[],System.Guid[],System.Guid)">
            <summary>Adds a list of users specified by repository ids to the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to add to the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to add the specified users to.</param>
            <param name="applicationId">The code of the application where you can find the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.
            <para>-or-</para>
            <paramref name="applicatinId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository
            <para>-or-</para>
            The application was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.FindUsersInRole(System.String,System.String)">
            <summary>Gets a list of users in a specified role where the user name contains the specified user name to match.</summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="roleName">The role to search in. For shared role the value must be prefixed by '#'.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in Visual Basic).
            <para>-or-</para>
            <paramref name="usernameToMatch"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or contains invalid invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') or is longer than 64 characters.
            <para>-or-</para>
            role identified by <paramref name="roleName"/> does not exists in the repository.
            <para>-or-</para>
            <paramref name="usernameToMatch"/> is an empty string.</exception>
            <returns>A string array containing the names of all the users whose user name matches usernameToMatch and who are members of the specified role.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.FindUsersInRoleById(System.Guid,System.String)">
            <summary>Gets a list of users in a specified role where the user name contains the specified user name to match.</summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="roleId">The repository of the role to search in.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="usernameToMatch"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository for belongs to another application.
            <para>-or-</para>
            <paramref name="usernameToMatch"/> is an empty string.</exception>
            <returns>A string array containing the names of all the users whose user name matches usernameToMatch and who are members of the specified role.</returns>
            <remarks>Wildcards such as asterisks and question marks can be used in the <paramref name="usernameToMatch"/> parameter value.</remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.FindUsersInRole(Novalys.VisualGuard.Security.Membership.VGRole,System.String)">
            <summary>
            Find users by VGRole and Username
            </summary>
            <param name="role"></param>
            <param name="usernameToMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.FindRolesByName(System.String,System.Guid)">
            <summary>Gets a roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleName">the name of the role to get information for.</param>
            <param name="appID">The ID of the application</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllRoles">
            <summary>Gets a list of all the roles for the application.</summary>
            <returns>A string array containing the names of all the roles stored in the repository for the application.</returns>
            <remarks>Shared roles are prefixed by '#'.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRole(System.Guid,System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <param name="applicationID">The application Id where the role come from</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRole(System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRole(System.String)">
            <summary>Gets a roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleName">the name of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser">
            <summary>Gets a list of the roles that the currently logged-on user is in.</summary>
            <returns>A string array containing the names of all roles that the currently logged-on user is in.</returns>
            <exception cref="T:System.ArgumentNullException">There is no current logged-on user.</exception>
            <remarks>this method returns the complete list of roles granted to the user for the application. This list can be different from the list of roles granted to the user for the current session (see <see cref="P:Novalys.VisualGuard.Security.VGIPrincipal.Roles"/>) that can be filtered during the authentication process.</remarks>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(System.String)">
            <summary>Gets a list of the roles that a Visual Guard user is in.</summary>
            <returns>A string array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to look in other order of the order specofy bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>Gets a list of the roles that a user is in.</summary>
            <returns>A string array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <param name="mode">the mode of authentication of the user.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <exception cref="T:System.ArgumentNullException">username is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetUsersInRole(System.String)">
            <summary>Gets a list of users in the specified role.</summary>
            <returns>A string array containing the names of all the users who are members of the specified role.</returns>
            <param name="roleName">The name of the role to get the list of users for. For shared role the name must be prefixed by '#'.</param>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string
            <para>-or-</para>
            <paramref name="roleName"/> is longer than 64 characters.
            <para>-or-</para>
            <paramref name="roleName"/> contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetUsersInRole(System.Guid)">
            <summary>Gets a list of users in the specified role.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipUserCollection"/> object containing the the users who are members of the specified role.</returns>
            <param name="roleId">A <see cref="T:System.Guid"/> value representing the role to get the list of users for. </param>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(System.Security.Principal.NTAccount)">
            <summary>Gets a list of the roles that a Windows account is in.</summary>
            <returns>A string array containing the names of all the roles that the specified user is in.</returns>
            <param name="account">The Windows account to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="account"/> cannot be converted to a valid SID.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUserById(System.String,System.Guid)">
            <summary>Gets a list of the roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <param name="applicationId">The application id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            <para>-or-</para>
            <paramref name="application"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllRolesAsCollection">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllRolesAsCollection(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Get All roles by Application
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllRolesAsCollection(System.Guid)">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <param name="appID">ID of the application you want roles collection</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="appId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="appID"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.IsUserInRole(System.String)">
            <summary>Gets a value indicating whether the currently logged-on user is in the specified role.</summary>
            <returns>true if the currently logged-on user is in the specified role; otherwise, false.</returns>
            <param name="roleName">The name of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            There is no current logged-on user.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters.
            </exception>
            <remarks>this method is equivalent to <see cref="M:Novalys.VisualGuard.Security.VGIPrincipal.IsInRole(System.String)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.IsUserInRole(System.String,System.String)">
            <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
            <returns>true if the specified user is in the specified role; otherwise, false.</returns>
            <param name="username">The name of the user to search for. </param>
            <param name="roleName">The name of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters.
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.IsUserInRole(System.Security.Principal.NTAccount,System.String)">
            <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
            <returns>true if the specified user is in the specified role; otherwise, false.</returns>
            <param name="account">The Windows account to search for. </param>
            <param name="roleName">The name of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters.
            <para>-or-</para>
            <paramref name="account"/> cannot be converted to a valid SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.IsUserInRoleById(System.String,System.Guid)">
            <summary>Gets a value indicating whether the specified user is in the specified role.</summary>
            <returns>true if the specified user is in the specified role; otherwise, false.</returns>
            <param name="userId">The repository id of the user to search for. </param>
            <param name="roleId">The repository id of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.IsUserInRole(System.Guid)">
            <summary>Gets a value indicating whether the currently logged-on user is in the specified role.</summary>
            <returns>true if the currently logged-on user is in the specified role; otherwise, false.</returns>
            <param name="roleId">The repository id of the role to search in. </param>
            <exception cref="T:System.ArgumentNullException">There is no current logged-on user.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRole(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Revoke role to user
            </summary>
            <param name="user"></param>
            <param name="role"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoles(System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGMembershipUser},System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGRole})">
            <summary>
            Revoke roles to users
            </summary>
            <param name="users"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserToFromRoles(Novalys.VisualGuard.Security.Membership.VGMembershipUser,System.Collections.Generic.ICollection{Novalys.VisualGuard.Security.Membership.VGRole})">
            <summary>
            Revoke roles to user
            </summary>
            <param name="user"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRole(System.Security.Principal.NTAccount,System.String)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="account">The windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRole(System.Security.Principal.NTAccount,System.String,System.Guid)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="account">The windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <param name="applicationId">The applicationId the remove role come from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="account"/> was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRoles(System.Security.Principal.NTAccount,System.String[])">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="account">The Windows account to remove from the specified role.</param>
            <param name="roleNames">The list of roles to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles is null.
            <para>-or-</para>
            <paramref name="account"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles is an empty string.
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="account"/> was not found in the repository for the application or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRoles(System.Security.Principal.NTAccount,System.String[],System.Guid)">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="account">The Windows account to remove from the specified role.</param>
            <param name="roleNames">The list of roles to remove the specified user from.</param>
            <param name="applicationId">The application Id where the selected role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null or one of the roles is null.
            <para>-or-</para>
            <paramref name="account"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles is an empty string.
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            One of roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="account"/> was not found in the repository for the application or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRole(System.Security.Principal.NTAccount[],System.String)">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="accounts">An array of Windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified windows accounts from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRole(System.Security.Principal.NTAccount[],System.String,System.Guid)">
            <summary>Removes the specified user from the specified list of roles.</summary>
            <param name="accounts">An array of Windows account to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified windows accounts from.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoles(System.Security.Principal.NTAccount[],System.String[])">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles  is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoles(System.Security.Principal.NTAccount[],System.String[],System.Guid)">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows account is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles  is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRolesById(System.String,System.Guid[])">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="userId">The repository id of the user to remove from the specified roles.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to remove the specified user from. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRolesById(System.String,System.Guid[],System.Guid)">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="userId">The repository id of the user to remove from the specified roles.</param>
            <param name="roleIds">An array of <see cref="T:System.Guid"/> identifying the roles to remove the specified user from. </param>
            <param name="applicationId"> The application Id <see cref="T:System.Guid"/> where the selected role come from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userId"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRolesById(System.String[],System.Guid[])">
            <summary>Removes a list of users specified by repository ids from the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null or one of the user ids is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRolesById(System.String[],System.Guid[],System.Guid)">
            <summary>Removes a list of users specified by repository ids from the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleIds">An array of repository id identifying the roles to remove the specified users from.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null or one of the user ids is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRolesById(System.Security.Principal.NTAccount[],System.Guid[])">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleIds">A string array of repository id identifying the roles to remove the specified users from.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> is an empty array.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRolesById(System.Security.Principal.NTAccount[],System.Guid[],System.Guid)">
            <summary>Removes the specified Windows accounts from the specified roles.</summary>
            <param name="roleIds">A string array of repository id identifying the roles to remove the specified users from.</param>
            <param name="accounts">An array of <see cref="T:System.Security.Principal.NTAccount"/> objects to remove from the specified roles.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleIds"/> is null.
            <para>-or-</para>
            <paramref name="accounts"/> is null or one of the Windows accounts is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> is an empty array.
            <para>-or-</para>
            <paramref name="roleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="accounts"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            One of the Windows accounts was not declared in the repository or cannot be converted to SID.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRoleById(System.String,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userId">the repository id identifying the user to remove from the specified roles.</param>
            <param name="roleId">the repository id identifying the role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repositoryor is an empty string.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRoleById(System.String,System.Guid,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userId">the repository id identifying the user to remove from the specified roles.</param>
            <param name="roleId">the repository id identifying the role to remove the specified user from.</param>
            <param name="applicationId">The application id of the selected rolecome from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repositoryor is an empty string.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRolesById(System.String[],System.String[])">
            <summary>Removes the specified user names from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="userIds">An array of string containing the list of repository ID of the users to remove from the specified roles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles is an empty string or contains invalid chars.
            <para>-or-</para>
            One of the users specified in <paramref name="userIds"/> is an empty string.
            <para>-or-</para>
            roleNames contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRolesById(System.String[],System.String[],System.Guid)">
            <summary>Removes the specified user names from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="userIds">An array of string containing the list of repository ID of the users to remove from the specified roles.</param>
            <param name="applicationId">The application Id where the role come from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">One of the roles is an empty string or contains invalid chars.
            <para>-or-</para>
            One of the users specified in <paramref name="userIds"/> is an empty string.
            <para>-or-</para>
            roleNames contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRole(System.String,System.String)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="username">The user to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            username is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRole(System.String,System.String,System.Guid)">
            <summary>Removes the specified user from the specified role.</summary>
            <param name="username">The user to remove from the specified role.</param>
            <param name="roleName">The role to remove the specified user from.</param>
            <param name="applicationId">The applicationId of the remove role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            username is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleName"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRoles(System.String,System.String[])">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified user from. </param>
            <param name="username">The user to remove from the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> is null or one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromRoles(System.String,System.String[],System.Guid)">
            <summary>Removes the specified user from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified user from. </param>
            <param name="username">The user to remove from the specified roles. </param>
            <param name="applicationId">The application Id the selected role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleNames"/> is null or one of the roles in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            <paramref name="username"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One of the roles in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="username"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            <paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRole(System.String[],System.String)">
            <summary>Removes the specified users from the specified role.</summary>
            <param name="roleName">The name of the role to remove the specified users from. </param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="usernames"/> is null or one of the user names in <paramref name="usernames"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the user names in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',')..
            <para>-or-</para>
            <paramref name="usernames"/> contains a duplicate element.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRole(System.String[],System.String,System.Guid)">
            <summary>Removes the specified users from the specified role.</summary>
            <param name="roleName">The name of the role to remove the specified users from. </param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            <para>-or-</para>
            <paramref name="usernames"/> is null or one of the user names in <paramref name="usernames"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the user names in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',')..
            <para>-or-</para>
            <paramref name="usernames"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>Removes the specified user names from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or <paramref name="usernames"/> is null.
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para><paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para><paramref name="usernames"/> contains a duplicate element.
            <para>-or-</para>One of the roles was found in the repository for the application.
            <para>-or-</para>One of the users was found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoles(System.String[],System.String[],System.Guid)">
            <summary>Removes the specified user names from the specified roles.</summary>
            <param name="roleNames">A string array of role names to remove the specified users from. For shared roles, the name must be prefixed by '#'.</param>
            <param name="usernames">A string array of user names to remove from the specified roles. </param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleNames"/> or <paramref name="usernames"/> is null.
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is null.
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>-or-</para>
            One of the roles specified in <paramref name="roleNames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para>
            One of the users specified in <paramref name="usernames"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>-or-</para><paramref name="roleNames"/> contains a duplicate element.
            <para>-or-</para><paramref name="usernames"/> contains a duplicate element.
            <para>-or-</para>One of the roles was found in the repository for the application.
            <para>-or-</para>One of the users was found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoleById(System.String[],System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleId">An array of repository id identifying the roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null or one of the users is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromRoleById(System.String[],System.Guid,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="roleId">The repository id identifying the role to remove the specified users from.</param>
            <param name="applicationId">The application <see cref="T:System.Guid"/> where the role come from</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null or one of the users is null.
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleIds"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            <para>-or-</para>
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Get List of VGRoles granted directly to the User (excluding roles coming from groups)
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllRolesForUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Get List of VGRoles granted to the User (including the roles coming from groups)
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUserById(System.String)">
            <summary>Gets a list of the roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateRole(System.String,System.String,Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Create a new role for an application
            </summary>
            <param name="roleName"></param>
            <param name="description"></param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateRole(System.String,System.String,Novalys.VisualGuard.Security.Membership.VGApplication,Novalys.VisualGuard.Security.Membership.VGPermissionSet)">
            <summary>
            Create a new role for an application
            </summary>
            <param name="roleName"></param>
            <param name="description"></param>
            <param name="application"></param>
            <param name="permissionSet"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateRole(System.String,System.String,System.Guid)">
            <summary>
            Adds a new role to the repository.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <param name="description">a short description of the role</param>
            <param name="permissionSetId">The repository id of the permission set assigned to the role. <see cref="F:System.Guid.Empty"/> when there is no permission set assigned to the role.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            <paramref name="roleName"/> is longer than 64 characters. or a role with the same name already exists in the repository.
            <para>or</para>
            <paramref name="permissionSetId"/> does not exist in the repository fro the application.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllPermissionSets"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteRole(System.String,System.Boolean)"/>
            <returns>the role added to the repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateRole(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Adds a new role to the repository.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <param name="description">a short description of the role</param>
            <param name="permissionSetId">The repository id of the permission set assigned to the role. <see cref="F:System.Guid.Empty"/> when there is no permission set assigned to the role.</param>
            <param name="applicationId">The Id of the application where you want to create the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null (Nothing in VB.Net).
            <para>-or-</para>
            <paramref name="applicationId"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            <paramref name="roleName"/> is longer than 64 characters. or a role with the same name already exists in the repository.
            <para>or</para>
            <paramref name="permissionSetId"/> does not exist in the repository from the application.
            <para>or</para>
            <paramref name="applicationId"/> does not exist in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllPermissionSets"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteRole(System.String,System.Boolean)"/>
            <returns>the role added to the repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteRole(System.String,System.Boolean)">
            <summary>
            Deletes a role specified by its name from the repository.
            </summary>
            <param name="roleName">the name of role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if <paramref name="roleName"/> has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') or is longer than 64 characters.</exception>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role or is a shared role or belongs to another application.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteRole(Novalys.VisualGuard.Security.Membership.VGRole,System.Boolean)">
            <summary>
            Deletes the role represented by the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object from the repository.
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> representing the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role or is a shared role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteRole(System.Guid,System.Boolean)">
            <summary>
            Deletes a role specified by its repository id from the repository.
            </summary>
            <param name="roleId">the repository id of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role or is a shared role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.UpdateRole(Novalys.VisualGuard.Security.Membership.VGRole)">
            <summary>
            Updates the repository with the information for the specified role. 
            </summary>
            <param name="role">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object that represents the role to be updated and the updated information for the role.</param>
            <exception cref="T:System.ArgumentNullException">role is null.</exception>
            <exception cref="T:System.ArgumentException">the <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to load the <paramref name="role"/> is not the current instance.</exception>
            <exception cref="T:System.InvalidOperationException">
            the permission set granted to the role was not found in the repository.
            <para>-or-</para>
            a role with the same name already exists for the application.</exception>
            <exception cref="T:System.InvalidOperationException">the permission set granted to the role was not found in the repository.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUsersToSharedRolesById(System.String[],System.Guid[])">
            <summary>Adds a list of users specified by repository ids to the specified roles.</summary>
            <param name="userIds">An array of repository id identifying the users to add to the specified roles.</param>
            <param name="sharedRoleIds">An array of repository id identifying the roles to add the specified users to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedRoleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sharedRoleIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the roles was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not declared in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.AddUserToSharedRoleById(System.String,System.Guid)">
            <summary>Adds the user specified by the repository id to the specified role.</summary>
            <param name="userId">The repository id of the user to add to the specified role.</param>
            <param name="sharedRoleId">the repository id of the roles to add the specified user to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sharedRoleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUserFromSharedRoleById(System.String,System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userId">the repository id identifying the user to remove from the specified roles.</param>
            <param name="sharedRoleId">the repository id identifying the role to remove the specified user from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sharedRoleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repositoryor is an empty string.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromSharedRoleById(System.String[],System.Guid)">
            <summary>Removes a list of users specified specified by repository id from the specified role.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified roles.</param>
            <param name="sharedRoleId">An array of repository id identifying the roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="userIds"/> is null or one of the users is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sharedRoleId"/> was not found in the repository for the application.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RemoveUsersFromSharedRolesById(System.String[],System.Guid[])">
            <summary>Removes a list of users specified by repository ids from the specified shared roles.</summary>
            <param name="userIds">An array of repository id identifying the users to remove from the specified shared roles.</param>
            <param name="sharedRoleIds">An array of repository id identifying the shared roles to remove the specified users from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedRoleIds"/> is null.
            <para>-or-</para>
            <paramref name="userIds"/> is null or one of the user ids is null.</exception>
            <exception  cref="T:System.ArgumentException">
            <paramref name="sharedRoleIds"/> contains a duplicate element.
            <para>-or-</para>
            <paramref name="userIds"/> contains a duplicate element.
            <para>-or-</para>
            One of the users was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSharedRole(System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSharedRole(System.Guid,System.Guid)">
            <summary>Gets a role for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified role. null if the role was not found in the repository or does not belong to the application.</returns>
            <param name="roleId">the repository id of the role to get information for.</param>
            <param name="applicationID">The application ID of the role to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGApplication.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllSharedRolesAsCollection">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <param name="appID">the ID of the application</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllSharedRolesAsCollection(System.Guid)">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all the roles for the application.</summary>
            <param name="ApplicationId">ID of the application where you want shared roles collection</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="ApplicationId"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSharedRolesForUser(System.String)">
            <summary>Gets a list of the shared roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> containing all shared roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to look in other order of the order specofy bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSharedRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>Gets a list of the shared roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> containing the the shared roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <param name="mode">the mode of authentication of the user.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <exception cref="T:System.ArgumentNullException">username is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSharedRolesForUserById(System.String)">
            <summary>Gets a list of the shared roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.FindSharedRolesByName(System.String)">
            <summary>Gets a shared roles for the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object representing the specified shared role. null if the shared role was not found in the repository or does not belong to the application.</returns>
            <param name="roleName">the name of the role to get information for.</param>
            <param name="appID">The ID of the application</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateSharedRole(System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Adds a new role to the repository.
            </summary>
            <param name="roleName">The name of the role to create.</param>
            <param name="description">a short description of the role</param>
            <param name="permissionSetId">The repository id of the permission set assigned to the role. <see cref="F:System.Guid.Empty"/> when there is no permission set assigned to the role.</param>
            <param name="applicationId">The Id of the application where you want to create the specified roles. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="roleName"/> is null (Nothing in VB.Net).
            <para>-or-</para>
            <paramref name="applicationId"/>is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            <paramref name="roleName"/> is longer than 64 characters. or a role with the same name already exists in the repository.
            <para>or</para>
            <paramref name="permissionSetId"/> does not exist in the repository fro the application.
            <para>or</para>
            <paramref name="applicationId"/> does not exist in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllPermissionSets"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteRole(System.String,System.Boolean)"/>
            <returns>the role added to the repository.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteSharedRole(System.Guid,System.Boolean)">
            <summary>
            Deletes a Shared role specified by its repository id from the repository.
            </summary>
            <param name="sharedRoleId">the repository id of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGRole.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteSharedRole(System.String,System.Boolean)">
            <summary>
            Deletes a shared role specified by its name from the repository.
            </summary>
            <param name="sharedRoleName">the name of shared role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if <paramref name="sharedRoleName"/> has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null (Nothing in VB.Net).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleName"/> is an empty string or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') or is longer than 64 characters.</exception>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteSharedRole(Novalys.VisualGuard.Security.Membership.VGRole,System.Boolean)">
            <summary>
            Deletes the shared role represented by the specified <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> object from the repository.
            </summary>
            <param name="sharedRole">A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRole"/> representing the shered role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throws an exception if roleName has one or more members.</param>
            <returns>true if the role was deleted from the repository; otherwise; false.</returns>
            <exception cref="T:System.InvalidOperationException">the role is marked as a built-in role.
            <para>-or-</para>
            the role has one or more members and throwOnPopulatedRole is true.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSpecialRolesForUser(System.String)">
            <summary>Gets a list speciales roles that a Visual Guard user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            a user with a name equals to <paramref name="username"/> was not found in the repository.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="username"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <remarks>For application supporting more than one Authentication mode, this method will look an account with the same name in the following order: Visual Guard account, Database account, Windows account.
            <para>The method will only look for supported authentication modes declared in the Visual Guard configuration file.</para>
            If you to look in other order of the order specofy bellow, you have to use the method <see cref="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSpecialRolesForUser(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>Gets a list of speciales roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> array containing the names of all the roles that the specified user is in.</returns>
            <param name="username">The user to return a list of roles for. </param>
            <param name="mode">the mode of authentication of the user.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty or longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',') for Visual Guard account.
            <para>-or-</para>
            <paramref name="username"/> cannot be converted to SID for Windows Account.
            <para>-or-</para>
            <paramref name="mode"/> is not equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or is a combination of several values.
            </exception>
            <exception cref="T:System.ArgumentNullException">username is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSpecialRolesForUser(System.Security.Principal.NTAccount)">
            <summary>Gets a list of speciales roles that a Windows account is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> array containing the names of all the roles that the specified user is in.</returns>
            <param name="account">The Windows account to return a list of roles for. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="account"/> cannot be converted to a valid SID.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="account"/> is null.</exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSpecialRolesForUserById(System.String)">
            <summary>Gets a list of speciale roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetSpecialRolesCollectionForUserById(System.String)">
            <summary>Gets a list of speciale roles that a user is in.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> object containing the roles that the specified user is in.</returns>
            <param name="userId">The repository id of the user to return a list of roles for.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="userId"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="userId"/> is an empty string.
            <para>-or-</para>
            <paramref name="userId"/> was not found in the repository
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
            <seealso cref="P:Novalys.VisualGuard.Security.Membership.VGMembershipUser.RepositoryId"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllSpecialRolesAsCollection(System.Guid)">
            <summary>Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object representing the list of all speciale roles for the application.</summary>
            <param name="appID">the ID of the application</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGRoleCollection"/> object containing all the roles stored in the repository for a particular application.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="appID"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="appID"/> was not found in the repository.
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RoleExists(System.String)">
            <summary>
            Checks whether a role exists in the current repository for the application
            </summary>
            <param name="roleName">the name of the role. For shared role the name must be prefixed by '#'.</param>
            <returns>true if the role exists false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RoleExists(System.Guid)" -->
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.SharedRoleExists(System.String)">
            <summary>
            Checks whether a shared role exists in the current repository
            </summary>
            <param name="sharedRoleName">the name of the shared role. The shared role the name must be prefixed by '#'.</param>
            <returns>true if the shared role exists false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedRoleName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="roleName"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            </exception>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DefaultRole">
            <summary>
            Gets the name of the default role of the application.
            </summary>
            <value>the name of the default role of the current application, null (Nothing in Visual Basic) if there is no default role.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllPermissionSets">
            <summary>Gets a list of the permission set from the application.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSetCollection"/> object representing the list of permission sets for the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesByPermissionSet(Novalys.VisualGuard.Security.Membership.VGPermissionSet)">
            <summary>
            Gets roles to which this particular permissionset has been assigned.
            This method does not contain roles of sub permissionsets.
            </summary>
            <param name="permissionSet">permissionset</param>
            <returns>roles to which this permissionset has been assigned</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetRolesByPermissionSet(Novalys.VisualGuard.Security.Membership.VGPermissionSet,System.Boolean)">
            <summary>
            Gets roles to which this particular permissionset has been assigned.
            This method can contain roles of sub permissionset also, depending on parameter - isIncludeRolesForSubPermissionSet
            </summary>
            <param name="permissionSet">permissionset</param>
            <param name="isIncludeRolesForSubPermissionSet">true if want to include roles of subpermissionsets else false</param>
            <returns>roles to which this permissionset has been assigned</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetPermissionSet(System.Guid)">
            <summary>
            Gets a permission set for the application
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the specified permission set. null if the permission set was not found in the repository or does not belong to the application.</returns>
            <param name="permissionSetId">the repository id of the permission set to get information for.</param>
            <exception cref="T:System.Security.SecurityException">The current user does not have enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetPermissionSet(System.Guid,System.Guid)">
            <summary>
            Gets a permission set for the application
            </summary>
            <param name="permissionSetId">the repository id of the permission set to get information for./// </param>
            <param name="applicationId">The id of the application where the permission comme from</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the specified permission set. null if the permission set was not found in the repository or does not belong to the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.FindPermissionSetByName(System.String,System.Guid)">
            <summary>
            Gets a permission set list for the selected permission name and for the application
            </summary>
            <param name="permissionSetName">the name of the permission set to get information for.</param>
            <param name="applicationId">The id of the application where the permission comme from</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="applicationId"/> was not found in the repository.
            </exception>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Membership.VGPermissionSet"/> object representing the specified permission set. null if the permission set was not found in the repository or does not belong to the application.</returns>
            <exception cref="T:System.Security.SecurityException">The current user has not enough privileges to use Membership API. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType,System.String,System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGIProfileAttributeDefinition)">
            <summary>
            Creates profile attribute for role.
            </summary>
            <param name="propertyName">PropertyName for attribute</param>
            <param name="dataType">Datattype for attribute</param>
            <param name="displayName">DisplayName for attribute</param>
            <param name="description">Description</param>
            <param name="profileAttributeDefinition">ProfileAttributeDefinition object</param>
            <returns>Created profileAttribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGIProfileAttributeDefinition)">
            <summary>
            Creates profile attribute for role.
            </summary>
            <param name="propertyName">PropertyName for attribute</param>
            <param name="dataType">Datattype for attribute</param>
            <param name="displayName">DisplayName for attribute</param>
            <param name="description">Description</param>
            <param name="isVisible">IsVisibile</param>
            <param name="isReadOnly">IsReadonly</param>
            <param name="isRequired">Is Required</param>
            <param name="allowSearch">Allow Search, Set true if you want to allow search roles by this attribute else false</param>
            <param name="viewOrder">Viewing Order of the attribute</param>
            <param name="groupName">GroupName to categorize attributes</param>
            <param name="profileAttributeDefinition">ProfileAttributeDefinition object</param>
            <returns>Created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGIProfileAttributeDefinition)">
            <summary>
            Creates profile attribute for role.
            </summary>
            <param name="propertyName">PropertyName for attribute</param>
            <param name="dataType">Datattype for attribute</param>
            <param name="displayName">DisplayName for attribute</param>
            <param name="description">Description</param>
            <param name="isVisible">IsVisibile</param>
            <param name="isReadOnly">IsReadonlyForAPI</param>
            <param name="isReadOnlyForUI">IsReadonlyForUI</param>
            <param name="isRequired">Is Required</param>
            <param name="allowSearch">Allow Search, Set true if you want to allow search roles by this attribute else false</param>
            <param name="viewOrder">Viewing Order of the attribute</param>
            <param name="groupName">GroupName to categorize attributes</param>
            <param name="profileAttributeDefinition">ProfileAttributeDefinition object</param>
            <returns>Created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGIProfileAttributeDefinition,System.Boolean)">
            <summary>
            Creates profile attribute for role.
            </summary>
            <param name="propertyName">PropertyName for attribute</param>
            <param name="dataType">Datattype for attribute</param>
            <param name="displayName">DisplayName for attribute</param>
            <param name="description">Description</param>
            <param name="isVisible">IsVisibile</param>
            <param name="isReadOnly">IsReadonlyForAPI</param>
            <param name="isReadOnlyForUI">IsReadonlyForUI</param>
            <param name="isRequired">Is Required</param>
            <param name="allowSearch">Allow Search, Set true if you want to allow search roles by this attribute else false</param>
            <param name="viewOrder">Viewing Order of the attribute</param>
            <param name="groupName">GroupName to categorize attributes</param>
            <param name="profileAttributeDefinition">ProfileAttributeDefinition object</param>
            <param name="isSaveInLog">Set it to true if attribute values need to be saved in log while modifying or deleting a role otherwise set it false</param>
            <returns>Created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType,Novalys.VisualGuard.Security.CommonProfileAttribute.VGIProfileAttributeDefinition)">
            <summary>
            Creates profile attribute for role.
            </summary>
            <param name="propertyName">PropertyName for attribute</param>
            <param name="dataType">Datattype for attribute</param>
            <param name="profileAttributeDefinition">ProfileAttributeDefinition object</param>
            <returns>Created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.CreateProfileAttribute(System.String,Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType)">
            <summary>
            Creates profile attribute for role.
            </summary>
            <param name="propertyName">PropertyName for attribute</param>
            <param name="dataType">Datattype for attribute</param>
            <returns>Created profile attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.UpdateProfileAttribute(Novalys.VisualGuard.Security.Membership.VGRoleProfileAttribute)">
            <summary>
            Updates profile attribute for role.
            </summary>
            <param name="roleProfileAttribute">roleProfileAttribute</param>
            <returns>updated roleProfileAttribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.UpdateProfileAttributeViewOrder(System.Guid,System.Int32)">
            <summary>
            Updates profileAttribute ViewOrder
            </summary>
            <param name="profileAttributeId">profileAttributeId</param>
            <param name="newViewOrderNumber">new ViewOrderNumber</param>
            <returns>updated roleProfileAttribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.DeleteProfileAttribute(Novalys.VisualGuard.Security.Membership.VGRoleProfileAttribute)">
            <summary>
            Deletes profile Attribute.
            </summary>
            <param name="roleProfileAttribute">roleProfileAttribute</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllProfileAttributes">
            <summary>
            Gets all profile attributes for role.
            </summary>
            <returns>Profile Attributes for role</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAllProfileAttributes(System.Int32,System.Int32)">
            <summary>
            Gets all profile attributes for role.
            </summary>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <returns>Profile Attributes for role</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetProfileAttributeById(System.Guid)">
            <summary>
            Gets profile attribute by roleProfileAttributeId.
            </summary>
            <param name="attributeId">roleProfileAttributeId</param>
            <returns>VGRoleProfileAttribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetProfileAttributeByName(System.String)">
            <summary>
            Gets profile attribute by attribute name.
            </summary>
            <param name="attributeName">attribute name</param>
            <returns>VGRoleProfileAttribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetProfileAttributeDefinition(Novalys.VisualGuard.Security.CommonProfileAttribute.VGCommonProfileDataType)">
            <summary>
            Gets profile attribute Definition by Datatype
            </summary>
            <param name="datatypeEnum">DatatypeEnum</param>
            <returns>profileattribute Definition object for particular datatype</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GrantPermissionToRole(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            This method grants permission to role.
            </summary>
            <param name="role">role to which you want to assign permission</param>
            <param name="permission">permission you want to assign.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.RevokePermissionFromRole(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGPermission)">
            <summary>
            This method revokes permission from role.
            </summary>
            <param name="role">role form which you want to revoke permission</param>
            <param name="permission">permission you want to revoke.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRolesInstance.GetAttributes(Novalys.VisualGuard.Security.Membership.VGRole,Novalys.VisualGuard.Security.Membership.VGPermission)">
             <summary>
             Get all attributes of permission contained in role
             </summary>
             <example>
             <p>How to change the value of attribut</p>
             <code lang="C#">
             
             </code>
            
             </example>
             <param name="role"></param>
             <param name="permission"></param>
             <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRuntimeModuleInstance.GetModules``1">
            <summary>
            Get modules of particular feature type (VGIRuntimeModuleFeature)
            </summary>
            <typeparam name="T">runtimeModule Feature type</typeparam>
            <returns>Listof modules which supports particular runtimeModule Feature type.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRuntimeModuleInstance.GetAllRuntimeModuleNames">
            <summary>
            Get all available Runtime modules' names.
            </summary>
            <returns>Module names in list of string.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRuntimeModuleInstance.GetAllRuntimeModules">
            <summary>
            Get all available runtime modules.
            </summary>
            <returns>all custom identity modules</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGRuntimeModuleInstance.GetRuntimeModule(System.String)">
            <summary>
            Get Runtime module by modulename
            </summary>
            <param name="moduleName">moduleName to get</param>
            <returns>RuntimeModule </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGTokensInstance">
            <summary>
            Manager of VG Token security
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetUserByToken(Novalys.VisualGuard.Security.Token.VGToken)">
            <summary>
            Get the user linked by the token
            </summary>
            <param name="token">Represente a token</param>
            <returns>User of this </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetAllVGTokens">
            <summary>
            Get all tokens
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetAllVGTokensByUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetAllVGTokensByApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            
            </summary>
            <param name="tokenApplication"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetVGTokenCountByUser(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetVGTokenCountByApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            
            </summary>
            <param name="tokenApplication"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.GetVGTokenDetails(Novalys.VisualGuard.Security.Token.VGTokenData)">
            <summary>
            
            </summary>
            <param name="tokenData"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGTokensInstance.DeleteVGToken(Novalys.VisualGuard.Security.Token.VGTokenData)">
            <summary>
            Delete VGToken 
            </summary>
            <param name="tokenData"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGToolsInstance.GetLocalTime(Novalys.VisualGuard.Security.Membership.VGIMembershipObject)">
            <summary>
            Return the local time of the VGEntity
            </summary>
            <param name="apiEntity"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGWebPortal">
            <summary>
            WebPortal Manager
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.Id">
            <summary>
            Id of the webportal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.AllowMultipleIdentity">
            <summary>
            Can allow a multiple Identity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.AllowToRememberPwd">
            <summary>
            Can allow the remember password
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.AllowToSaveLoginInfo">
            <summary>
            Allow to save login
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.DaysToSave">
            <summary>
            Number of the days to save
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.Name">
            <summary>
            Name of the webportal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.Url">
            <summary>
            Url of the webportal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.MainPageText">
            <summary>
            Main text in the main page
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.LastModification">
            <summary>
            Last modification of the webPortal (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebPortal.LastModificationLT">
            <summary>
            Last modification of the webPortal (Local Time)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGWebPortalInstance">
            <summary>
            Manager of WebPortal
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebPortalInstance.Create(System.String,System.String)">
            <summary>
            Create a new webportal
            </summary>
            <param name="name"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebPortalInstance.Update(Novalys.VisualGuard.Security.Membership.VGWebPortal)">
            <summary>
            Update the webportal
            </summary>
            <param name="webPortal"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebPortalInstance.Delete(Novalys.VisualGuard.Security.Membership.VGWebPortal)">
            <summary>
            Delete the webportal
            </summary>
            <param name="webPortal"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebPortalInstance.GetWebPortal(System.Guid)">
            <summary>
            Get the webportal by ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebPortalInstance.GetAllWebPortals">
            <summary>
            Gat all webportal in the VGRepository
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGWebUserInterface">
            <summary>
            Preference of the web interface for WebConsole or WebPortal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.SupportedImageFormats">
            <summary>
            Return the type of image is supported
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.Update(Novalys.VisualGuard.Security.UserInterface.VGWebUserInterfaceInformation)">
            <summary>
            Update the internal data
            </summary>
            <param name="userInterface"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.Id">
            <summary>
            Return the Id of VGWebUserInterface
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.CompanyName">
            <summary>
            Get or Set the company name
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.CompanyUrl">
            <summary>
            Get ot set the company url
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.CSSData">
            <summary>
            Get or Set Css 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.IsActive">
            <summary>
            Get or Set allow the custom web interface
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.UserInterface">
            <summary>
            Get or set web console v2 properties.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.Image">
            <summary>
            Get or Set the logo
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.ImageType">
            <summary>
            Get the the of the Image property (Logo of web Interface)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.ImageExt">
            <summary>
            Get the extension of the Image
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.Novalys#VisualGuard#Security#Membership#VGIMembershipObject#Id">
            <summary>
            Return the ID for the documentation
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.LastModification">
            <summary>
            Last modification of VGWebUserInterface (Server Time)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterface.LastModificationLT">
            <summary>
            Last modification of VGWebUserInterface (Local Time)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance">
            <summary>
            Manage of Web user interface
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.Create(Novalys.VisualGuard.Security.UserInterface.VGUserInterfaceType)">
            <summary>
            Create a new WebUserInterface
            </summary>
            <param name="userInterfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.Get(System.Guid)">
            <summary>
            Get VGWebUserInterface by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.Update(Novalys.VisualGuard.Security.Membership.VGWebUserInterface)">
            <summary>
            Update the VGWebUserInterface in the VG Repository
            </summary>
            <param name="webUserInterface"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.Delete(Novalys.VisualGuard.Security.Membership.VGWebUserInterface)">
            <summary>
            Delete the VGWebUserInterface
            </summary>
            <param name="webUserInterface"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.GetAllWebUserInterface">
            <summary>
            Return All VGWebUserInterfaces contains in VG Repository
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.DefaultLogoWebPortal">
            <summary>
            Return the default logo for the VG Web Portal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Membership.VGWebUserInterfaceInstance.DefaultLogoWebConsole">
            <summary>
            Return the default logo for the VG Web Console
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWorkFlowInstance.SetWorkFlowImpersonatedUserIdentity(Novalys.VisualGuard.Security.Membership.VGMembershipUser)">
            <summary>
            Sets workflow impersonated user identity for workflow execution.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWorkFlowInstance.GetWorkFlowImpersonatedUserIdentity">
            <summary>
            Gets impersonated user set for workflow to be executed with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Membership.VGWorkFlowInstance.GetWorkFlowImpersonatedUserName">
            <summary>
            Get the workflow executing impersonated username.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Membership.VGRepositoryType">
            <summary>
            Describes the Type of a <see cref="P:Novalys.VisualGuard.Security.Membership.VGRepository.RepositoryType"/> operation. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryType.SqlServer">
            <summary>
            Sql Server repository.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryType.Oracle">
            <summary>
            Oracle repository.
            </summary>
            
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryType.File">
            <summary>
            File repository.
            </summary>
            
        </member>
        <member name="F:Novalys.VisualGuard.Security.Membership.VGRepositoryType.Nothing">
            <summary>
            Null.
            </summary>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.Module.ModuleFeaturesInformation.VGModuleFeatureManager.GetAllAvailableModulesFeatureInformation">
            <summary>
            Gets all available features for module development.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Module.VGModuleType">
            <summary>
            Define the type of the module
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGActiveTokenGraphSeries.AppId">
            <summary>
            Gets or sets ApplicationId 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGActiveTokenGraphSeries.UserId">
            <summary>
            Gets or sets UserId
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGActiveWorkflowInstanceSeries.AppId">
            <summary>
            Gets or sets ApplicationId 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGActiveWorkflowInstanceSeries.UserId">
            <summary>
            Gets or sets UserId
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries">
            <summary>
            Represents a class for VGEventId supported Graph series 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries.EventId">
            <summary>
            Gets or sets eventId
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries.AppId">
            <summary>
            Gets or sets ApplicationId 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries.UserName">
            <summary>
            Gets or sets Username 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries.UserId">
            <summary>
            Gets or sets UserId
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries.MachineName">
            <summary>
            Gets or sets MachineName
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGEventIdGraphSeries.Severity">
            <summary>
            Gets or sets severity
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.GraphSeriesContainer.VGIGraphSeries">
            <summary>
            Represents an interface for Graph series (ex. VGEventIdGraphSeries, VGActiveTokenGraphSeries etc.)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraph">
            <summary>
            Represents single VGGraph Series -> ex. graph for successfulLogins 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGGraphDataPoint`2">
            <summary>
            Represents VGGraph's data point -> X,Y Coordinates
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGGraphDataPointInformation.VGAttendanceGraphDataPointInformation">
            <summary>
            Represents VGGraph Datapoint's information for Attendance graph.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGGraphDataPointInformation.VGHistoricalGraphDataPointInformation">
            <summary>
            Represents VGGraph Datapoint's information for Historical graph.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGGraphDataPointInformation.VGIGraphDataPointInformation">
            <summary>
            Interface for representing dataPoint information for different types of charts.Historical, RealTime, Attendance
            </summary>    
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGGraphDataPointInformation.VGRealTimeGraphDataPointInformation">
            <summary>
            Represents VGGraph Datapoint's information for RealTime graph.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDataPoint.VGIGraphDataPoint">
            <summary>
            Represents interface for VGGraphDataPoint
            </summary>    
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDurationTypes">
            <summary>
            Represents enum for VGGraphTypes, ex. Hourly, Daily, Monthly etc.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDurationTypes.Hourly">
            <summary>
            Hourly
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDurationTypes.Daily">
            <summary>
            Daily
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Monitoring.Graphs.VGGraphDurationTypes.Monthly">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGIGraph">
            <summary>
            Represents interface for VGGraph
            </summary>    
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGMonitoringGraphInformation">
            <summary>
            Represents a class containing graph information for all graph series. 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.Graphs.VGMonitoringGraphTypes">
            <summary>
            Represents enum for MonitoringGraph Type. ex. AttendanceHours, HistoricalData, RealTime etc.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Monitoring.VGMonitoringEntry">
            <summary>
            Represents a class for VGMonitoringEntry.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.OfflineMode.OfflineHelper.SavePrincipal(Novalys.VisualGuard.Security.VGIPrincipal,Novalys.VisualGuard.Security.VGGrantedRole[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <param name="isAnonymous"></param>
            <exception cref="T:System.IO.IOException"> Thrown when save offline files</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.OfflineMode.OfflineHelper.GetFileName(System.String)">
            <summary>
            Generate a file name base on a token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.OfflineMode.VGCheckForOnlineStatus">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityLoaded"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData">
            <summary>
            Configuration data for the Visual Guard Permission Provider.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData.#ctor">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> class.</para>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData.#ctor(System.String)">
            <summary>
            <para>Initialize a new instance of the <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> class with a name.</para>
            </summary>
            <param name="name">
            <para>The name of the provider.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderDataCollection">
            <summary>
            Represents a strongly-typed collection of 
            <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> objects.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderDataCollection.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> by its index.
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> to get or set.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderDataCollection.Add(Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> into the collection.</para>
            </summary>
            <param name="providerData">
            <para>The <see cref="T:Novalys.VisualGuard.Security.Permission.Configuration.VGPermissionProviderData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/>, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="providerData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><seealso cref="P:Novalys.VisualGuard.Security.EntLib.Configuration.ProviderData.Name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Execution.TargetedAction.IsAlive">
            <summary>
            Indicates if the targeted action is alive
            </summary>
            <returns>true if the action is alive, false otherwise.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Execution.VGBaseExecutionEngine">
            <summary>
            Common Base Execution Engine (For .NetFramework and .netcore)
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Execution.VGBaseExecutionEngine.#ctor(Novalys.VisualGuard.Security.VGIPrincipal,Novalys.VisualGuard.Security.VGSecurityErrorEventHandler,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Permission.Execution.VGBaseExecutionEngine"/>
            </summary>
            <param name="principal">the principal for which you want to execute security actions</param>
            <param name="securityErrorHandler">the handler used when an error occurs.</param>
            <param name="checkForAspNet">Indicates that the execution engine should check if the component to secure is an ASP.Net Page, UserControl or MasterPage.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Execution.VGBaseExecutionEngine.AddTargetedAction(Novalys.VisualGuard.Security.Permission.Execution.TargetedAction)">
            <summary>
            Clean up actions with a target that is not alive
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Execution.CommonEventHandlerDlgt">
            <summary>
            The generic delegate used to handle all types of event.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Execution.VGEventHandlerTypeEmitter">
            <summary>
            Used to generate dynamically Event handler
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Execution.VGEventHandlerTypeEmitter.GetEventHandlerType(System.Reflection.EventInfo)">
            <summary>
            Emits dynamically a event handler with a given signature, which fills all arguments of the event in an object array 
            and calls a common event.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Execution.VGExecutionEngineProvider">
            <summary>
            Represents a class for Creating execution engine depending on type - whether it is for core.net or .net framework.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Execution.VGExecutionEngineType">
            <summary>
            Enum for VGExecution Engine Types. (ex. NetFramework, NetCore)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.Execution.VGExecutionEngineType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.Execution.VGExecutionEngineType.VGNetFrameworkExecutionEngine">
            <summary>
            .NET FRAMEWORK  PLATFORM
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.Execution.VGExecutionEngineType.VGNetCoreExecutionEngine">
            <summary>
            CORE .NET PLATFORM
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine">
            <summary>
            Represents an interface for execution engine.
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.SecurityError">
            <summary>
            Event to be raised while security error.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.Type">
            <summary>
            Gets Type of Execution Engine
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.IsDisposed">
            <summary>
            Gets if Execution engine is disposed or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.IsEnabled">
            <summary>
            Gets if Execution engine is enabled or not
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.Principal">
            <summary>
            Gets principal for this execution engine.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.SetSecurity(System.Object,System.Type)">
            <summary>
            Sets security.
            </summary>
            <param name="target">Target object</param>
            <param name="type">Type of object.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Execution.VGIExecutionEngine.SecurityErrorHandler(Novalys.VisualGuard.Security.Permission.Execution.VGGrantedActionExecution,System.Exception)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="e"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.Execution.VGInterceptionManager.Intercept(System.Type)">
            <summary>
            Activates object creation interception for the given type.
            Construction messages will be processed by calling the provided delegate.
            </summary>
            <param name="type">the type to intercept</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute">
            <summary>
            Represents an attribute of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.IsDefaultValue">
            <summary>
            Gets a value indicating whether the value is the default value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.ToString">
            <summary>
            Converts the attribute into a string.
            </summary>
            <returns>A string value representing the attribute.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGCurrentValueAttribute.Id">
            <summary>
            Gets the unique id of the argument
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction">
            <summary>
            Represents a granted action.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> class that will be edited in the console.
            </summary>
            <param name="actionType">the type of the <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> permitted</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.#ctor(System.String,Novalys.VisualGuard.Security.Common.VGHashtable,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> class.
            </summary>
            <param name="actionType">the type of the <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> permitted</param>
            <param name="args">The list of arguments used to execute the action.</param>
            <param name="conditionExpression">The expression used to evaluate if the action must be execute in the context of execution. If the expression is empty the expression is evaluated to <c>true</c></param>
            <param name="targetTypeName">the assembly qualified name of the target.</param>
            <param name="eventName">the name of the event for which the action will be executed.</param>
            <param name="displayName">the name displayed at design time.</param>
            <param name="description">the description of the action displayed at design time.</param>
            <param name="permission">The permission for which the action will be executed (only at runtime). null at design-time</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.ActionType">
            <summary>
            Gets the type of the permitted <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.RuntimeActionType">
            <summary>
            Gets the type of the permitted <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> at runtime.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.RuntimeTargetType">
            <summary>
            Gets the type of the target at runtime.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.Args">
            <summary>
            Gets the list of arguments used to execute the permitted <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.ConditionExpression">
            <summary>
            Gets the list of arguments used to execute the permitted <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/>.
            </summary>
            <summary>
            Gets the expression used to evaluate if the action must be executed. When the expression is empty the condition is evaluate to true.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.TargetTypeName">
            <summary>
            Gets a string containing the fully qualified type name of the target for which the action must be executed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.DisplayName">
            <summary>
            Gets or sets the display name of the action for the Visual Guard console.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.Description">
            <summary>
            Gets or sets the description of the action for the Visual Guard console.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.EventName">
            <summary>
            Gets the name of the event for which the action will be executed
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.CheckArguments(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            <para>Evaluates if all the arguments of the action are valid.</para>
            </summary>
            <remarks>This method is used only at design time.</remarks>
            <returns>
            <para><c>null</c> if the action can be executed or <c>the text of the error</c> if one or more parameters are not valid.</para>
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.CheckArguments(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider)">
            <summary>
            Evaluates if all the arguments of the action are valid
            </summary>
            <param name="permission">permission</param>
            <param name="provider">Application processor provider to get information about type (Used for .net Core)</param>
            <remarks>This method is used only at design time.</remarks>
            <returns>if all the arguments of the action are valid</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.CreateAction">
            <summary>
            Creates the <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> stored in this granted action.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> object.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException">The type name of the action is invalid or is not derived from <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/>.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.Duplicate(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission)">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> instance that is a deeply copy of the current instance.  
            </summary>
            <remarks>this method can be used only at design time in the Visual Guard console.</remarks>
            <returns>A new <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> instance that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.Duplicate(Novalys.VisualGuard.Security.Permission.VGIGrantedPermission,Novalys.VisualGuard.Security.AssemblySystem.ApplicationProcessor.VGIApplicationProcessorProvider)">
            <summary>
            Creates a new <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> instance that is a deeply copy of the current instance.  
            </summary>
            <remarks>this method can be used only at design time in the Visual Guard console.</remarks>
            <returns>A new <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> instance that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.PrepareAction">
            <summary>
            Prepares the action to be executed.
            </summary>
            <remarks>this method is called just after loadings all permissions for a user.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedAction.IsComplete">
            <summary>
            Gets a value indicating whether the action is completely created
            </summary>
            <remarks>this property is used at design time to check if an action has been completely created.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.Clone">
            <summary>
            Gets a copy of the objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedAction.ConvertTypeFromString(System.String,System.Reflection.Assembly)">
            <summary>
            Convert the specified type as string to a <see cref="T:System.Type"/> object.
            </summary>
            <param name="actionType">The fully qualified name of the object</param>
            <param name="defaultAssembly">the default assembly in which the type must be looked for.</param>
            <returns>The type corresponding to the specified value;</returns>
            <exception cref="T:System.TypeLoadException">The specified type is not found or cannot be loaded.</exception>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">The specified type is not found or cannot be loaded.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">The specified type is not found or cannot be loaded.</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGGrantedPermission">
            <summary>
            Represents a permission granted to a permission set.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedPermission.#ctor(Novalys.VisualGuard.Security.Permission.VGIPermissionInformation,System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedPermission"/>
            </summary>
            <param name="permission">the permission granted to the permission set</param>
            <param name="isBuiltIn">Indicates if the permission set is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedPermission.Clone">
            <summary>
            Creates a new VGGrantedPermission instance that is a copy of the current instance.  
            </summary>
            <returns>A new VGGrantedPermission instance that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedPermission.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGGrantedPermission.GetStandardAttributes">
            <summary>
            Gets the list of standard attributes
            </summary>
            <returns>the list of standard attributes</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGGrantedPermission.IdOrOriginalId">
            <summary>
            Gets the unique Visual Guard identifier that will be see in the application
            </summary>
            <remarks>returns the original id if it is a new version of another permission.</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission">
            <summary>
            Defines the basic functionality for a permission granted to a permission set.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.GetStandardAttributes">
            <summary>
            Gets an array of standard attributes (Username, RoleNames, CurrentValue)
            </summary>
            <returns>an array of standard attributes</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.IsBuiltIn">
            <summary>
            Gets a value that indicates whether the information is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.Attributes">
            <summary>
            Gets or sets the attributes (arguments) list of the permission
            </summary>
            <remarks>this attribute list is defined at design time by using the Visual Guard console. To edit the attributes list, you must use the menu option 'Action>Edit arguments list' when the permission is selecting.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.Actions">
            <summary>
            Gets or sets the list of <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.Owner">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> that is the owner of this permission.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.PrepareActions">
            <summary>
            Prepares all security actions attached to the permission to be executed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission.FullNameHashCode">
            <summary>
            Gets or the hash code of the full name of the permission, including the folder path
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException">
            <summary>
            Exception thrown when the type name of a <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> stored in a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> is not valid or if the is not derived from VGSecurityAction.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGInvalidActionTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported">
            <summary>
            Defines an object which supports permissions for audit purpose.
            VGMembershipUser, VGGroup, VGRole, VGPermissionSet supports VGIPermissionAuditSupported feature.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported.Id">
            <summary>
            Gets Id of the entity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported.Name">
            <summary>
            Gets Name of the entity
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported.Type">
            <summary>
            Gets entityType
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionAuditSupported.Description">
            <summary>
            Gets description of the entity
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation">
            <summary>
            Defines the basic functionality for a Visual Guard permission.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Actions">
            <summary>
            Gets or sets the list of <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Attributes">
            <summary>
            Gets or sets the attributes (arguments) list of the permission
            </summary>
            <remarks>this attribute list is defined at design time by using the Visual Guard console. To edit the attributes list, you must use the menu option 'Action>Edit arguments list' when the permission is selecting.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.FullName">
            <summary>
            Gets or sets the full name of the permission, including the folder path
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.FullNameHashCode">
            <summary>
            Gets or the hash code of the full name of the permission, including the folder path
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Name">
            <summary>
            Gets or sets the name of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Id">
            <summary>
            the unique identifier of the information
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.OriginalId">
            <summary>
            Gets the unique Visual Guard identifier of the original permission when the permission is a new version of another permission
            </summary>
            <value>the unique Visual Guard identifier of the original permission when the permission is a new version of another permission. When the permission is the original permission, the value is equal to <see cref="F:System.Guid.Empty"/>.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Description">
            <summary>
            Gets or sets the description of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Application">
            <summary>
            Returns the unique identifier of the application to which this permission belongs.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Folder">
            <summary>
            Gets or sets the unique identifier of the folder containing this permission.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Duplicate">
            <summary>
            Duplicates the permission
            </summary>
            <returns>The duplicated permission.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionInformation.Clone">
            <summary>
            Clone the current permission
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGIPermissionSetCache">
            <summary>
            Defines the interface a class must implement to act as a permission set cache. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetCache.Item(System.Guid)">
            <summary>
            Gets or sets the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation"/> at the permission id.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetCache.Insert(Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation)">
            <summary>
            Inserts a <see cref="T:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation"/> into the Cache. 
            </summary>
            <param name="permissionSet">The <see cref="T:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation"/> object to be inserted into the cache.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetCache.Remove(System.Guid)">
            <summary>
            Removes the specified item from the cache. 
            </summary>
            <param name="permissionSetId">The unique identifier for the permission set to remove.</param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation">
            <summary>
            Represents a collection of Visual Guard permissions. This collection can contain <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/> or <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.ContainsPermission(System.Guid,System.Boolean)">
            <summary>
            <para>Determines whether the specified <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the permission set.</para>
            </summary>
            <param name="id"><para>The id of the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> to locate in the permission set.</para></param>
            <param name="searchSubPermissionSet"><c>true</c> if you want to include sub permission set in search, <c>false</c> otherwise.</param>
            <returns><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.ContainsPermission(System.String,System.Boolean)">
            <summary>
            <para>Determines whether the specified <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the permission set.</para>
            </summary>
            <param name="name"><para>The name of the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> to locate in the permission set.</para></param>
            <param name="searchSubPermissionSet"><c>true</c> if you want to include sub permission set in search, <c>false</c> otherwise.</param>
            <returns><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.ContainsPermissionSet(Novalys.VisualGuard.Security.VGIPermissionSet,System.Boolean)">
            <summary>
            <para>Determines whether the specified <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/> or one of its sub-permission sets contains the permission set.</para>
            </summary>
            <param name="permissionSet"><para>The <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> to locate in the permission set or in of its sub permission set.</para></param>
            <param name="searchSubPermissionSet"><c>true</c> if you want to include sub permission set in search, <c>false</c> otherwise.</param>
            <returns><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.Description">
            <summary>
            Gets a description of the permissionset.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.Application">
            <summary>
            Gets the unique identifier of the application to which this permission set belongs.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.CanBeGrantedToRole">
            <summary>
            Gets a value indicating if this permission set can be granted to a role.
            </summary>
            <value><c>true</c> if the permission set can be granted to a role. <c>false</c> if the permission set must be only granted to a permission set and not directly to a role.</value>
            <remarks>this property is used only at design time in the Visual Guard console to allow or disallow a user to grant the permission set to a role.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.GrantedPermissions">
            <summary>
            Gets the list of permissions granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.GrantedPermissionSets">
            <summary>
            Gets or sets the list of permission sets granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.Id">
            <summary>
            Gets the Visual Guard unique identifier of the permission set
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.Duplicate">
            <summary>
            Creates a copy of the permission set
            </summary>
            <returns>a copy of the permission set</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGIPermissionSetInformation.GetAllPermissionSets">
            <summary>
            Get all permissionSets granted
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPBGrantedAction">
            <summary>
            Represente an Action for Powerbuilder technology
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPermission">
            <summary>
            Provides a Visual Guard permission
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermission.#ctor(System.String,System.String,System.String,Novalys.VisualGuard.Security.App.VGIApplicationInformation,Novalys.VisualGuard.Security.VGIPermissionAttribute[],Novalys.VisualGuard.Security.Permission.VGGrantedAction[],System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermission"/>
            </summary>
            <param name="name">The name of the permission</param>
            <param name="description">The description of the permission</param>
            <param name="fullName">the full name of the permission including the folder path.</param>
            <param name="app">The application for which the permission is created.</param>
            <param name="attributes">The attributes of the permission as name/value pairs.</param>
            <param name="actions">The list of <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> associated to the permission</param>
            <param name="isBuiltIn">Indicates if the permission set is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermission.#ctor(System.String,System.String,System.String,System.Guid,Novalys.VisualGuard.Security.VGIPermissionAttribute[],Novalys.VisualGuard.Security.Permission.VGIGrantedAction[],System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermission"/>
            </summary>
            <param name="name">The name of the permission</param>
            <param name="description">The description of the permission</param>
            <param name="fullName">the full name of the permission including the folder path.</param>
            <param name="appId">The id of the application for which the permission is created.</param>
            <param name="attributes">The attributes of the permission as name/value pairs.</param>
            <param name="actions">The list of <see cref="T:Novalys.VisualGuard.Security.Action.VGSecurityAction"/> associated to the permission</param>
            <param name="isBuiltIn">Indicates if the permission set is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermission.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermission"/>
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Attributes">
            <summary>
            The list of attributes of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Actions">
            <summary>
            Gets or sets the list of <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/> of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Name">
            <summary>
            Gets or sets the name of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.FullName">
            <summary>
            Gets or sets the full name of the permission, including the folder path
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Description">
            <summary>
            Gets or sets the description of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Id">
            <summary>
            Gets the <see cref="T:System.Guid"/> identifying the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.IdOrOriginalId">
            <summary>
            Gets the unique Visual Guard identifier that will be see in the application
            </summary>
            <remarks>returns the original id if it is a new version of another permission.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.IsBuiltIn">
            <summary>
            Indicates if the role is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Application">
            <summary>
            Returns the unique identifier of the application to which this permission belongs.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Folder">
            <summary>
            Gets or sets the unique identifier of the folder containing this permission.
            If the permission is contained in the root, Folder is equal to <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermission.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermission.Item(System.String)">
            <summary>
            Gets the value of the attribute specified by its name.
            </summary>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns a null reference (Nothing in Visual Basic)</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermission.Duplicate">
            <summary>
            Duplicates the permission
            </summary>
            <returns>The duplicated permission without its actions.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute">
            <summary>
            Represents an attribute of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.#ctor(System.Guid,System.String,System.String,System.Object,System.Type)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute"/>
            </summary>
            <param name="id">the id of the attribute</param>
            <param name="name">the name of the attribute.</param>
            <param name="value">the value of the attribute</param>
            <param name="description">a short description of the attribute</param>
            <param name="type">The type converter used to edit the value.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.#ctor(System.String,System.String,System.Object,System.Type)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute"/>
            </summary>
            <param name="name">the name of the attribute.</param>
            <param name="value">the value of the attribute</param>
            <param name="description">a short description of the attribute</param>
            <param name="type">The type converter used to edit the value.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.IsDefaultValue">
            <summary>
            Gets a value indicating whether the value is the default value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.ToString">
            <summary>
            Converts the attribute into a string.
            </summary>
            <returns>A string value representing the attribute.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.Clone">
            <summary>
            Returns a copy of the object.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute"/> object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionAttribute.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the object
            </summary>
            <param name="info">the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object in which to store the data</param>
            <param name="context">the Serialization context.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPermissionAuditSupportedType">
            <summary>
            Gets or sets an enum for VGPermissionAudit Supported entity (Ex. User, Role, PermissionSet, Group)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.VGPermissionAuditSupportedType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.VGPermissionAuditSupportedType.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.VGPermissionAuditSupportedType.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.VGPermissionAuditSupportedType.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Permission.VGPermissionAuditSupportedType.PermissionSet">
            <summary>
            Permissionset
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet">
            <summary>
            Represents a collection of Visual Guard permissions. This collection can contain <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/> or <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.#ctor(System.String,Novalys.VisualGuard.Security.App.VGIApplicationInformation)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/>.
            </summary>
            <param name="name">The name of the permission set.</param>
            <param name="app">The application for which the permission is created.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.#ctor(System.String,Novalys.VisualGuard.Security.App.VGIApplicationInformation,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/>.
            </summary>
            <param name="name">The name of the permission set.</param>
            <param name="app">The application for which the permission is created.</param>
            <param name="description">The description of the permission.</param>
            <param name="isBuiltIn">Indicates if the permission set is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.#ctor(System.String,System.Guid,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/>.
            </summary>
            <param name="name">The name of the permission set.</param>
            <param name="appId">The Guid of the application for which the permission is created.</param>
            <param name="description">The description of the permission.</param>
            <param name="isBuiltIn">Indicates if the permission set is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.ContainsPermission(System.Guid,System.Boolean)">
            <summary>
            <para>Determines whether the specified <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the permission set.</para>
            </summary>
            <param name="id"><para>The id of the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> to locate in the permission set.</para></param>
            <param name="searchSubPermissionSet"><c>true</c> if you want to include sub permission set in search, <c>false</c> otherwise.</param>
            <returns><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.ContainsPermission(System.String,System.Boolean)">
            <summary>
            <para>Determines whether the specified <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the permission set.</para>
            </summary>
            <param name="name"><para>The name of the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> to locate in the permission set.</para></param>
            <param name="searchSubPermissionSet"><c>true</c> if you want to include sub permission set in search, <c>false</c> otherwise.</param>
            <returns><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.ContainsPermissionSet(Novalys.VisualGuard.Security.VGIPermissionSet,System.Boolean)">
            <summary>
            <para>Determines whether the specified <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> or one of its sub-permission sets contains the permission set.</para>
            </summary>
            <param name="permissionSet"><para>The <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> to locate in the permission set or in of its sub permission set.</para></param>
            <param name="searchSubPermissionSet"><c>true</c> if you want to include sub permission set in search, <c>false</c> otherwise.</param>
            <returns><see langword="true"/> if the <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> is a member of the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GetAllPermissionSets">
            <summary>
            Return all permissionSets contains in the current permissionsSet
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Name">
            <summary>
            Gets the name of the permission set
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.IsBuiltIn">
            <summary>
            Indicates if the role is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Description">
            <summary>
            Indicates if the role is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Id">
            <summary>
            Gets or sets the unique identifier of this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Application">
            <summary>
            Returns the unique identifier of the application to which this permission set belongs.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Permissions">
            <summary>
            Returns the list of permissions granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GrantedPermissions">
            <summary>
            Returns the list of permissions granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.PermissionSets">
            <summary>
            Returns the list of permission sets granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GrantedPermissionSets">
            <summary>
            Gets or sets the list of permission sets granted to this permission set.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GetPermission(System.String)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified name.
            </summary>
            <param name="permissionName">The name identifying the permission.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.</returns>
            <example><P>The following example gets the permission "Disable customer edition" contained in the folder "Customers" granted to the permission set "HR permissions".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions").GetPermission("\Customers\Disable customer edition")</code>
            </example>
            <remarks>This method does not look for permission in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GetPermission(System.Guid)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.
            </summary>
            <param name="permissionId">The <see cref="T:System.Guid"/> identifying the permission</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.</returns>
            <example><P>The following example gets the permission identified by the guid "5F0BAF21-A66C-4b27-9E9E-CCAE72226613" granted to the permission set "HR permissions".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions").GetPermission(new Guid("{5F0BAF21-A66C-4b27-9E9E-CCAE72226613}"))</code>
            </example>
            <remarks>This method does not look for permission in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GetPermissionSet(System.String)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> object with the specified name.
            </summary>
            <param name="permissionSetName">The name identifying the permission set.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> object with the specified id.</returns>
            <example><P>The following example gets the permission set "HR permissions".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions")</code>
            </example>
            <remarks>This method does not look for permission set in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GetPermissionSet(System.Guid)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.
            </summary>
            <param name="permissionSetId">The <see cref="T:System.Guid"/> identifying the permission set</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.</returns>
            <example><P>The following example gets the permission set identified by the guid "5F0BAF21-A66C-4b27-9E9E-CCAE72226613".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions").GetPermission(new Guid("{5F0BAF21-A66C-4b27-9E9E-CCAE72226613}"))</code>
            </example>
            <remarks>This method does not look for permission set in sub permission sets.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.CanBeGrantedToRole">
            <summary>
            Gets a value indicating if this permission set can be granted to a role.
            </summary>
            <value><c>true</c> if the permission set can be granted to a role. <c>false</c> if the permission set must be only granted to a permission set and not directly to a role.</value>
            <remarks>this property is used only at design time in the Visual Guard console to allow or disallow a user to grant the permission set to a role.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.TimeStamp">
            <summary>
            Gets or sets the last time that the object was modified.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.OriginalId">
            <summary>
            The id of the original permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPermissionSet.CopyOf">
            <summary>
             Gets the id the item used to create this version of the item.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.CreateNewVersion(System.Guid)">
            <summary>
            Creates a new version of the permission set for the given application.
            </summary>
            <param name="newApplicationId">the id of the new application</param>
            <returns>a new version of the permission set for the given application.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSet.GetAllPermissions">
            <summary>
            Gets all Visual Guard permission stored in this permission set and all its sub permission set.
            </summary>
            <returns>An array of <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> containing the list of permissions.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPermissionSetNotFoundException">
            <summary>
            Exception thrown when the user's credentials are not found in the given repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSetNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSetNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSetNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSetNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPermissionSetNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPropertyValue">
            <summary>
            Represents the value of a property.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValue"/>
            </summary>
            <param name="propertyName">the name of the property</param>
            <param name="value">the value of the property.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValue.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.GetConvertedValue(System.Type)">
            <summary>
            Gets the current value converted for the specified property type
            </summary>
            <param name="propertyType">the type of the property where the value should be set.</param>
            <returns>the value converted for the specified type</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.SetValueForSerialization(System.Type,System.Object)">
            <summary>
            Sets the current value and converts it for serialization
            </summary>
            <param name="propertyType">the type of the property where the value should be set.</param>
            <returns>the value converted for the specified type</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.Serialize">
            <summary>
            Serialize external arguments like Array or generic list in permission.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.Deserialize">
            <summary>
            Deserialize external arguments like Array or generic list in permission.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValue.Value">
            <summary>
            Gets the value of the property (use GetConvertedValue or SetValueForSerialization in place of this property)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValue.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValue.CustomPropertyValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.SetValue(System.Object,Novalys.VisualGuard.Security.Permission.VGRuntimePermission,System.Object,System.Type,System.Object[])">
            <summary>
            Sets the value of the property for the given object.
            </summary>
            <param name="obj">the object for which the value must be modified.</param>
            <param name="permission">The permission for which the property is modified.</param>
            <param name="eventArgs"></param>
            <param name="target"></param>
            <param name="targetType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets serialization information for the object
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object in which to store data to serialized.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValue.Clone">
            <summary>
            Creates a copy the value.
            </summary>
            <returns>a copy the value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.PropertyValueType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection">
            <summary>
            Represents a collection value to set to the properties of an object.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection.#ctor(System.String,Novalys.VisualGuard.Security.Permission.VGPropertyValue[])">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection"/>.
            </summary>
            <param name="fieldName">the name of the field whose the value will be set. It must be an empty string if the object to set is the target but not a field of the target.</param>
            <param name="values">an array of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValue"/> containing the list of property and the values.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection.FieldName">
            <summary>
            Gets the name of the field whose the values will be set. Returns an empty string the values must be set to the target but not to a field of the target.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection.Values">
            <summary>
            Gets or sets an array of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValue"/> containing the list of property and the values.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection.IsValueForEvent">
            <summary>
            Indicates whether it is a value for the event but not the target
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGPropertyValueCollection.Clone">
            <summary>
            Creates a copy of the collection
            </summary>
            <returns>a copy of the collection</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute">
            <summary>
            Represents an attribute of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.IsDefaultValue">
            <summary>
            Gets a value indicating whether the value is the default value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.ToString">
            <summary>
            Converts the attribute into a string.
            </summary>
            <returns>A string value representing the attribute.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRoleNamesAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Id">
            <summary>
            Gets the unique id of the attribute
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGRuntimePermission">
            <summary>
            Represents a Visual Guard permission during the execution of the application
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRuntimePermission.Novalys#VisualGuard#Security#Permission#VGIGrantedPermission#Attributes">
            <summary>
            Gets the collection of attributes of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRuntimePermission.Item(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGRuntimePermission.Novalys#VisualGuard#Security#Permission#VGIGrantedPermission#FullNameHashCode">
            <summary>
            Gets or the hash code of the full name of the permission, including the folder path
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute">
            <summary>
            Represents an attribute of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.IsDefaultValue">
            <summary>
            Gets a value indicating whether the value is the default value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.ToString">
            <summary>
            Converts the attribute into a string.
            </summary>
            <returns>A string value representing the attribute.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserIdAttribute.Id">
            <summary>
            Gets the unique id of the attribute
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute">
            <summary>
            Represents an attribute of a <see cref="T:Novalys.VisualGuard.Security.Permission.VGGrantedAction"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Description">
            <summary>
            Gets or sets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute.IsDefaultValue">
            <summary>
            Gets a value indicating whether the value is the default value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute.Novalys#VisualGuard#Security#VGIPermissionAttribute#ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Permission.VGUserNameAttribute.ToString">
            <summary>
            Converts the attribute into a string.
            </summary>
            <returns>A string value representing the attribute.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.Configuration.Embed">
            <summary>
            Load assemblies embedded as resources (for License for example)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData">
            <summary>
            Represents a repository configuration settings.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.#ctor(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> class.
            </summary>
            <param name="name">The name of the provider.</param>
            <param name="anonymousSessionSupported">indicates if the anonymous sessions are supported</param>
            <param name="applicationId">the id of the application.</param>
            <param name="supportedAuthenticationModes">the authentication mode supported by the repository.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.SupportedAuthenticationModes">
            <summary>
            Gets or sets the authentication modes supported by the repository.
            </summary>
            <value>The configured repository path.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.IsAnonymousSessionSupported">
            <summary>
            Gets or sets a boolean value indicating if anonymous sessions are supported by the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.IncludeWindowsGroups">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that indicates whether role granted to Windows Groups are included to the list of role of a user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.OfflineStore">
            <summary>
            OfflineStore for support Offline user.
            The default OfflineStore is None,so VG don't supported Offline user.
            You choose: None, User, Machine
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.ApplicationRepositoryId">
            <summary>
            Gets the repository id of the secured application.
            </summary>
            <value>The configured application id.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.ApplicationId">
            <summary>
            Gets or sets the id of the secured application.
            </summary>
            <value>The configured application id.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.CacheDuration">
            <summary>
            Gets or sets the length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository
            </summary>
            <remarks>The default value is 30 seconds. When the cache duration is equal to zero, the items are not cached.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is negative</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.DisplayInformation">
            <summary>
            When overridden, returns the information about the repository used by DownVisual Guard console at design time.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.RepositoryConnectionTypeName">
            <summary>
            When overridden, returns the type of the repository connection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.IsReadOnly">
            <summary>
            Indicates if the object is read-only.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.SetReadOnly">
            <summary>
            Sets the current <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> object in read only mode
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.Name">
            <summary>
            <para>Gets or sets the name of the repository.</para>
            </summary>
            <value><para>The name of the repository.</para></value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.Clone">
            <summary>
            Creates a copy of the current repository data
            </summary>
            <returns>a copy of the current repository data</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.Encrypt">
            <summary>
            Encypt the internal of  the repositoryData
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.AllowedAuthenticationModes">
            <summary>
            Gets the authentication modes supported by this repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData.IsPerformanceTracingEnabled">
            <summary>
            Gets or sets if performance tracing is enabled.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryDataCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> settings.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryDataCollection.Item(System.Int32)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> at the specified <paramref name="index"/>.</para>
            </summary>
            <param name="index">
            <para>The index of the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="index"/>. If the specified <paramref name="index"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="index"/>.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryDataCollection.Item(System.String)">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> associated with the specified <paramref name="name"/>.</para>
            </summary>
            <param name="name">
            <para>The name of the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> to get or set.</para>
            </param>
            <value>
            <para>The value associated with the specified <paramref name="name"/>. If the specified <paramref name="name"/> is not found, attempting to get it returns a <see langword="null"/> reference (Nothing in Visual Basic), and attempting to set it creates a new entry using the specified <paramref name="name"/>.</para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryDataCollection.Add(Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData)">
            <summary>
            <para>Adds an <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> into the collection.</para>
            </summary>
            <param name="data">
            <para>The <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>If a reference already exists in the collection by <seealso cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/>.Name, it will be replaced with the new reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="exceptionTypeData"/> is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para><seealso cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/>.Name is a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryDataCollection.Add(System.Object)">
            <summary>
            <para>Adds a value into the collection.</para>
            </summary>
            <param name="parameter">
            <para>The value to add. The value can not be a <see langword="null"/> reference (Nothing in Visual Basic).</para>
            </param>
            <remarks>
            <para>This method exists to support Xml Serialization.</para>
            </remarks>
            <exception cref="T:System.InvalidCastException">
            <para><paramref name="parameter"/> must be of type <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/>.</para>
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGInvalidSerialNumberException">
            <summary>
            Exception thrown when a given serial number is invalid.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGInvalidSerialNumberException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.License.VGInvalidSerialNumberException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGInvalidSerialNumberException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.License.VGInvalidSerialNumberException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGInvalidSerialNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGLicense">
            <summary>
            Represents a repository license
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.Repository.License.VGLicense.LicenseChanged">
            <summary>
            Occurs the serial number of the license has been modified
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.#ctor(System.Guid,System.Guid,System.String,System.DateTime)">
            <summary>
            Creates a license with the specified serial number for the given repository 
            </summary>
            <param name="repositoryId">the id of the repository</param>
            <param name="compId">the id of the computer</param>
            <param name="serialNumber">the serial number</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.#ctor(System.Guid,System.Guid)">
            <summary>
            Creates an empty license for the given repository
            </summary>
            <param name="id">the id of the repository</param>
            <param name="compId">the id of the Storage </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.SerialNumber">
            <summary>
            Gets the serial number corresponding to the license 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsValid(System.String,System.DateTime)">
            <summary>
            Indicates if the given serial number is valid for the repository for which the current license has been created
            </summary>
            <param name="serialNumber">the serial number to check</param>
            <param name="utcNow">the date and time of the server</param>
            <returns>true if the serial number is valid. false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsValid(System.Guid,System.Guid,System.String,System.DateTime)">
            <summary>
            Indicates if serial number is valid for a repository
            </summary>
            <param name="repositoryId">the id of the repository</param>
            <param name="compId">the id of the the store</param>
            <param name="serialNumber">the serial number to check.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.Evaluation">
            <summary>
            Gets a license corresponding to an evaluation version
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsLicenseExpirable">
            <summary>
            Indicates if a license is expirable
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsDeployedLicense">
            <summary>
            Indicates whether a license is a license of a deployed repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsLicenseExpired(System.DateTime)">
            <summary>
            Indicates whether the license is expired or not
            </summary>
            <param name="utcNow">the date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsLicenseVersionValid">
            <summary>
            Indicates whether the license is expired or not
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsLicenseLimited(System.DateTime)">
            <summary>
            Indicates whether the license limits the number of account in a repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.IsEval(System.DateTime)">
            <summary>
            Indicates if the license is an evaluation version
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.MaxUsers(System.DateTime)">
            <summary>
            Gets the maximum number of account supported in a repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.SerialNumberMaxUsers">
            <summary>
            Gets the maximum number of account supported in a repository stored in the serial number
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.License.VGLicense.LicenseType(System.DateTime)">
            <summary>
            Gets the type of license (Evaluation, Full...)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.SerialNumberLicenseType">
            <summary>
            Gets the type of license (Evaluation, Full...) stored in the serial number
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.EndOfLicense">
            <summary>
            Gets the date and time at which the license expires
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.AllowsWindowsAccounts">
            <summary>
            Indicates if the license allows the creation of Windows Account
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.AllowsWindowsGroups">
            <summary>
            Indicates if the license allows the creation of Windows Account
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.AllowsWindowsAccountsCredential">
            <summary>
            Indicates if the license allows the creation of Windows Account
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.AllowsDatabaseRepository">
            <summary>
            Indicates if the license allows to use repository stored in a database
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.AllowPrivateVGServer">
            <summary>
            Support VGServer
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.LicenseVersion">
            <summary>
            Gets the version of Visual Guard for wich the license has been generated
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.MinimumSupportedLicenseVersion">
            <summary>
            Gets the minimum version of the runtime supported by this license
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicense.EvalSerialNumber">
            <summary>
            Gets the serial number corresponding to an eval
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGLicenseChangedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Novalys.VisualGuard.Security.Repository.License.VGLicense.LicenseChanged"/> event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGLicenseChangedEventArgs">
            <summary>Provides data for the <see cref="E:Novalys.VisualGuard.Security.Repository.License.VGLicense.LicenseChanged"/> event. This class cannot be inherited.</summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.License.VGLicenseChangedEventArgs.License">
            <summary>
            Gets the license modified
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGLicenseManager">
            <summary>
            This class is an interface to the true VGLicenseManager located in the assembly Novalys.VisualGuard.Tools.License loaded dynamically by the Embed class.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGLicenseType">
            <summary>
            Represents the different types of license for a repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGLicenseType.BadLicenseKey">
            <summary>
            The license key is not valid.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGLicenseType.Evaluation">
            <summary>
            The license key for an evaluation version.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGLicenseType.Full">
            <summary>
            The license key for a full version.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGLicenseType.Limited">
            <summary>
            The license key for a limited version.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.License.VGSerialNumberValidation">
            <summary>
            Represents the status of the evaluation of a serial number
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGSerialNumberValidation.Valid">
            <summary>
            The serial number is valid
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGSerialNumberValidation.InvalidFormat">
            <summary>
            The format of the serial number is not a valid format
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGSerialNumberValidation.Expired">
            <summary>
            The serial number has expired
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.License.VGSerialNumberValidation.InvalidVersion">
            <summary>
            The version of the serial number is lesser than the version of the Visual Guard runtime
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.Principal.VGPrincipalParametersType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.Principal.VGPrincipalParametersType.LastActivityDate">
            <summary>
            InActive since lastActivityDate filter
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.Principal.VGPrincipalParametersType.IsExcludeNewlyCreatedNotAuthenticatedUsers">
            <summary>
            IsIncludeNewlyCreatedNotAuthenticatedUsers filter
            </summary>,
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGConcurrencyException">
            <summary>
            Exception thrown when a transaction begins and a transaction is already active on the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.VGConcurrencyException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.VGConcurrencyException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGConnectionException">
            <summary>
            Exception thrown when a problem occurs on the connection to the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGConnectionException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.VGConnectionException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.VGConnectionException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection">
            <summary>
            Defines basic functionality for connection to a Visual Guard repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.IsOnline">
            <summary>
            Check repository is online
            </summary>
            <returns><c>true</c>VGRepository connection is online <c>false</c>VGRepository connection is offline </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.Clone(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.IsValidRepository">
            <summary>
            Checks if the given connection allows accessing to a valid repository.
            </summary>
            <returns><c>true</c> if a valid repository is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.IsValidRepository(System.Boolean)">
            <summary>
            Checks if the given connection allows accessing to a valid repository.
            </summary>
            <returns><c>true</c> if a valid repository is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.IsValidRepository(System.Boolean,System.Boolean)">
            <summary>
            Checks if the given connection allows accessing to a valid repository.
            </summary>
            <param name="throwOnError"></param>
            <param name="useCache"></param>
            <returns><c>true</c> if a valid repository is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.IsDatabaseObjectsExist">
            <summary>
            Checks whether repository objects (tables, files...) are correctly created in the repository store.
            </summary>
            <returns>One of the <see cref="T:Novalys.VisualGuard.Security.Database.VGDatabaseExistenceStatus"/> values.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.CheckRepositoryVersion(System.Boolean,System.Version,System.Version,System.Version)">
            <summary>
            Checks the version of the repository and returns a <see cref="T:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction"/> indicating the upgrade action needed.
            </summary>
            <param name="checkForConsole">true to indicate that the minimum console versionmust be checked.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.UseUpdateMethod">
            <summary>
            Gets or sets a value indicating when the repository must use the update method when the repository id of an item is changed
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.GetDBUserName">
            <summary>
            Gets the current database user name
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.WriteLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Writes a log message in the repository
            </summary>
            <param name="log">a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> representing the message to store.</param>
            <param name="formatter">A <see cref="T:Novalys.VisualGuard.Security.Common.VGILogFormatter"/> object used to format the message.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.UpdateLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            updates a log in the repository.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.ImportLog(Novalys.VisualGuard.Security.Logging.VGLogEntry,Novalys.VisualGuard.Security.Common.VGILogFormatter)">
            <summary>
            Write the message log with the VGLogEntry date in VGrepository
            </summary>
            <param name="log">a <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> representing the message to store.</param>
            <param name="formatter">A <see cref="T:Novalys.VisualGuard.Security.Common.VGILogFormatter"/> object used to format the message.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.IsValidityChecked">
            <summary>
            Indicates whether the validity of the repository has already been checked
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.ClearLog(System.DateTime)">
            <summary>
            Clears all log entries
            </summary>
            <param name="olderThan">indicate the date from which the event are deleted</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.ClearLog(System.Guid,System.DateTime)">
            <summary>
            Clears all log entries of an application
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.FindLogEvents(Novalys.VisualGuard.Security.Logging.VGEventLogArgs)">
            <summary>
            Find eventlogs by args
            </summary>
            <param name="eventLogArgs">argument collection</param>
            <returns>list of vgLogEntry</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.FindMonitoringEntries(Novalys.VisualGuard.Security.Logging.VGEventLogArgs)">
            <summary>
            Find Monitoringentries by eventlog parameters.
            </summary>
            <param name="eventLogArgs">eventLogArgs</param>
            <returns>list of monitoring entry object</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.UpdateTokenTimeExpired(Novalys.VisualGuard.Security.Token.VGToken,System.DateTime)">
            <summary>
            Update this time of the token
            </summary>
            <param name="SaveToken"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.GetRepositoryInformation">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation"/> object representing the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.DeleteStorage">
            <summary>
            Delete storage 
            if the storage is database storage, this method delete all tables and procedures
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.GetNow">
            <summary>
            Returns the date and the time of the server
            </summary>
            <returns>the date of the server expressed as UTC</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.CanCreateRepository">
            <summary>
            Checks if a repository structure can be created
            </summary>
            <param name="exception">the exception generated during the check</param>
            <returns>true if the repository can be created, false if it is not possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.CreatePrincipal(Novalys.VisualGuard.Security.Role.VGIPrincipalInformation)">
            <summary>
            Create a new principal (User)
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.UpdatePrincipal(Novalys.VisualGuard.Security.Role.VGIPrincipalInformation)">
            <summary>
            Update a principal (User)
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection.DeletePrincipal(Novalys.VisualGuard.Security.Role.VGIPrincipalInformation)">
            <summary>
            
            </summary>
            <param name="principal"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation">
            <summary>
            Defines the basic functionality for a Visual Guard repository information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.GroupDisplayInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.PasswordPolicy">
            <summary>
            Gets or sets a <see cref="T:Novalys.VisualGuard.Security.Authentication.VGPasswordPolicyData"/> representing the password policy of the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.SerialNumber">
            <summary>
            Gets or sets the serial number stored in this repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.License">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Repository.License.VGLicense"/> object representing the license of this repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.SupportedAuthenticationModes">
            <summary>
            Gets or sets the modes of authentication supported by the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.MinimumSupportedRuntimeVersion">
            <summary>
            Gets or sets the minimum supported version of Visual Guard runtime supported by the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.RepositoryVersion">
            <summary>
            Gets or sets the current version of the repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.CheckVersion">
            <summary>
            Check if the version of the repository is compatible with the runtime
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException">The version of the repository is not compatible with the version of the Visual Guard runtime.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.LicenseRequestInfo">
            <summary>
            Gets or sets information about the current license request
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.UseUpdateMethod">
            <summary>
            Gets or sets a value indicating when the repository must use the update method when the repository id of an item is changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.AllowsToRenameUser">
            <summary>
            Gets or sets a value indicating when it is possible to rename a user in the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.LogEnabled">
            <summary>
            Gets or sets a value indicating when the log is enabled for this repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.UninstalledSerialNumbers">
            <summary>
            Gets or sets an array of uninstalled serial numbers
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.UninstallSerialNumber">
            <summary>
            Uninstall the current serial number
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.CustomEventDescriptions">
            <summary>
            Gets or sets the list of custom event description
            </summary>
            <example>the list is formatted like this nnnnnXXXXXXXXX|nnnnnXXXXXXXXX(where nnnnn is the event id and XXXXXXXXX a short description of the event</example>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.CacheDuration">
            <summary>
            Gets or sets Cache Duration
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.IsAllowedMultiUserProfile">
            <summary>
            Gets or sets if repository allows multi user profile
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation.WorkFlowUser">
            <summary>
            Gets or Sets impersonated user id to execute workflow with.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager">
            <summary>
            Defines functionalities to manage repository items cache
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.Connection">
            <summary>
            Gets the repository connection associated to the cache manager
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.GetCachedItems(System.Type)">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> object containing the list of cached repository items with the specified type
            </summary>
            <param name="type">the type of the cached repository items for which you want the collection. This type must be inherited from <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation"/>.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Common.VGInformationCollection"/> object containing the list of cached repository items.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.GetInformationManager(System.Type)">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> object used to manage repository items with the specified type and using this cache manager
            </summary>
            <param name="type">the type of the cached repository items for which you want to get or set information. This type must be inherited from <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryInformation"/>.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> object.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.RepositoryData">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Repository.Configuration.VGRepositoryData"/> corresponding to the repository associated to this cache manager
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.CacheDuration">
            <summary>
            Gets or sets the length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.ClearCache">
            <summary>
            Removes all repository item objects from the cache
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager.WriteLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Writes a new log entry as defined in the specified <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object in the repository represented by this runtime.
            </summary>
            <param name="log">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object defining the content of the message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="log"/> is null</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGIServerDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGIServerDateTime.UtcNow">
            <summary>
            returns the current Utc Date and time of the server
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGRepositoryConnectionFactory">
            <summary>
            Provides methods for the creation of <see cref="T:Novalys.VisualGuard.Security.Repository.VGIRepositoryConnection"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryDataManager.PrincipalMaintenance(Novalys.VisualGuard.Security.Common.VGIProgressReporter)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryDataManager.CreateProfileAttribute(System.Guid,Novalys.VisualGuard.Security.UserProfile.VGAttribute_InformationType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,Novalys.VisualGuard.Security.UserProfile.VGProfileDataType,System.Int32,System.String)">
            <summary>
            Creates internal profile attribute.
            </summary>
            <param name="attributeId"></param>
            <param name="internalInformationType"></param>
            <param name="propName"></param>
            <param name="displayname"></param>
            <param name="defaultValue"></param>
            <param name="isreadonly"></param>
            <param name="isrequired"></param>
            <param name="isvisible"></param>
            <param name="allowsearch"></param>
            <param name="maxlength"></param>
            <param name="datatype"></param>
        </member>
        <member name="E:Novalys.VisualGuard.Security.Repository.VGRepositoryManager.CanCreateStorage">
            <summary>
            Public event
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryManager.Create(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential)">
            <summary>
            Create a VGRepository by Master admin credential 
            </summary>
            <param name="credential"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryManager.Maintenance(System.String)">
            <summary>
            Perform Maintenance of the Repository.
            </summary>
            <param name="migrationCode">migrationCode</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryManager.ApplyFIPSComplianceChanges">
            <summary>
            Perform Maintenance of the Repository.
            </summary>
            <param name="migrationCode">migrationCode</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryManager.GetCanCreateStore">
            <summary>
            Check if the visula-guard can create VG Repository storage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInformation.SetUniqueIdentifier(System.String)">
            <summary>
            This method will Generate the unique Identifier by using properties which have been set.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInformation.SetProperty(Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInformation.StoreInfo,System.String)">
            <summary>
            Sets store information - key/value pair.
            </summary>
            <param name="key">storeInfo key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInformation.GetProperty(Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInformation.StoreInfo)">
            <summary>
            Gets store information property.
            </summary>
            <param name="key">key</param>
            <returns>Property value by key</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGRepositoryStoreInformation.StoreInfoData">
            <summary>
            hashes the string
            </summary>
            <param name="str">string to be Hashed</param>
            <returns>hashed string</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction">
            <summary>
            The <see cref="T:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction"/> is used by <see cref="!:VGIRepositoryConnection.CheckRepositoryVersion()"/> method to indicate what upgrade action is needed before using a repository.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.NoUpgradeNeeded">
            <summary>
            The repository does not need to be upgraded. The version is compatible with the Visual Guard runtime
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.SchemaUpgradeNeeded">
            <summary>
            The database schema in which the repository is stored needs to be upgraded.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.RepositoryContentUpgradeNeeded">
            <summary>
            The repository content needs to be upgraded.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.RepositoryContentCreationNeeded">
            <summary>
            The repository data is not created.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.SchemaCreationNeeded">
            <summary>
            The database schema in which the repository is stored is not created.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.RuntimeUpgradeNeeded">
            <summary>
            The runtime must be upgraded before accessing to the repository.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGRepositoryUpgradeAction.SchemaUpgradeNeededForConsole">
            <summary>
            The database schema in which the repository is stored needs to be upgraded before being accessed by the console.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGServerDateTime">
            <summary>
            This class is used to get the date and time retrieved from the server hosting the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGServerDateTime.UtcNow">
            <summary>
            Gets the UTC date and time of the server.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGTableStatistic">
            <summary>
            Contains table statistic informations
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Repository.VGTableStatistic.MinValue">
            <summary>
            Indicates the minimum date and time possible in LastModification (1901-01-01) 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGTableStatistic.#ctor(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Creates a new intance of the <see cref="T:Novalys.VisualGuard.Security.Repository.VGTableStatistic"/> class.
            </summary>
            <param name="count">the number of items in the table</param>
            <param name="lastRequestTime">the date of the execution of stat request.</param>
            <param name="lastModifiedTime">the date of the last modification in the table.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGTableStatistic.Count">
            <summary>
            Gets the number of item in a table retrieved during the last refresh
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGTableStatistic.LastRequestTime">
            <summary>
            Gets the date of last statistique request
            </summary>
            <remarks>this date is used to determined the list of item modified since the last refresh</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Repository.VGTableStatistic.LastModifiedTime">
            <summary>
            Gets the date of last modified item during the last refresh
            </summary>
            <remarks>this date is used to determined the list of item modified since the last refresh</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Repository.VGTransactionTimeOutException">
            <summary>
            Exception thrown when a transaction begins and a transaction is already active on the repository and the timeout has expired .
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGTransactionTimeOutException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.VGTransactionTimeOutException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGTransactionTimeOutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Repository.VGTransactionTimeOutException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Repository.VGTransactionTimeOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation">
            <summary>
            Provides role list of a Visual Guard user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.#ctor(System.String,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation"/>
            </summary>
            <param name="name">The name of the user of this principal.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.#ctor(System.String,Novalys.VisualGuard.Security.Role.VGIRoleInformation[],System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation"/>
            </summary>
            <param name="name">The name of the user of this principal.</param>
            <param name="roles">String array of roles for the given user identity.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.#ctor(System.String,Novalys.VisualGuard.Security.Role.VGIRoleInformation[],System.Boolean,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation"/>
            </summary>
            <param name="name">The name of the user of this principal.</param>
            <param name="roles">String array of roles for the given user identity.</param>
            <param name="builtIn">Indicates if the principal is generated by Visual Guard and cannot be deleted.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Roles">
            <summary>
            Gets or sets a string array of roles for the given user identity.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Email">
            <summary>
            Gets or sets the name of the user. (Not Supported for Windows Account)
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Clone">
            <summary>
            Creates a new VGDatabasePrincipalInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGDatabasePrincipalInformation that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Duplicate(System.DateTime)">
            <summary>
            Creates a new VGIPrincipalInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGIPrincipalInformation that is a copy of the current instance.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.IsBuiltIn">
            <summary>
            Indicates if the principal is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Id">
            <summary>
            Returns the unique identifier of this role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.CreationDate">
            <summary>
            Gets the date and the time when the credential was  added to the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGDatabasePrincipalInformation.SpecialRoles">
            <summary>
            Gets or sets an array of special roles for the given user identity.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation">
            <summary>
            Defines the basic functionality of a Visual Guard principal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.Claims">
            <summary>
            List of the claims <see cref="T:Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.IsLocked">
            <summary>
            If the user is locked
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.IsApproved">
            <summary>
            If the user is approved
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.IdentityModuleName">
            <summary>
            Name if the IdentityModule
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.Roles">
            <summary>
            Gets or sets the list of roles granted to the user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.Email">
            <summary>
            Gets or sets the email of the user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.CreationDate">
            <summary>
            Gets the date and the time when the credential was  added to the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.Duplicate(System.DateTime)">
            <summary>
            Duplicates the principal information
            </summary>
            <returns>a new instance of <see cref="T:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation"/>.</returns>
            <param name="utcNow">the date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.SpecialRoles">
            <summary>
            Gets or sets the list of special roles granted to the user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIPrincipalInformation.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>A copy of the current instance</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGIRoleInformation">
            <summary>
            Defines the basic functionality of a Visual Guard role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRoleInformation.Application">
            <summary>
            Gets the id of the application in which the role is a member.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRoleInformation.PermissionSets">
            <summary>
            Gets or sets the list of id of permission sets granted to the role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRoleInformation.Description">
            <summary>
            Gets or sets the description of the role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRoleInformation.IsSharedRole">
            <summary>
            Indicates if the role is a Shared role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRoleInformation.RoleId">
            <summary>
            Gets the full id of the role (including the application Id and the id of the role)
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRoleInformation.Clone">
            <summary>
            Clones the current instance
            </summary>
            <returns>A copy of the current instance</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRoleInformation.GrantedPermissions">
            <summary>
            Gets or sets the list of permissions granted to this role.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGIRolesProvider">
            <summary>
            Defines the basic functionality of a Visual Guard principal
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRolesProvider.GetRoles(System.Security.Principal.IIdentity,Novalys.VisualGuard.Security.VGIPrincipal@)">
            <summary>
            Creates a principal with the role information retrieved from the repository for the specified identity.
            </summary>
            <param name="userIdentity">Identity of user used for retrieval</param>
            <param name="principal">the principal corresponding to the identity if the authorization process succeeds null otherwise.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRolesProvider.GetAnonymousRoles(Novalys.VisualGuard.Security.VGIPrincipal@)">
            <summary>
            Creates a principal with the role information retrieved from the repository for the specified identity.
            </summary>
            <param name="principal">the principal corresponding to the anonymous account if an anonymous session is supported, null otherwise.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> indicating if the anonymous session is supported.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRolesProvider.GetAnonymousRoles(System.Security.Principal.IIdentity,Novalys.VisualGuard.Security.VGIPrincipal@)">
            <summary>
            Creates a principal with the role information retrieved from the repository for the specified identity.
            </summary>
            <param name="identity">An <see cref="T:System.Security.Principal.IIdentity"/> object representing the identity of the user for which the anonymous role is loaded</param>
            <param name="principal">the principal corresponding to the anonymous account if an anonymous session is supported, null otherwise.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> indicating if the anonymous session is supported.</returns>
        </member>
        <member name="E:Novalys.VisualGuard.Security.Role.VGIRolesProvider.PermissionsLoading">
            <summary>
             Occurs before the permissions are loaded and allows filtering the list of user's roles.
            </summary>
            <remarks>The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs"/> containing data related to this event. The following TreeViewCancelEventArgs properties provide information specific to this event.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.Application">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.App.VGIApplicationInformation"/> containing application information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.PrincipalManager">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> object used to read and save principal information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.PermissionSetManager">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> object used to read and save principal information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.RoleManager">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformationManager"/> object used to read and save role information.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.IsAnonymousSessionSupported">
            <summary>
            Gets a boolean value indicating if the repository supports anonymous session.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRolesProvider.SetPermissionSetCache(Novalys.VisualGuard.Security.Permission.VGIPermissionSetCache)">
            <summary>
            Sets the permission set cache
            </summary>
            <param name="cache">The <see cref="T:Novalys.VisualGuard.Security.Permission.VGIPermissionSetCache"/> used to cache permission set.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRolesProvider.GetMaxUsers(System.DateTime)">
            <summary>
            <para>When overridden in a derived class, returns the maximum number of users allowed by the license granted to the repository.</para>
            </summary>
            <returns><para>The maximum number of users allowed by the license.</para></returns>        
            <param name="utcNow">the date and time of the server used to evaluate the license</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.AllowsWindowsAccounts">
            <summary>
            <para>When overridden in a derived class, indicates whether the license allows to used windows accounts</para>
            </summary>
            <returns><para>true when the license allows to create windows accounts, false otherwise.</para></returns>        
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGIRolesProvider.AllowsWindowsGroups">
            <summary>
            <para>When overridden in a derived class, indicates whether the license allows to used windows groups</para>
            </summary>
            <returns><para>true when the license allows to create windows groups, false otherwise.</para></returns>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGIRolesProvider.Duplicate(Novalys.VisualGuard.Security.Repository.VGIRepositoryItemCacheManager)">
            <summary>
            Allows to duplicate the current provider fro the specified cache manager
            </summary>
            <param name="cacheManager">the cache manager associated to the duplicated provider.</param>
            <returns>A copy of the current provider associated to the specified cache manager</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGPrincipal">
            <summary>
            Represents a Visual Guard Principal.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.#ctor(Novalys.VisualGuard.Security.Token.VGToken,System.Security.Principal.IIdentity,Novalys.VisualGuard.Security.VGGrantedRole[],System.String,System.Collections.Generic.List{System.String},Novalys.VisualGuard.Security.VGGrantedRole[],Novalys.VisualGuard.Security.VGMembershipPermissionAccess,System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedRole},System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedGroup},Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollection,System.Collections.Generic.List{Novalys.VisualGuard.Security.VGContextualGroup},System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedApplication},Novalys.VisualGuard.Security.IdentityModule.IdentityInformationOptions.VGClaimSet)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipal"/> class.
            </summary>
            <param name="identity">a <see cref="T:System.Security.Principal.IIdentity"/> representing a Visual Guard user.</param>
            <param name="allRoles">An array of role id to which the user represented by the identity parameter belongs.</param>
            <param name="membershipPermission">A <see cref="T:Novalys.VisualGuard.Security.VGMembershipPermissionAccess"/> value indicating the permission granted to the user to use membership API.</param>
            <param name="runtime">the runtime used to create the principal</param>
            <param name="repositoryId">the repository id of the principal.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.CanAccessApplication(System.String)">
            <summary>
            Gets if principal has access for particular application or not.
            </summary>
            <param name="applicationName">Name of the application to check</param>
            <returns>True if principal has access for particular application else false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.CanAccessApplication(System.Guid)">
            <summary>
            Gets if principal has access for particular application or not.
            </summary>
            <param name="applicationId">Id of the application to check</param>
            <returns>True if principal has access for particular application else false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.CanAccessApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Gets if principal has access for particular application or not.
            </summary>
            <param name="application">VGApplication object to check</param>
            <returns>True if principal has access for particular application else false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.SelectContextualGroups(System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedGroup})">
            <summary>
            Select the list of the group, you want for the context
            </summary>
            <param name="groups">We need to select the group list inside of this.GrantedGroups </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipal.GrantedGroups">
            <summary>
            Get all groups assign to this principal
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipal.Groups">
            <summary>
            Get all groups use for the security
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the current principal belongs to the specified role or the specified permission.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns><c>true</c> if the current principal is a member of the specified role, otherwise <c>false</c>.</returns>
            <remarks>this method is not case sensitive</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.IsInRole(System.Guid)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="roleId">The <see cref="T:System.Guid"/> of the role for which to check membership.</param>
            <returns><c>true</c> if the current principal is a member of the specified role, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipal.Roles">
            <summary>
            Gets the list of roles granted to the user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipal.Identity">
            <summary>
            Gets the identity of the principal
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.GetPermission(System.String)">
            <summary>
            Gets the specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object.
            </summary>
            <param name="fullname">The fullname of the permission (prefixed by its folder name if needed. for example "\Customers\Disable Customer Edition".</param>
            <returns>The specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object if the permission is granted to the principal. Returns null (Nothing in VB) if the permission is not granted or it does not exist.</returns>
            <remarks>this method is not case sensitive</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.GetPermission(System.Guid)">
            <summary>
            Gets the specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object.
            </summary>
            <param name="id">The id of the permission</param>
            <returns>The specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object if the permission is granted to the principal. Returns null (Nothing in VB) if the permission is not granted or it does not exist.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.TryGetPermission(System.Guid,Novalys.VisualGuard.Security.VGIPermission@)">
            <summary>
            Retrieves the <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object granted to principal with the specified id.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission to get.</param>
            <param name="permission">When this method returns, contains the permission associated with the specified id, if the id corespond to a granted permission; otherwise, null.</param>
            <returns>true if the permission corresponding to the specified id is granted to the principal. Otherwise false if the permission is not granted or does not exist.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.TryGetPermission(System.String,Novalys.VisualGuard.Security.VGIPermission@)">
            <summary>
            Retrieves the <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object granted to principal with the specified name.
            </summary>
            <param name="fullname">The full name of the permission, including the folder path.</param>
            <param name="permission">When this method returns, contains the permission whut the specified name, if the name correspond to a granted permission; otherwise, null.</param>
            <returns>true if the permission corresponding to the specified name is granted to the principal. False if the permission is not granted or does not exist.</returns>
            <remarks>this method is not case sensitive</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.ToString">
            <summary>
            Converts the current object to a string value.
            </summary>
            <returns>A string value representing the principal.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipal.RepositoryId">
            <summary>
            Gets the Visual Guard unique ID for this principal
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.HasPermission(System.String)">
            <summary>
            Checks if the specified permission is granted to the principal.
            </summary>
            <param name="fullname">The full name of the permission, including the folder path.</param>
            <returns>true if the principal has the permission, false otherwise</returns>
            <example>
            <P>The following example checks if the permission "My permission" stored in the root of permissions.</P>
            <code lang="vb.net">
            If not VGSecurityManager.Principal.HasPermission("My permission") Then
                ' the permission is not granted ...
            End If
            </code>
            <code lang="C#">
            if (!VGSecurityManager.Principal.HasPermission("My permission"))
            {
                // the permission is not granted ...
            }
            </code>
            <P>The following example checks if the permission "Disable Edition" contained in the folder "Customer" is granted to the current user.</P>
            <code lang="CSharp">VGSecurityManager.Principal.HasPermission("\Customers\Disable Edition")</code>
            </example>
            <remarks>this method is not case sensitive</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.HasPermission(System.Guid)">
            <summary>
            Checks if the specified permission is granted to the principal.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission</param>
            <returns>true if the principal has the permission, false otherwise</returns>
            <example>
            <P>The following example checks if the permission "{AEE3A747-05FB-4f90-BD3A-EF872E4D3211}" is granted to the current user.</P>
            <code lang="vb.net">
            If not VGSecurityManager.Principal.HasPermission(new Guid ("AEE3A747-05FB-4f90-BD3A-EF872E4D3211")) Then
                ' the permission is not granted ...
            End If
            </code>
            <code lang="C#">
            if (!VGSecurityManager.Principal.HasPermission(new Guid ("AEE3A747-05FB-4f90-BD3A-EF872E4D3211")))
            {
                // the permission is not granted ...
            }
            </code>
            <P>The following example checks if the permission "Disable Edition" contained in the folder "Customer" is granted to the current user.</P>
            <code lang="CSharp">VGSecurityManager.Principal.HasPermission("\Customers\Disable Edition")</code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipal.HasPermission(System.Guid,System.Boolean)">
            <summary>
            Checks if the specified permission is granted to the principal.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission</param>
            <param name="includeVGInternalSecurity">if include vg permssions </param>
            <returns>true if the principal has the permission, false otherwise</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipal.ProfileValues">
            <summary>
            Gets User Profile values of the current user.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGPrincipalInformation">
            <summary>
            Provides role list of a Visual Guard user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalInformation"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.#ctor(System.String,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalInformation"/>
            </summary>
            <param name="name">The name of the user of this principal.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.#ctor(System.String,Novalys.VisualGuard.Security.Role.VGIRoleInformation[],System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalInformation"/>
            </summary>
            <param name="name">The name of the user of this principal.</param>
            <param name="roles">String array of roles for the given user identity.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.#ctor(System.String,Novalys.VisualGuard.Security.Role.VGIRoleInformation[],System.Boolean,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalInformation"/>
            </summary>
            <param name="name">The name of the user of this principal.</param>
            <param name="roles">String array of roles for the given user identity.</param>
            <param name="builtIn">Indicates if the principal is generated by Visual Guard and cannot be deleted.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Roles">
            <summary>
            Gets or sets an array of roles for the given user identity.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.SpecialRoles">
            <summary>
            Gets or sets an array of special roles for the given user identity.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Clone">
            <summary>
            Creates a new VGPrincipalInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGPrincipalInformation that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Duplicate(System.DateTime)">
            <summary>
            Creates a new VGIPrincipalInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGIPrincipalInformation that is a copy of the current instance.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.IsBuiltIn">
            <summary>
            Indicates if the principal is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Id">
            <summary>
            Returns the unique identifier of this role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>this value will be used to change the <see cref="N:Novalys.VisualGuard.Security.Repository"/> the next time the information will be saved.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.Email">
            <summary>
            Gets or sets the e-mail address of this principal.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.CreationDate">
            <summary>
            Gets the date and the time when the credential was  added to the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalInformation"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGPrincipalNotFoundException">
            <summary>
            Exception thrown when the user's credentials are not found in the given repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Role.VGPrincipalNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGPrincipalNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGRoleId">
            <summary>
            Represents the id of a role.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> class.
            </summary>
            <param name="appId">the application which belongs the roles.</param>
            <param name="roleId">the id of the role.</param>
            <param name="originalId">the id of the original role when this role is new version of another role</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.#ctor(System.Guid)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> class that represents a Shared role.
            </summary>
            <param name="roleId">the id of the role.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.CreateRoleIdWithUnknownApp(System.Guid)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> class that represents a role for which the application is unknown.
            </summary>
            <param name="roleId">the id of the role.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.RoleId">
            <summary>
            Gets the id of the role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.OriginalId">
            <summary>
            Gets the unique Visual Guard identifier of the original role when the role is a new version of another role
            </summary>
            <value>the unique Visual Guard identifier of the original role when the role is a new version of another role. When the role is the original role, the value is equal to <see cref="F:System.Guid.Empty"/>.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.AppId">
            <summary>
            Gets the application id of the role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsApplicationUnknown">
            <summary>
            Indicates if the application id is not defined (just for compatibility with repository with version older than 1.2.60915.0
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsIdForSharedRole">
            <summary>
            Indicates if the role represented by the object is a shared role
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.op_Equality(Novalys.VisualGuard.Security.Role.VGRoleId,Novalys.VisualGuard.Security.Role.VGRoleId)">
            <summary>
            Determines whether two specified String role have the same value.
            </summary>
            <param name="a">a role id or a null reference.</param>
            <param name="b">a role id or a null reference.</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.op_Inequality(Novalys.VisualGuard.Security.Role.VGRoleId,Novalys.VisualGuard.Security.Role.VGRoleId)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.Equals(System.Object)">
            <summary>Returns a value that indicates whether this <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"></see> object is equal to a specified object.</summary>
            <returns>true if o is an object with the same underlying type and value as this <see cref="T:System.Security.Principal.SecurityIdentifier"></see> object; otherwise, false.</returns>
            <param name="o">An object to compare with this <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"></see> object, or null.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.Equals(Novalys.VisualGuard.Security.Role.VGRoleId)">
            <summary>Indicates whether the specified <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"></see> object is equal to the current <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"></see> object.</summary>
            <returns>true if the value of id is equal to the value of the current <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"></see> object.</returns>
            <param name="id">The <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId" /> object to compare.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.GetHashCode">
            <summary>Serves as a hash function for the current <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"></see> object. The <see cref="M:GetHashCode"></see> method is suitable for hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash value for the current <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId" /> object.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsMasterAdminRole">
            <summary>
            Gets a value that indicates whether the role is a master administrator 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsAuditor">
            <summary>
            Gets a value that indicates whether the role is a auditor 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsDeveloper">
            <summary>
            Gets a value that indicates whether the role is a developer 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsDeveloperDeployer">
            <summary>
            Gets a value that indicates whether the role is a developer deployer 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsRestrictedAuditor">
            <summary>
            Gets a value that indicates whether the role is a restricted auditor 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsRestrictedDeveloper">
            <summary>
            Gets a value that indicates whether the role is a restricted developer 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsRestrictedDeveloperDeployer">
            <summary>
            Gets a value that indicates whether the role is a restricted Developer Deployer 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsRestrictedUserAdministrator">
            <summary>
            Gets a value that indicates whether the role is a restricted User Administrator
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsUserAdministrator">
            <summary>
            Gets a value that indicates whether the role is a user Administrator
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsMembershipManagerRole">
            <summary>
            Gets a value that indicates whether the role is a Membership manager role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsMembershipRole">
            <summary>
            Gets a value that indicates whether the role is a Membership role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.IsSpecialRole">
            <summary>
            Gets a value that indicates whether the role is a Membership role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.MasterAdministratorRole">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> class representing the Master Administrator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.GetMembershipRoleForApplicationId(System.Guid)">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> class representing the Master Administrator.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleId.MembershipManagerRoleId">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleId"/> class representing the Membership Manager role.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleId.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGRoleInformation">
            <summary>
            Provides the permission set associated to a role and all information about the role.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleInformation.#ctor(System.String,Novalys.VisualGuard.Security.App.VGIApplicationInformation)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleInformation"/> without permission set
            </summary>
            <param name="name">The name of the role.</param>
            <param name="app">The <see cref="T:Novalys.VisualGuard.Security.App.VGIApplicationInformation"/> to which the role belongs.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleInformation.#ctor(System.String,Novalys.VisualGuard.Security.App.VGIApplicationInformation,System.String,Novalys.VisualGuard.Security.VGIPermissionSet[],System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleInformation"/>
            </summary>
            <param name="name">The name of the role.</param>
            <param name="app">The <see cref="T:Novalys.VisualGuard.Security.App.VGIApplicationInformation"/> representing the application to which the role belongs.</param>
            <param name="permissionSets">An array of <see cref="T:Novalys.VisualGuard.Security.Permission.VGPermissionSet"/> representing the permission sets granted to the role.</param>
            <param name="description">The description of the role.</param>
            <param name="isBuiltIn">Indicates if the role is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleInformation.#ctor(System.String,System.Guid,System.String,System.Guid[],System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleInformation"/>
            </summary>
            <param name="name">The name of the role.</param>
            <param name="appId">a Guid representing the application to which the role belongs.</param>
            <param name="permissionSetIds">Ann array of <see cref="T:System.Guid"/> representing the list of permission set granted to the role.</param>
            <param name="description">The description of the role.</param>
            <param name="isBuiltIn">Indicates if the role is generated by Visual Guard and cannot be deleted.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.PermissionSets">
            <summary>
            Gets or sets the list of id of permission sets granted to the role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.Name">
            <summary>
            Gets or sets the name of the role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.Description">
            <summary>
            Gets or sets the description of the role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.Application">
            <summary>
            Gets the application id to which the role belongs.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleInformation.Clone">
            <summary>
            Creates a new VGRoleInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGRoleInformation that is a copy of the current instance.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.IsBuiltIn">
            <summary>
            Indicates if the role is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.Id">
            <summary>
            Gets or sets the unique identifier of this role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.IsSharedRole">
            <summary>
            Indicates if the role is a Shared role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.RoleId">
            <summary>
            Gets the full id of the role (including the application Id and the id of the role)
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.OriginalId">
            <summary>
             Gets the Visual Guard unique identifier of the orginal version used to create this item.
            </summary>
            <value>A <see cref="T:System.Guid"/> value representing the id the orginal item when the item is a new version of another application; <see cref="F:System.Guid.Empty"/> if the item is not a copy of another application.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.CopyOf">
            <summary>
             Gets the id the item used to create this version of the item.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleInformation.CreateNewVersion(System.Guid)">
            <summary>
            Creates a new version of the item for the specified application id
            </summary>
            <param name="newApplicationId">the id of the new version of the application</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.Common.VGIInformation"/> object that is a new version of the item.s</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGRoleInformation.GrantedPermissions">
            <summary>
            Gets the list of permissions granted to this role.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGRoleNotFoundException">
            <summary>
            Exception thrown when the user's credentials are not found in the given repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Role.VGRoleNotFoundException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGRoleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation">
            <summary>
            Provides role list of a Visual Guard user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.#ctor(System.DateTime,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.#ctor(Novalys.VisualGuard.Security.Common.VGSecurityIdentifier,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation"/>
            </summary>
            <param name="sid">The security identifier of this principal.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.#ctor(Novalys.VisualGuard.Security.Common.VGSecurityIdentifier,Novalys.VisualGuard.Security.Role.VGIRoleInformation[],System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation"/>
            </summary>
            <param name="sid">The security identifier of this principal.</param>
            <param name="roles">String array of roles for the given user identity.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.#ctor(Novalys.VisualGuard.Security.Common.VGSecurityIdentifier,Novalys.VisualGuard.Security.Role.VGIRoleInformation[],System.Boolean,System.DateTime)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation"/>
            </summary>
            <param name="sid">The security identifier of this principal.</param>        
            <param name="roles">String array of roles for the given user identity.</param>
            <param name="builtIn">Indicates if the principal is generated by Visual Guard and cannot be deleted.</param>
            <param name="utcNow">the current Utc Date and time of the server</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Roles">
            <summary>
            Gets or sets a string array of roles for the given user identity.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <remarks>This property check the name of the underlying windows account against Active directory</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.LastAccountName">
            <summary>
            Gets the last checked account name.
            </summary>
            <remarks>this method does not check the name of account against Active Directory but return the name of the last valid check.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.ChangeAccountName(System.String)">
            <summary>
            Allows to change the name of the Windows Account (DomainName\AccountName)
            </summary>
            <param name="name">the new name of the account.</param>
            <remarks>This method consider that the account is verified and exist</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.MarkAsUnknown">
            <summary>
            Indicates that the underlying account is not found
            </summary>
            <remarks>This method consider that the account is verified and does not exist</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Email">
            <summary>
            Gets or sets the name of the user. (Not Supported for Windows Account)
            </summary>
            <summary>
            Gets or sets the e-mail address of this principal.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Clone">
            <summary>
            Creates a new VGWindowsPrincipalInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGWindowsPrincipalInformation that is a copy of the current instance.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Duplicate(System.DateTime)">
            <summary>
            Creates a new VGIPrincipalInformation that is a copy of the current instance.  
            </summary>
            <returns>A new VGIPrincipalInformation that is a copy of the current instance.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.IsBuiltIn">
            <summary>
            Indicates if the principal is generated by Visual Guard and cannot be deleted.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Id">
            <summary>
            Returns the unique identifier of this role.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.TimeStamp">
            <summary>
            Gets or Sets the time when information was saved as <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.RepositoryId">
            <summary>
            Gets or sets the unique identifier of this item used to store in the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Novalys#VisualGuard#Security#Common#VGIInformation#NewRepositoryId">
            <summary>
            Gets or sets the new unique identifier of the information.
            </summary>
            <remarks>This value is always the same as the RepositoryID value for this class.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Novalys#VisualGuard#Security#Common#VGIInformation#IsRepositoryIdChanged">
            <summary>
            Gets a boolean value indicating when the repository id has been changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.CreationDate">
            <summary>
            Gets the date and the time when the credential was  added to the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the serialization info of the object.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation"/> class.
            </summary>
            <param name="info">a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> containing the serialized info.</param>
            <param name="context">the context of the serialization.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.AccountExists">
            <summary>
            Indicates when the account exists or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.SpecialRoles">
            <summary>
            Gets or sets an array of special roles for the given user identity.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.Verified">
            <summary>
            Indicates that the underlying windows account has been checked againts Active Directory
            </summary>
            <seealso cref="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.MarkAsUnknown"/>
            <seealso cref="M:Novalys.VisualGuard.Security.Role.VGWindowsPrincipalInformation.ChangeAccountName(System.String)"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Runtime.VGSecurityInitializingEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.Common.VGDefaultRuntimeProvider.DefaultRuntimeInitializing"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.Runtime.VGSecurityInitializingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Runtime.VGSecurityInitializingEventArgs">
            <summary>
            <para>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.Common.VGDefaultRuntimeProvider.DefaultRuntimeInitializing"/> event.
            </para>
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.Runtime.VGSecurityInitializingEventArgs.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="runtime">the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used by <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/> to load and set the security.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Runtime.VGSecurityInitializingEventArgs.Runtime">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used to load and set the security of the application.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used by <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/> to load and set the security.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ArrayConstructorNode">
            <summary>
            Represents parsed method node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ArrayConstructorNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ArrayConstructorNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ArrayConstructorNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the type defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.AssignNode">
            <summary>
            Represents parsed assignment node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.AssignNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.AssignNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.AssignNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Assigns value of the right operand to the left one.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.AttributeNode">
            <summary>
            Represents parsed attribute node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.AttributeNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.AttributeNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.AttributeNode.GetObjectType(System.String,System.Type)">
            <summary>
            Tries to determine attribute type based on the specified
            attribute type name.
            </summary>
            <param name="typeName">
            Attribute type name to resolve.
            </param>
            <param name="currentContextType"></param>
            <returns>
            Resolved attribute type.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If type cannot be resolved.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode">
            <summary>
            Base type for all expression nodes.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.TokenDataKey">
            <summary>
            The key used to store the token generating an exception in the data of the exception.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext">
            <summary>
            Holds the state during evaluating an expression.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.RootContext">
            <summary>
            Gets/Sets the root context of the current evaluation
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.RootContextType">
            <summary>
            Gets the type of the <see cref="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.RootContext"/>
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.ThisContext">
            <summary>
            Gets/Sets the current context of the current evaluation
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.Variables">
            <summary>
            Gets/Sets global variables of the current evaluation
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.LocalVariables">
            <summary>
            Gets/Sets local variables of the current evaluation
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.CurrentEvaluatedNode">
            <summary>
            Gets/Sets the node currently evaluated
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.AllowAssignation">
            <summary>
            Gets/Sets a boolean indicating whether the assignation is allowed for the expression;
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.#ctor(System.Object,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Initializes a new EvaluationContext instance.
            </summary>
            <param name="rootContext">The root context for this evaluation</param>
            <param name="globalVariables">dictionary of global variables used during this evaluation.</param>
            <param name="allowAssignment">indicates whether the assignment is authorized for this evaluation</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.#ctor(System.Object,System.Collections.IDictionary,System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rootContext"></param>
            <param name="globalVariables"></param>
            <param name="rootContextType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.SwitchThisContext">
            <summary>
            Switches current ThisContext.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext.SwitchLocalVariables(System.Collections.IDictionary)">
            <summary>
            Switches current LocalVariables.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Novalys#VisualGuard#Security#Scripting#Expressions#IExpression#GetValue">
            <summary>
            Returns node's value.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Novalys#VisualGuard#Security#Scripting#Expressions#IExpression#GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Novalys#VisualGuard#Security#Scripting#Expressions#IExpression#GetValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Novalys#VisualGuard#Security#Scripting#Expressions#IExpression#GetValue(System.Object,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.GetValue(System.Object,System.Collections.IDictionary,System.Boolean)">
            <summary>
            This is the entrypoint into evaluating this expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.GetValueInternal(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Called internally during expression evaluation
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.GetEvaluatedType(System.Type,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Returns the type of the node for the given context.
            </summary>
            <param name="context">the Type of the context</param>
            <param name="evalContext">the evaluation context</param>
            <param name="errors">the list of errors in which the error should be added.</param>
            <returns>Node's type.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Novalys#VisualGuard#Security#Scripting#Expressions#IExpression#SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Novalys#VisualGuard#Security#Scripting#Expressions#IExpression#SetValue(System.Object,System.Collections.IDictionary,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="variables">Expression variables map.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.SetValue(System.Object,System.Collections.IDictionary,System.Object)">
            <summary>
            This is the entrypoint into evaluating this expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.SetValueInternal(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Called internally during expression evaluation.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.Set(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <remarks>
            <p>
            This is a default implementation of <c>Set</c> method, which
            simply throws <see cref="T:System.NotSupportedException"/>. 
            </p>
            <p>
            This was done in order to avoid redundant <c>Set</c> method implementations,
            because most of the node types do not support value setting.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.ToString">
            <summary>
            Returns a string representation of this node instance.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.BinaryOperator">
            <summary>
            Base class for unary operators.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BinaryOperator.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BinaryOperator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.BinaryOperator.Left">
            <summary>
            Gets the left operand.
            </summary>
            <value>The left operand.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.BinaryOperator.Right">
            <summary>
            Gets the right operand.
            </summary>
            <value>The right operand.</value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.BooleanLiteralNode">
            <summary>
            Represents parsed boolean literal node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BooleanLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BooleanLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.BooleanLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the boolean literal node.
            </summary>
            <summary>
            This is the entrypoint into evaluating this expression.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.CastNode">
            <summary>
            Represents parsed type node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.CastNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.CastNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.CastNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue">
            <summary> 
            This class provides skeletal implementations of some
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> operations.
            </summary>
            <remarks>
            <p>
            The implementations in this class are appropriate when the base
            implementation does not allow <see lang="null"/> elements. The methods
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Add(System.Object)"/>,
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Remove"/>, and
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Element"/> are based on
            the <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Offer(System.Object)"/>,
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Poll"/>, and
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Peek"/> methods
            respectively but throw exceptions instead of indicating failure via
            <see lang="false"/> or <see lang="null"/> returns.
            <p/> 
            An <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> implementation that extends this class must
            minimally define a method
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Offer(System.Object)"/> which does
            not permit the insertion of <see lang="null"/> elements, along with methods 
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Poll"/>, and
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Peek"/>. Typically,
            additional methods will be overridden as well. If these requirements
            cannot be met, consider instead subclassing
            <see cref="T:System.Collections.CollectionBase"/>}.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue"/> class.
            </summary>
            <remarks>
            <p>
            This is an abstract class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Add(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible
            to do so immediately without violating capacity restrictions.
            </summary>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns> 
            <see lang="true"/> if successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Remove">
            <summary> 
            Retrieves and removes the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Poll"/> only in that
            it throws an exception if this queue is empty.
            </p>
            </remarks>
            <returns> 
            The head of this queue
            </returns>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Element">
            <summary> 
            Retrieves, but does not remove, the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Peek"/>
            only in that it throws an exception if this queue is empty.
            </p>
            <p>
            ALso note that this implementation returns the result of
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Peek"/> unless the queue
            is empty.
            </p>
            </remarks>
            <returns>The head of this queue.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException">
            If this queue is empty.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Clear">
            <summary> 
            Removes all of the elements from this queue.
            </summary>
            <remarks>
            <p>
            The queue will be empty after this call returns.
            </p>
            <p>
            This implementation repeatedly invokes
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Poll"/> until it
            returns <see lang="null"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.AddAll(System.Collections.ICollection)">
            <summary> 
            Adds all of the elements in the supplied <paramref name="collection"/>
            to this queue.
            </summary>
            <remarks>
            <p>
            Attempts to
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.AddAll(System.Collections.ICollection)"/>
            of a queue to itself result in <see cref="T:System.ArgumentException"/>.
            Further, the behavior of this operation is undefined if the specified
            collection is modified while the operation is in progress.
            </p>
            <p>
            This implementation iterates over the specified collection,
            and adds each element returned by the iterator to this queue, in turn.
            An exception encountered while trying to add an element (including,
            in particular, a <see lang="null"/> element) may result in only some
            of the elements having been successfully added when the associated
            exception is thrown.
            </p>
            </remarks>
            <param name="collection">
            The collection containing the elements to be added to this queue.
            </param>
            <returns>
            <see lang="true"/> if this queue changed as a result of the call.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="collection"/> or any one of its elements are <see lang="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the collection is the current <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> or 
            the collection size is greater than the queue capacity.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Offer(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            <p>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Add(System.Object)"/>,
            which can fail to insert an element only by throwing an exception.
            </p>
            </remarks>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns>
            <see lang="true"/> if the element was added to this queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="objectToAdd"/> is
            <see lang="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Peek">
            <summary> 
            Retrieves, but does not remove, the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Poll">
            <summary> 
            Retrieves and removes the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.IsEmpty">
            <summary>
            Returns <see lang="true"/> if there are no elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/>, <see lang="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Capacity">
            <summary>
            Returns the current capacity of this queue.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.AbstractQueue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet">
            <summary>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet"/> is an
            <see langword="abstract"/> class that supports the creation of new
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> types where the underlying data
            store is an <see cref="T:System.Collections.IDictionary"/> instance.
            </summary>
            <remarks>
            <p>
            You can use any object that implements the
            <see cref="T:System.Collections.IDictionary"/> interface to hold set
            data. You can define your own, or you can use one of the objects
            provided in the framework. The type of
            <see cref="T:System.Collections.IDictionary"/> you
            choose will affect both the performance and the behavior of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> using it.
            </p>
            <p>
            This object overrides the <see cref="M:System.Object.Equals(System.Object)"/> method,
            but not the <see cref="M:System.Object.GetHashCode"/> method, because
            the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet"/> class is mutable.
            Therefore, it is not safe to use as a key value in a dictionary.
            </p>
            <p>
            To make a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> typed based on your
            own <see cref="T:System.Collections.IDictionary"/>, simply derive a new
            class with a constructor that takes no parameters. Some
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> implmentations cannot be defined
            with a default constructor. If this is the case for your class, you
            will need to override <b>clone</b> as well.
            </p>
            <p>
            It is also standard practice that at least one of your constructors
            takes an <see cref="T:System.Collections.ICollection"/> or an
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> as an argument.
            </p>
            </remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            <version>$Id: DictionarySet.cs,v 1.7 2007/03/16 04:01:27 aseovic Exp $</version>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.InternalDictionary">
            <summary>
            Provides the storage for elements in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>, stored as the key-set
            of the <see cref="T:System.Collections.IDictionary"/> object.  
            </summary>
            <remarks>
            <p>
            Set this object in the constructor if you create your own
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> class.
            </p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.Placeholder">
            <summary>
            The placeholder object used as the value for the
            <see cref="T:System.Collections.IDictionary"/> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>s.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection; also <see langword="false"/> if the
            supplied <paramref name="collection"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <seealso cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.IsSynchronized"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
            <seealso cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.SyncRoot"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.DictionarySet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet">
            <summary>
            Implements an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> based on a
            hash table.
            </summary>
            <remarks>
            <p>
            This will give the best lookup, add, and remove performance for very
            large data-sets, but iteration will occur in no particular order.
            </p>
            </remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            <version>$Id: HashedSet.cs,v 1.6 2007/03/16 04:01:27 aseovic Exp $</version>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet"/> class, and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HybridSet">
            <summary>
            Implements an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> that automatically
            changes from a list based implementation to a hashtable based
            implementation when the size reaches a certain threshold.
            </summary>
            <remarks>
            <p>
            This is good if you are unsure about whether you data-set will be tiny
            or huge.
            </p>
            <note>
            Because this uses a dual implementation, iteration order is <b>not</b>
            guaranteed!
            </note>
            </remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            <version>$Id: HybridSet.cs,v 1.6 2007/03/16 04:01:28 aseovic Exp $</version>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HybridSet.#ctor">
            <summary>
            Creates a new set instance based on either a list or a hash table,
            depending on which will be more efficient based on the data-set
            size.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HybridSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on either a list or a hash table,
            depending on which will be more efficient based on the data-set
            size, and initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet">
            <summary>
            Implements an immutable (read-only)
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> wrapper.
            </summary>
            <remarks>
            <p>
            Although this class is advertised as immutable, it really isn't.
            Anyone with access to the wrapped <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            can still change the data. So <see cref="M:System.Object.GetHashCode"/>
            is not implemented for this <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>, as
            is the case for all <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            implementations in this library. This design decision was based on the
            efficiency of not having to <b>clone</b> the wrapped
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> every time you wrap a mutable
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.#ctor(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Constructs an immutable (read-only)
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> wrapper.
            </summary>
            <param name="basisSet">
            The <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> that is to be wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <remarks>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Clone">
            <summary>
            Returns a clone of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            instance.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present. 
            </summary>
            <param name="setOne">A collection of elements.</param>
            <returns>
            A new <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> containing the union of
            this <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> with the specified
            collection. Neither of the input objects is modified by the union.
            </returns>
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            The intersection of this set with <paramref name="setOne"/>.
            </returns>
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "minus" of this set from the <paramref name="setOne"/>
            set.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the elements from this set with the elements in
            <paramref name="setOne"/> removed.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ImmutableSet.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ this</c>.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue">
            <summary>
            A collection designed for holding elements prior to processing.
            </summary>
            <remarks>
            <p>
            Besides basic <see cref="T:System.Collections.ICollection"/> operations,
            queues provide additional insertion, extraction, and inspection
            operations.
            </p>
            <p>
            Each of these methods exists in two forms: one throws
            an exception if the operation fails, the other returns a special
            value (either <see lang="null"/> or <see lang="false"/>, depending on the
            operation). The latter form of the insert operation is designed
            specifically for use with capacity-restricted <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/>
            implementations; in most implementations, insert operations cannot
            fail.
            </p>
            <p>
            Queues typically, but do not necessarily, order elements in a
            FIFO (first-in-first-out) manner. Among the exceptions are
            priority queues, which order elements according to a supplied
            comparator, or the elements' natural ordering, and LIFO queues (or
            stacks) which order the elements LIFO (last-in-first-out).
            Whatever the ordering used, the head of the queue is that
            element which would be removed by a call to
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Remove"/> or
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll"/>. In a FIFO queue, all new
            elements are inserted at the tail of the queue. Other kinds of queues may
            use different placement rules. Every <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> implementation
            must specify its ordering properties.
            </p>
            <p>
            The <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Offer(System.Object)"/> method inserts an
            element if possible, otherwise returning <see lang="false"/>. This differs from the 
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Add(System.Object)"/> method, which can fail to
            add an element only by throwing an exception. The
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Offer(System.Object)"/> method is designed for
            use when failure is a normal, rather than exceptional occurrence, for example,
            in fixed-capacity (or "bounded" queues.
            </p>
            <p>
            The <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Remove"/>
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll"/> methods remove and
            return the head of the queue. Exactly which element is removed from the
            queue is a function of the queue's ordering policy, which differs from
            implementation to implementation. The
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Remove"/> and
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll"/> methods differ only in their
            behavior when the queue is empty: the
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Remove"/> method throws an exception,
            while the <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll"/> method returns
            <see lang="null"/>.
            </p>
            <p>
            The <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Element"/> and
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Peek"/> methods return, but do
            not remove, the head of the queue.
            </p>
            <p>
            The <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> interface does not define the blocking queue
            methods, which are common in concurrent programming.
            </p>
            <p>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> implementations generally do not allow insertion
            of <see lang="null"/> elements, although some implementations, such as
            a linked list, do not prohibit the insertion of <see lang="null"/>.
            Even in the implementations that permit it, <see lang="null"/> should
            not be inserted into a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/>, as <see lang="null"/> is also
            used as a special return value by the
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll"/> method to
            indicate that the queue contains no elements.
            </p>
            <p>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> implementations generally do not define
            element-based versions of methods <see cref="M:System.Object.Equals(System.Object)"/> 
            and <see cref="M:System.Object.GetHashCode"/>, but instead inherit the
            identity based versions from the class object, because element-based equality
            is not always well-defined for queues with the same elements but different
            ordering properties.
            </p>
            <p>
            Based on the back port of JCP JSR-166.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Add(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do so
            immediately without violating capacity restrictions, returning
            <see lang="true"/> upon success and throwing an
            <see cref="T:System.InvalidOperationException"/> if no space is
            currently available.
            </summary>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns> 
            <see lang="true"/> if successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the class of the supplied <paramref name="objectToAdd"/> prevents it
            from being added to this queue.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified element is <see lang="null"/> and this queue does not
            permit <see lang="null"/> elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Offer(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            <p>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Add(System.Object)"/>,
            which can fail to insert an element only by throwing an exception.
            </p>
            </remarks>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns>
            <see lang="true"/> if the element was added to this queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="objectToAdd"/> is
            <see lang="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Remove">
            <summary> 
            Retrieves and removes the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll"/>
            only in that it throws an exception if this queue is empty.
            </p>
            </remarks>
            <returns> 
            The head of this queue
            </returns>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException">if this queue is empty</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Poll">
            <summary> 
            Retrieves and removes the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Element">
            <summary> 
            Retrieves, but does not remove, the head of this queue.
            </summary>
            <remarks>
            <p>
            This method differs from <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Peek"/>
            only in that it throws an exception if this queue is empty.
            </p>
            </remarks>
            <returns> 
            The head of this queue.
            </returns>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException">If this queue is empty.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Peek">
            <summary> 
            Retrieves, but does not remove, the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.IsEmpty">
            <summary>
            Returns <see lang="true"/> if there are no elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/>, <see lang="false"/> otherwise.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet">
            <summary>
            A collection that contains no duplicate elements.
            </summary>
            <remarks>
            <p>
            This interface models the mathematical
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> abstraction. The order of
            elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> methods, and thus is not
            guaranteed.
            </p>
            <p>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> overrides the
            <see cref="M:System.Object.Equals(System.Object)"/> method to test for "equivalency":
            whether the two sets contain the same elements. The "==" and "!="
            operators are not overridden by design, since it is often desirable to
            compare object references for equality.
            </p>
            <p>
            Also, the <see cref="M:System.Object.GetHashCode"/> method is not
            implemented on any of the set implementations, since none of them are
            truly immutable. This is by design, and it is the way almost all
            collections in the .NET framework function. So as a general rule, don't
            store collection objects inside <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            instances. You would typically want to use a keyed
            <see cref="T:System.Collections.IDictionary"/> instead.
            </p>
            <p>
            None of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> implementations in
            this library are guaranteed to be thread-safe in any way unless wrapped
            in a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet"/>.
            </p>
            <p>
            The following table summarizes the binary operators that are supported
            by the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> class.
            </p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>
            		Element included in result if it exists in either <c>A</c> OR
            		<c>B</c>.
            		</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>
            		Element included in result if it exists in both <c>A</c> AND
            		<c>B</c>.
            		</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>
            		Element included in result if it exists in one, but not both,
            		of <c>A</c> and <c>B</c>.
            		</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>
            		Take all the elements in <c>A</c>. Now, if any of them exist in
            		 <c>B</c>, remove them. Note that unlike the other operators,
            		 <c>A - B</c> is not the same as <c>B - A</c>.
            		 </term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </remarks>
            <version>$Id: ISet.cs,v 1.5 2006/04/09 07:18:37 markpollack Exp $</version>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present. 
            </summary>
            <remarks>
            <p>
            That is, the element is included if it is in either
            <paramref name="setOne"/> or this set. Neither this set nor the input
            set are modified during the operation. The return value is a
            <b>clone</b> of this set with the extra elements added in.
            </p>
            </remarks>
            <param name="setOne">A collection of elements.</param>
            <returns>
            A new <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> containing the union of
            this <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> with the specified
            collection. Neither of the input objects is modified by the union.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.
            </summary>
            <remarks>
            <p>
            That is, the element is included if it exists in both sets. The
            <c>Intersect()</c> operation does not modify the input sets. It
            returns a <b>clone</b> of this set with the appropriate elements
            removed.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <returns>
            The intersection of this set with <paramref name="setOne"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "minus" of this set from the <paramref name="setOne"/>
            set.
            </summary>
            <remarks>
            <p>
            This returns a set of all the elements in set
            <paramref name="setOne"/>, removing the elements that are also in
            this set. The original sets are not modified during this operation.
            The result set is a <b>clone</b> of this
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> containing the elements from
            the operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the elements from this set with the elements in
            <paramref name="setOne"/> removed.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <remarks>
            <p>
            The original sets are not modified during this operation. The
            result set is a <b>clone</b> of this set containing the elements
            from the exclusive-or operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ this</c>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList">
            <summary>
            Simple linked list implementation.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/> class that contains all
             elements of the specified list.
            </summary>
            <param name="list">
            A list of elements that defines the initial contents.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.IsReadOnly">
            <summary>
            Is list read only?
            </summary>
            <value>
            <see langword="true"/> if the list is read only.
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Item(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <remarks>
            <p>
            This is the indexer for the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/> class.
            </p>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.GetNode(System.Int32)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <param name="value">The object to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Remove(System.Object)">
            <summary>
            Removes the first instance of the specified object found.
            </summary>
            <param name="value">The object to remove</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this list contains the specified
            element.
            </summary>
            <param name="value">The element to look for.</param>
            <returns>
            <see langword="true"/> if this list contains the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Clear">
            <summary>
            Removes all objects from the list.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.IndexOf(System.Object)">
            <summary>
            Returns the index of the first instance of the specified
            <paramref name="value"/> found.
            </summary>
            <param name="value">The object to search for</param>
            <returns>
            The index of the first instance found, or -1 if the element was not
            found.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Add(System.Object)">
            <summary>
            Adds the specified object to the end of the list.
            </summary>
            <param name="value">The object to add</param>
            <returns>The index that the object was added at.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.AddAll(System.Collections.IList)">
            <summary>
            Adds all of the elements of the supplied
            <paramref name="elements"/>list to the end of this list.
            </summary>
            <param name="elements">The list of objects to add.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.IsFixedSize">
            <summary>
            Is the list a fixed size?
            </summary>
            <value>
            <see langword="true"/> if the list is a fixed size list.
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.CheckUpdateState">
            <summary>
            Checks whether the list can be modified.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If the list cannot be modified.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.ValidateIndex(System.Int32)">
            <summary>
            Validates the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the index is invalid.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.GetNode(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <returns>The node at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.GetNode(System.Object)">
            <summary>
            Returns the node (and index) of the first node that contains
            the specified value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>
            The node, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.RemoveNode(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Node)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node to be removed.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the list is synchronized across
            threads.
            </summary>
            <remarks>
            <note>
            This implementation <b>always</b> returns <see langword="false"/>.
            </note>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.Count">
            <summary>
            The number of objects within the list.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in this list to an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in this
            list, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> is less than zero
            or is greater than the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="array"/> is of insufficient size.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.SyncRoot">
            <summary>
            An object that can be used to synchronize this
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/> to make it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/> to make it thread-safe.
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/>.
            </summary>
            <remarks>
            <p>
            Enumerators are fail fast.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.LinkedList"/>.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ListSet">
            <summary>
            Implements a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> based on a list.
            </summary>
            <remarks>
            <p>
            Performance is much better for very small lists than either
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet"/> or <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SortedSet"/>.
            However, performance degrades rapidly as the data-set gets bigger. Use a
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HybridSet"/> instead if you are not sure your data-set
            will always remain very small. Iteration produces elements in the order they were added.
            However, element order is not guaranteed to be maintained by the various
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> mathematical operators.  
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ListSet.#ctor">
            <summary>
            Creates a new set instance based on a list.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ListSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a list and initializes it based on a
            collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException">
            <summary>
            Thrown when an element is requested from an empty <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.NoElementsException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue">
            <summary> 
            An unbounded priority <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/> based on a priority
            heap.  This queue orders elements according to an order specified
            at construction time, which is specified either according to their
            <i>natural order</i> (see <see cref="T:System.IComparable"/>, or according to a
            <see cref="T:System.Collections.IComparer"/>, depending on which constructor is
            used. A priority queue does not permit <see lang="null"/> elements.
            A priority queue relying on natural ordering also does not
            permit insertion of non-comparable objects (doing so will result
            <see cref="T:System.InvalidCastException"/>.
            
            <p/>
            The <i>head</i> of this queue is the <i>lowest</i> element
            with respect to the specified ordering.  If multiple elements are
            tied for lowest value, the head is one of those elements -- ties are
            broken arbitrarily. 
            
            <p/>
            A priority queue is unbounded, but has an internal
            <i>capacity</i> governing the size of an array used to store the
            elements on the queue.  It is always at least as large as the queue
            size.  As elements are added to a priority queue, its capacity
            grows automatically.  The details of the growth policy are not
            specified.
            
            <p/>
            This class and its enumerator implement all of the
            <i>optional</i> methods of the <see cref="T:System.Collections.ICollection"/> and
            <see cref="T:System.Collections.IEnumerator"/> interfaces.
            The enumerator provided in method <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> 
            is <b>not</b> guaranteed to traverse the elements of the PriorityQueue in any
            particular order.
            
            <p/> 
            Note that this implementation is <b>NOT</b> synchronized.
            Multiple threads should not access a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/>
            instance concurrently if any of the threads modifies the list
            structurally. Instead, use the thread-safe PriorityBlockingQueue.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.PriorityQueueEnumerator._cursorIndex">
            <summary> 
            Index (into queue array) of element to be returned by subsequent call to next.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue._queue">
            <summary> 
            Priority queue represented as a balanced binary heap: the two children
            of queue[n] are queue[2*n] and queue[2*n + 1].  The priority queue is
            ordered by comparator, or by the elements' natural ordering, if
            comparator is null:  For each node n in the heap and each descendant d
            of n, n &lt;= d.
            
            The element with the lowest value is in queue[1], assuming the queue is
            nonempty.  (A one-based array is used in preference to the traditional
            zero-based array to simplify parent and child calculations.)
            
            queue.length must be >= 2, even if size == 0.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue._priorityQueueSize">
            <summary> The number of elements in the priority queue.</summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue._comparator">
            <summary> 
            The comparator, or null if priority queue uses elements'
            natural ordering.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue._queueModificationCount">
            <summary> 
            The number of times this priority queue has been
            <i>structurally modified</i>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.#ctor">
            <summary>
            Creates a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/> with the default initial capacity
            (11) that orders its elements according to their natural
            ordering (using <see cref="T:System.IComparable"/>).
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.#ctor(System.Int32)">
            <summary> 
            Creates a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/> with the specified initial capacity
            that orders its elements according to their natural ordering
            (using <see cref="T:System.IComparable"/>).
            </summary>
            <param name="initialCapacity">the initial capacity for this priority queue.
            </param>
            <exception cref="T:System.ArgumentException">if <paramref name="initialCapacity"/> is less than 1.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.#ctor(System.Int32,System.Collections.IComparer)">
            <summary> 
            Creates a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/> with the specified initial capacity
            that orders its elements according to the specified comparator.
            </summary>
            <param name="initialCapacity">the initial capacity for this priority queue.</param>
            <param name="comparator">the comparator used to order this priority queue.
            If <see lang="null"/> then the order depends on the elements' natural ordering.
            </param>
            <exception cref="T:System.ArgumentException">if <paramref name="initialCapacity"/> is less than 1.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.#ctor(System.Collections.ICollection)">
            <summary> 
            Creates a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/> containing the elements in the
            specified collection.  The priority queue has an initial
            capacity of 110% of the size of the specified collection or 1
            if the collection is empty.  If the specified collection is an
            instance of a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/>, the priority queue will be sorted
            according to the same comparator, or according to its elements'
            natural order if the collection is sorted according to its
            elements' natural order.  Otherwise, the priority queue is
            ordered according to its elements' natural order.
            </summary>
            <param name="collection">the collection whose elements are to be placed into this priority queue.</param>
            <exception cref="T:System.InvalidCastException">if elements of <paramref name="collection"/> cannot be 
            compared to one another according to the priority queue's ordering</exception>
            <exception cref="T:System.ArgumentNullException">if <paramref name="collection"/> or any element with it is
            <see lang="null"/>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.initializeArray(System.Collections.ICollection)">
            <summary> 
            Common code to initialize underlying queue array across
            constructors below.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.urShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.fixUp(System.Int32)">
            <summary> 
            Establishes the heap invariant assuming the heap
            satisfies the invariant except possibly for the leaf-node indexed by k
            (which may have a nextExecutionTime less than its parent's).
            </summary>
            <remarks>
            This method functions by "promoting" queue[k] up the hierarchy
            (by swapping it with its parent) repeatedly until queue[k]
            is greater than or equal to its parent.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.fixDown(System.Int32)">
            <summary> 
            Establishes the heap invariant (described above) in the subtree
            rooted at k, which is assumed to satisfy the heap invariant except
            possibly for node k itself (which may be greater than its children).
            </summary>
            <remarks>
            This method functions by "demoting" queue[k] down the hierarchy
            (by swapping it with its smaller child) repeatedly until queue[k]
            is less than or equal to its children.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.heapify">
            <summary> 
            Establishes the heap invariant in the entire tree,
            assuming nothing about the order of the elements prior to the call.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.getQueueSizeBasedOnPercentage(System.Int32,System.Int64)">
            <summary>
            Returns the <paramref name="percentage"/> of <paramref name="size"/> or <see cref="F:System.Int32.MaxValue"/> - 1,
            whichever is smaller. 
            </summary>
            <param name="size">base size</param>
            <param name="percentage">percentage to return</param>
            <returns><paramref name="percentage"/> of <paramref name="size"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.fillFromSorted(System.Collections.ICollection)">
            <summary> 
            Initially fill elements of the queue array under the
            knowledge that it is sorted or is another <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/>, in which
            case we can just place the elements in the order presented.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.fillFromUnsorted(System.Collections.ICollection)">
            <summary> 
            Initially fill elements of the queue array that is not to our knowledge
            sorted, so we must rearrange the elements to guarantee the heap
            invariant.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.removeAt(System.Int32)">
            <summary> 
            Removes and returns element located at <paramref name="index"/> from queue.  (Recall that the queue
            is one-based, so 1 &lt;= i &lt;= size.)
            </summary>
            <remarks>
            Normally this method leaves the elements at positions from 1 up to i-1,
            inclusive, untouched.  Under these circumstances, it returns <see lang="null"/>.
            Occasionally, in order to maintain the heap invariant, it must move
            the last element of the list to some index in the range [2, i-1],
            and move the element previously at position (i/2) to position i.
            Under these circumstances, this method returns the element that was
            previously at the end of the list and is now at some position between
            2 and i-1 inclusive.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.grow(System.Int32)">
            <summary> Resize array, if necessary, to be able to hold given index</summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Capacity">
            <summary>
            Gets the Capacity of this queue.  Will equal <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Count">
            <summary>
            Returns the queue count.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Offer(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do
            so immediately without violating capacity restrictions.
            </summary>
            <remarks>
            <p>
            When using a capacity-restricted queue, this method is generally
            preferable to <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue.Add(System.Object)"/>,
            which can fail to insert an element only by throwing an exception.
            </p>
            </remarks>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns>
            <see lang="true"/> if the element was added to this queue.
            </returns>
            <exception cref="T:System.InvalidCastException">
            if the specified element cannot be compared
            with elements currently in the priority queue according
            to the priority queue's ordering.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="objectToAdd"/> is
            <see lang="null"/> and this queue does not permit <see lang="null"/>
            elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Peek">
            <summary> 
            Retrieves, but does not remove, the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Add(System.Object)">
            <summary> 
            Inserts the specified element into this queue if it is possible to do so
            immediately without violating capacity restrictions, returning
            <see lang="true"/> upon success and throwing an
            <see cref="T:System.InvalidOperationException"/> if no space is
            currently available.
            </summary>
            <param name="objectToAdd">
            The element to add.
            </param>
            <returns> 
            <see lang="true"/> if successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element cannot be added at this time due to capacity restrictions.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the specified element is <see lang="null"/> and this queue does not
            permit <see lang="null"/> elements.
            </exception>
            <exception cref="T:System.ArgumentException">
            If some property of the supplied <paramref name="objectToAdd"/> prevents
            it from being added to this queue.
            </exception>
            <exception cref="T:System.InvalidCastException">
            if the specified element cannot be compared
            with elements currently in the priority queue according
            to the priority queue's ordering.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Remove(System.Object)">
            <summary> 
            Removes a single instance of the specified element from this
            queue, if it is present.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.GetEnumerator">
            <summary> 
            Returns an <see cref="T:System.Collections.IEnumerator"/> over the elements in this queue. 
            The enumeratoar does not return the elements in any particular order.
            </summary>
            <returns> an enumerator over the elements in this queue.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Clear">
            <summary> 
            Removes all elements from the priority queue.
            The queue will be empty after this call returns.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Poll">
            <summary> 
            Retrieves and removes the head of this queue,
            or returns <see lang="null"/> if this queue is empty.
            </summary>
            <returns> 
            The head of this queue, or <see lang="null"/> if this queue is empty.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Contains(System.Object)">
            <summary>
            Queries the queue to see if it contains the specified <pararef name="element"/>
            </summary>
            <param name="element">element to look for.</param>
            <returns><see lang="true"/> if the queue contains the <pararef name="element"/>, 
            <see lang="false"/> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.Comparator">
            <summary> Returns the comparator used to order this collection, or <see lang="null"/>
            if this collection is sorted according to its elements natural ordering
            (using <see cref="T:System.IComparable"/>).
            
            </summary>
            <returns> the comparator used to order this collection, or <see lang="null"/>
            if this collection is sorted according to its elements natural ordering.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Save the state of the instance to a stream (that
            is, serialize it).
            </summary>
            <serialData> The length of the array backing the instance is
            emitted (int), followed by all of its elements (each an
            <see cref="T:System.Object"/>) in the proper order.
            </serialData>
            <param name="serializationInfo">the stream</param>
            <param name="context">the context</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> 
            Reconstitute the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue"/> instance from a stream (that is,
            deserialize it).
            </summary>
            <param name="serializationInfo">the stream</param>
            <param name="context">the context</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.CopyTo(System.Array)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at index 0.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.PriorityQueue.IsEmpty">
            <summary>
            Returns <see lang="true"/> if there are no elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.IQueue"/>, <see lang="false"/> otherwise.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set">
            <summary>
            A collection that contains no duplicate elements.
            </summary>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            <version>$Id: Set.cs,v 1.7 2007/03/16 04:01:28 aseovic Exp $</version>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present. 
            </summary>
            <param name="setOne">A collection of elements.</param>
            <returns>
            A new <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> containing the union of
            this <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> with the specified
            collection. Neither of the input objects is modified by the union.
            </returns>
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "union" of two sets, where all the elements in both are
            present.
            </summary>
            <remarks>
            <p>
            That is, the element is included if it is in either
            <paramref name="setOne"/> or <paramref name="anotherSet"/>. The return
            value is a <b>clone</b> of one of the sets (<paramref name="setOne"/>
            if it is not <see langword="null"/>) with elements of the other set
            added in. Neither of the input sets is modified by the operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the union of the input sets;
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.op_BitwiseOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set)">
            <summary>
            Performs a "union" of two sets, where all the elements in both are
            present.
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the union of the input sets;
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Union(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            The intersection of this set with <paramref name="setOne"/>.
            </returns>
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain. 
            </summary>
            <remarks>
            <p>
            That is, the element is included only if it exists in both
            <paramref name="setOne"/> and <paramref name="anotherSet"/>. Neither input
            object is modified by the operation. The result object is a
            <b>clone</b> of one of the input objects (<paramref name="setOne"/>
            if it is not <see langword="null"/>) containing the elements from
            the intersect operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            The intersection of the two input sets; <see langword="null"/> if
            both sets are <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.op_BitwiseAnd(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain. 
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            The intersection of the two input sets; <see langword="null"/> if
            both sets are <see langword="null"/>.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Intersect(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "minus" of this set from the <paramref name="setOne"/>
            set.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the elements from this set with the elements in
            <paramref name="setOne"/> removed.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs a "minus" of set <paramref name="anotherSet"/> from set
            <paramref name="setOne"/>.
            </summary>
            <remarks>
            <p>
            This returns a set of all the elements in set
            <paramref name="setOne"/>, removing the elements that are also in
            set <paramref name="anotherSet"/>. The original sets are not modified
            during this operation. The result set is a <b>clone</b> of set
            <paramref name="setOne"/> containing the elements from the operation. 
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing
            <c><paramref name="setOne"/> - <paramref name="anotherSet"/></c> elements.
            <see langword="null"/> if <paramref name="setOne"/> is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.op_Subtraction(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set)">
            <summary>
            Performs a "minus" of set <paramref name="anotherSet"/> from set
            <paramref name="setOne"/>.
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing
            <c><paramref name="setOne"/> - <paramref name="anotherSet"/></c> elements.
            <see langword="null"/> if <paramref name="setOne"/> is
            <see langword="null"/>.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Minus(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <param name="setOne">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ this</c>.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <remarks>
            <p>
            The original sets are not modified during this operation. The
            result set is a <b>clone</b> of one of the sets (
            <paramref name="setOne"/> if it is not <see langword="null"/>)
            containing the elements from the exclusive-or operation.
            </p>
            </remarks>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ <paramref name="anotherSet"/></c>.
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.op_ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only those
            elements that are in one of the sets, but not in both.
            </summary>
            <param name="setOne">A set of elements.</param>
            <param name="anotherSet">A set of elements.</param>
            <returns>
            A set containing the result of
            <c><paramref name="setOne"/> ^ <paramref name="anotherSet"/></c>.
            <see langword="null"/> if both sets are <see langword="null"/>.
            </returns>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.ExclusiveOr(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet,Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="collection">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Clone">
            <summary>
            Returns a clone of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            instance.
            </summary>
            <remarks>
            <p>
            This will work for derived <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            classes if the derived class implements a constructor that takes no
            arguments.
            </p>
            </remarks>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <remarks>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <remarks>
            <p>
            When implementing this, if your object uses a base object, like an
            <see cref="T:System.Collections.IDictionary"/>, or anything that has
            a <c>SyncRoot</c>, return that object instead of "<c>this</c>".
            </p>
            </remarks>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.Equals(System.Object)">
            <summary>
            This method will test the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            against another <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> for
            "equality".
            </summary>
            <remarks>
            <p>
            In this case, "equality" means that the two sets contain the same
            elements. The "==" and "!=" operators are not overridden by design.
            If you wish to check for "equivalent"
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> instances, use
            <c>Equals()</c>. If you wish to check to see if two references are
            actually the same object, use "==" and "!=".  
            </p>
            </remarks>
            <param name="obj">
            A <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> object to compare to.
            </param>
            <returns>
            <see langword="true"/> if the two sets contain the same elements.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.GetHashCode">
            <summary>
            Gets the hashcode for the object.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SortedSet">
            <summary>
            Implements an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> based on a sorted
            tree.
            </summary>
            <remarks>
            <p>
            This gives good performance for operations on very large data-sets,
            though not as good - asymptotically - as a
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.HashedSet"/>. However, iteration occurs
            in order.
            </p>
            <p>
            Elements that you put into this type of collection must implement
            <see cref="T:System.IComparable"/>, and they must actually be comparable.
            You can't mix <see cref="T:System.String"/> and
            <see cref="T:System.Int32"/> values, for example.
            </p>
            <p>
            This <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> implementation does
            <b>not</b> support elements that are <see langword="null"/>.
            </p>
            </remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            <version>$Id: SortedSet.cs,v 1.6 2007/03/16 04:01:29 aseovic Exp $</version>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SortedSet.#ctor">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SortedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a sorted tree and initializes
            it based on a collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedDictionaryEnumerator">
            <summary>
            Synchronized <see cref="T:System.Collections.IDictionaryEnumerator"/> that should be returned by synchronized
            dictionary implementations in order to ensure that the enumeration is thread safe.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedEnumerator">
            <summary>
            Synchronized <see cref="T:System.Collections.IEnumerator"/> that should be returned by synchronized
            collections in order to ensure that the enumeration is thread safe.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable">
            <summary>
            Synchronized <see cref="T:System.Collections.Hashtable"/> that, unlike hashtable created
            using <see cref="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)"/> method, synchronizes 
            reads from the underlying hashtable in addition to writes.
            </summary>
            <remarks>
            <p>
            In addition to synchronizing reads, this implementation also fixes
            IEnumerator/ICollection issue described at 
            http://msdn.microsoft.com/netframework/programming/breakingchanges/runtime/clr.aspx
            (search for SynchronizedHashtable for issue description), by implementing 
            <see cref="T:System.Collections.IEnumerator"/> interface explicitly, and returns thread safe enumerator
            implementations as well.
            </p>
            <p>
            This class should be used whenever a truly synchronized <see cref="T:System.Collections.Hashtable"/>
            is needed.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable"/>, copying inital entries from <param name="dictionary"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add. </param>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add. </param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.ContainsKey(System.Object)">
            <summary>
             Returns, whether this <see cref="T:System.Collections.IDictionary"/> contains an entry with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look for</param>
            <returns><see lang="true"/>, if this <see cref="T:System.Collections.IDictionary"/> contains an entry with this <paramref name="key"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.ContainsValue(System.Object)">
            <summary>
             Returns, whether this <see cref="T:System.Collections.IDictionary"/> contains an entry with the specified <paramref name="value"/>.
            </summary>
            <param name="value">The valúe to look for</param>
            <returns><see lang="true"/>, if this <see cref="T:System.Collections.IDictionary"/> contains an entry with this <paramref name="value"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedHashtable.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set. </param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The property is set, key does not exist in the collection, and the <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet">
            <summary>
            Implements a thread-safe <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> wrapper.
            </summary>
            <remarks>
            <p>
            The implementation is extremely conservative, serializing critical
            sections to prevent possible deadlocks, and locking on everything. The
            one exception is for enumeration, which is inherently not thread-safe.
            For this, you have to <c>lock</c> the <c>SyncRoot</c> object for the
            duration of the enumeration.
            </p>
            </remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            <version>$Id: SynchronizedSet.cs,v 1.6 2007/03/16 04:01:29 aseovic Exp $</version>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.#ctor(Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet)">
            <summary>
            Constructs a thread-safe <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>
            wrapper.
            </summary>
            <param name="basisSet">
            The <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> object that this object
            will wrap.
            </param>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="basisSet"/> ecposes a
            <see langword="null"/> <c>SyncRoot</c> value.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="element">The object to add to the set.</param>
            <returns>
            <see langword="true"/> is the object was added,
            <see langword="true"/> if the object was already present.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if
            they are not already present.
            </summary>
            <param name="collection">A collection of objects to add to the set.</param>
            <returns>
            <see langword="true"/> is the set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.Clear">
            <summary>
            Removes all objects from this set.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this set contains the specified
            element.
            </summary>
            <param name="element">The element to look for.</param>
            <returns>
            <see langword="true"/> if this set contains the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <see langword="true"/> if the set contains all the
            elements in the specified collection.
            </summary>
            <param name="collection">A collection of objects.</param>
            <returns>
            <see langword="true"/> if the set contains all the elements in the
            specified collection; also <see langword="false"/> if the
            supplied <paramref name="collection"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>
            <see langword="true"/> if the set contained the specified element.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in
            this set.
            </summary>
            <param name="collection">A collection of elements to remove.</param>
            <returns>
            <see langword="true"/> if the set was modified as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection.
            </summary>
            <param name="c">
            The collection that defines the set of elements to be retained.
            </param>
            <returns>
            <see langword="true"/> if this set changed as a result of this
            operation.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> to
            an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> is synchronized across
            threads.
            </summary>
            <seealso cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.IsSynchronized"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this collection to make
            it thread-safe.
            </value>
            <seealso cref="P:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.Set.SyncRoot"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.SynchronizedSet.Clone">
            <summary>
            Returns a clone of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode">
            <summary>
            Represents parsed method node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the type defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode.GetObjectType(System.String,System.Type)">
            <summary>
            Determines the type of object that should be instantiated.
            </summary>
            <param name="typeName">
            The type name to resolve.
            </param>
            <param name="currentContextType">the current type of the context</param>
            <returns>
            The type of object that should be instantiated.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode.InitializeNode(System.Object[],System.Collections.IDictionary,System.Type)">
            <summary>
            Initializes this node by caching necessary constructor and property info.
            </summary>
            <param name="argValues"></param>
            <param name="namedArgValues"></param>
            <param name="currentContextType"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ConstructorNode.SetNamedArguments(System.Object,System.Collections.IDictionary)">
            <summary>
            Sets the named arguments (properties).
            </summary>
            <param name="instance">Instance to set property values on.</param>
            <param name="namedArgValues">Argument (property) name to value mappings.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.DateLiteralNode">
            <summary>
            Represents parsed node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.DateLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.DateLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.DateLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.DefaultNode">
            <summary>
            Represents parsed default node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.DefaultNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.DefaultNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.DefaultNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns left operand if it is not null, or the right operand if it is.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Expression">
            <summary>
            Container object for the parsed expression.
            </summary>
            <remarks>
            <p>
            Preparing this object once and reusing it many times for expression
            evaluation can result in significant performance improvements, as 
            expression parsing and reflection lookups are only performed once. 
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.Parse(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Expression"/> class
            by parsing specified expression string.
            </summary>
            <param name="expression">Expression to parse.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.RegisterFunction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Registers lambda expression under the specified <paramref name="functionName"/>.
            </summary>
            <param name="functionName">Function name to register expression as.</param>
            <param name="lambdaExpression">Lambda expression to register.</param>
            <param name="variables">Variables dictionary that the function will be registered in.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.ParsePrimary(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Expression"/> class
            by parsing specified primary expression string.
            </summary>
            <param name="expression">Primary expression to parse.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.ParseProperty(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Expression"/> class
            by parsing specified property expression string.
            </summary>
            <param name="expression">Property expression to parse.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Expression"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluates this expression for the specified root object and returns 
            value of the last node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Value of the last node.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.Set(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Evaluates this expression for the specified root object and sets 
            value of the last node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">Value to set last node to.</param>
            <exception cref="T:System.NotSupportedException">If navigation expression is empty.</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionConverter">
            <summary>
            Converts string representation of expression into an instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from a the sourcetype to a <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression"/>?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to an
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.String"/> array if successful.
            </returns>        
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionEvaluator">
            <summary>
            Utility class that enables easy expression evaluation.
            </summary>
            <remarks>
            <p>
            This class allows users to get or set properties, execute methods, and evaluate
            logical and arithmetic expressions.
            </p>
            <p>
            Methods in this class parse expression on every invocation.
            If you plan to reuse the same expression many times, you should prepare
            the expression once using the static <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Expression.Parse(System.String)"/> method,
            and then call <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.GetValue(System.Object,System.Collections.IDictionary)"/> to evaluate it.
            </p>
            <p>
            This can result in significant performance improvements as it avoids expression
            parsing and node resolution every time it is called. 
            </p>
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionEvaluator.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Parses and evaluates specified expression.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionEvaluator.GetValue(System.Object,System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Parses and evaluates specified expression.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionEvaluator.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Parses and specified expression and sets the value of the
            last node to the value of the <c>newValue</c> parameter.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="newValue">Value to set last node to.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionEvaluator.SetValue(System.Object,System.String,System.Collections.IDictionary,System.Object)">
            <summary>
            Parses and specified expression and sets the value of the
            last node to the value of the <c>newValue</c> parameter.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="variables">Expression variables map.</param>
            <param name="newValue">Value to set last node to.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionListNode">
            <summary>
            Represents parsed expression list node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionListNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionListNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ExpressionListNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a result of the last expression in a list.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Result of the last expression in a list</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.FunctionNode">
            <summary>
            Represents parsed function node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.FunctionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.FunctionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.FunctionNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluates function represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Result of the function evaluation.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.HexLiteralNode">
            <summary>
            Represents parsed hexadecimal integer literal node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.HexLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.HexLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.HexLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the hexadecimal integer literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression">
            <summary>
            Interface that all navigation expression nodes have to implement.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.GetValue">
            <summary>
            Returns expression value.
            </summary>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.GetValue(System.Object)">
            <summary>
            Returns expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.GetValue(System.Object,System.Collections.IDictionary)">
            <summary>
            Returns expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.GetValue(System.Object,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Returns expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <param name="allowAssignment">indicates whether the assignment is authorized for this evaluation</param>
            <returns>Value of the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.EvaluateReturnType(System.Type,System.Collections.IDictionary,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Evaluate the expression value type.
            </summary>
            <param name="context">The type of the object to evaluate expression against.</param>
            <param name="variables">Expression variables types map.</param>
            <param name="errors"></param>
            <returns>The type of the value of the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.EvaluateReturnType(System.Type,System.Collections.IDictionary,System.CodeDom.Compiler.CompilerErrorCollection,System.Boolean)">
            <summary>
            Evaluate the expression value type.
            </summary>
            <param name="context">The type of the object to evaluate expression against.</param>
            <param name="variables">Expression variables types map.</param>
            <param name="errors"></param>
            <returns>The type of the value of the expression.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.SetValue(System.Object,System.Object)">
            <summary>
            Sets expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="newValue">New value for the last node of the expression.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IExpression.SetValue(System.Object,System.Collections.IDictionary,System.Object)">
            <summary>
            Sets expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <param name="newValue">New value for the last node of the expression.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.IndexerNode">
            <summary>
            Represents parsed indexer node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IndexerNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IndexerNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IndexerNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IndexerNode.Set(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IndexerNode.GetPropertyInfo(System.Object,System.Collections.IDictionary)">
            <summary>
            Utility method that is needed by ObjectWrapper and AbstractAutowireCapableObjectFactory.
            </summary>
            <param name="context">Context to resolve property against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>PropertyInfo for this node.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.IntLiteralNode">
            <summary>
            Represents parsed integer literal node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IntLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IntLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.IntLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the integer literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode">
            <summary>
            Represents lambda expression.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.argumentNames">
            <summary>
            caches argumentNames of this instance
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.bodyExpression">
            <summary>
            caches body expression of this lambda function
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.ArgumentNames">
            <summary>
            Gets argument names for this lambda expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Assigns value of the right operand to the left one.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.GetValueInternal(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Collections.IDictionary)">
            <summary>
            Returns Lambda Expression's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="arguments">A dictionary containing argument map for this lambda expression.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LambdaExpressionNode.GetEvaluatedType(System.Type,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.CodeDom.Compiler.CompilerErrorCollection,System.Collections.IDictionary)">
            <summary>
            Returns Lambda Expression's type for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="arguments">A dictionary containing argument map for this lambda expression.</param>
            <param name="errors"></param>
            <returns>Node's type.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ListInitializerNode">
            <summary>
            Represents parsed list initializer node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ListInitializerNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ListInitializerNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ListInitializerNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the list defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.LocalFunctionNode">
            <summary>
            Represents local function node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalFunctionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalFunctionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalFunctionNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Evaluates function represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Result of the function evaluation.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.LocalVariableNode">
            <summary>
            Represents parsed variable node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalVariableNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalVariableNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalVariableNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns value of the local variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.LocalVariableNode.Set(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets value of the local variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.MapEntryNode">
            <summary>
            Represents parsed map entry node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MapEntryNode.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.MapEntryNode"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MapEntryNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MapEntryNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the map entry defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.MapInitializerNode">
            <summary>
            Represents parsed map initializer node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MapInitializerNode.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.MapInitializerNode"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MapInitializerNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MapInitializerNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the map defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode">
            <summary>
            Represents parsed method node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode.#cctor">
            <summary>
            Static constructor. Initializes a map of special collection processor methods.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode.GetBestMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Gets the best method given the name, argument values, for a given type.
            </summary>
            <param name="type">The type on which to search for the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="argValues">The arg values.</param>
            <returns>Best matching method or null if none found.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.MethodNode.GetBestMethodByArgTypes(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Gets the best method given the name, argument types, for a given type.
            </summary>
            <param name="type">The type on which to search for the method.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="argTypes">The arg values.</param>
            <returns>Best matching method or null if none found.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.NamedArgumentNode">
            <summary>
            Represents parsed named argument node in the expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NamedArgumentNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NamedArgumentNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NamedArgumentNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the value of the named argument defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments">
            <summary>
            Base type for nodes that accept arguments.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.InitializeNode">
            <summary>
            Initializes the node. 
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.AssertArgumentCount(System.Int32,System.String)">
            <summary>
            Asserts the argument count.
            </summary>
            <param name="requiredCount">The required count.</param>
            <param name="memberName"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.AssertArgumentCount(System.Int32,System.CodeDom.Compiler.CompilerErrorCollection,System.String)">
            <summary>
            Asserts the argument count.
            </summary>
            <param name="requiredCount">The required count.</param>
            <param name="errors"></param>
            <param name="memberName"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveArgumentTypes(Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Resolves the arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>An array of argument values</returns>
            <param name="errors"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveArguments(Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>An array of argument values</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveNamedArguments(Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the named arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>A dictionary of argument name to value mappings.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveNamedArgumentTypes(Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Resolves the named arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>A dictionary of argument name to value mappings.</returns>
            <param name="errors"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveArgument(System.Int32,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the argument.
            </summary>
            <param name="position">Argument position.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Resolved argument value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveArgumentType(System.Int32,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Resolves the argument type.
            </summary>
            <param name="position">Argument position.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="errors"></param>
            <returns>Resolved argument value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveNamedArgument(System.String,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Resolves the named argument.
            </summary>
            <param name="name">Argument name.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Resolved named argument value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NodeWithArguments.ResolveNamedArgumentType(System.String,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Resolves the named argument.
            </summary>
            <param name="name">Argument name.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="errors"></param>
            <returns>Resolved named argument value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException">
            <summary>
            Thrown in response to a failed attempt to write a property.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="offendingType">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="offendingProperty">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class
            summarizing what property was not writable.
            </summary>
            <param name="offendingProperty">
            The name of the property that is not writable.
            </param>
            <param name="offendingType">
            The <see cref="T:System.Type"/> in which the property is not writable.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Creates new NotWritablePropertyException with a root cause.
            </summary>
            <param name="offendingProperty">
            The name of the property that is not writable.
            </param>
            <param name="offendingType">
            The <see cref="T:System.Type"/> in which the property is not writable.
            </param>
            <param name="rootCause">
            The root cause indicating why the property was not writable.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotWritablePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ArrayUtils">
            <summary>
            Various utility methods relating to the manipulation of arrays.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ArrayUtils.HasLength(System.Collections.ICollection)">
            <summary>
            Checks if the given array or collection is null or has no elements.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ArrayUtils.AreEqual(System.Array,System.Array)">
            <summary>
            Tests equality of two single-dimensional arrays by checking each element
            for equality.
            </summary>
            <param name="a">The first array to be checked.</param>
            <param name="b">The second array to be checked.</param>
            <returns>True if arrays are the same, false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ArrayUtils.GetHashCode(System.Array)">
            <summary>
            Returns hash code for an array that is generated based on the elements.
            </summary>
            <remarks>
            Hash code returned by this method is guaranteed to be the same for
            arrays with equal elements.
            </remarks>
            <param name="array">
            Array to calculate hash code for.
            </param>
            <returns>
            A hash code for the specified array.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ArrayUtils.ToString(System.Array)">
            <summary>
            Returns string representation of an array.
            </summary>
            <param name="array">
            Array to return as a string.
            </param>
            <returns>
            String representation of the specified <paramref name="array"/>.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.CompareUtils">
            <summary>
            Utility class containing helper methods for object comparison.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.CompareUtils.Compare(System.Object,System.Object)">
            <summary>Compares two objects.</summary>
            <param name="first">First object.</param>
            <param name="second">Second object.</param>
            <returns>
            0, if objects are equal; 
            less than zero, if the first object is smaller than the second one;
            greater than zero, if the first object is greater than the second one.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.DynamicCodeManager">
            <summary>
            Use this class for obtaining <see cref="T:System.Reflection.Emit.ModuleBuilder"/> instances for dynamic code generation.
            </summary>
            <remarks>
            <p>
            The purpose of this class is to provide a simple abstraction for creating and managing dynamic assemblies. 
            </p>
            <note>
            Using this factory you can't define several modules within a single dynamic assembly - only a simple one2one relation between assembly/module is used.
            </note>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.DynamicCodeManager.#ctor">
            <summary>
            prevent instantiation
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.DynamicCodeManager.GetModuleBuilder(System.String)">
            <summary>
            Returns the <see cref="T:System.Reflection.Emit.ModuleBuilder"/> for the dynamic module within the specified assembly.
            </summary>
            <remarks>
            If the assembly does not exist yet, it will be created.<br/>
            This factory caches any dynamic assembly it creates - calling GetModule() twice with 
            the same name will *not* create 2 distinct modules!
            </remarks>
            <param name="assemblyName">The assembly-name of the module to be returned</param>
            <returns>the <see cref="T:System.Reflection.Emit.ModuleBuilder"/> that can be used to define new types within the specified assembly</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.DynamicCodeManager.SaveAssembly(System.String)">
            <summary>
            Persists the specified dynamic assembly to the file-system
            </summary>
            <param name="assemblyName">the name of the dynamic assembly to persist</param>
            <remarks>
            Can only be called in DEBUG_DYNAMIC mode, per ConditionalAttribute rules.
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException">
            <summary>
            Thrown on an unrecoverable problem encountered in the
            objects namespace or sub-namespaces, e.g. bad class or field.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException.#ctor">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException">
            <summary>
            Thrown in response to referring to an invalid property (most often via reflection).
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the InvalidPropertyException class.
            </summary>
            <param name="offendingType">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="offendingProperty">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.OffendingPropertyName">
            <summary>
            The name of the offending property.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.InvalidPropertyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException">
            <summary>
            Thrown when a method (typically a property getter or setter invoked via reflection)
            throws an exception, analogous to a <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException.ErrorCode">
            <summary>
            The error code string for this exception.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException.#ctor">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException.#ctor(System.Exception,Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs)">
            <summary>
            Constructor to use when an exception results from a
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </summary>
            <param name="ex">
            The <see cref="T:System.Exception"/> raised by the invoked property.
            </param>
            <param name="argument">
            The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that
            resulted in an exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.MethodInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException">
            <summary>
            Thrown in response to a failed attempt to read a property.
            </summary>
            <remarks>
            <p>
            Typically thrown when attempting to read the value of a write-only
            property via reflection.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NotReadablePropertyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils">
            <summary>
            Various utility methods relating to numbers.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.IsInteger(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is an integer.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> is an integer.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.IsDecimal(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is a decimal number.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> is a decimal number.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.IsNumber(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is decimal number.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            	<c>true</c> if the specified object is decimal number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.IsZero(System.Object)">
            <summary>
            Is the supplied <paramref name="number"/> equal to zero (0)?
            </summary>
            <param name="number">The number to check.</param>
            <returns>
            <see lang="true"/> id the supplied <paramref name="number"/> is equal to zero (0).
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Negate(System.Object)">
            <summary>
            Negates the supplied <paramref name="number"/>.
            </summary>
            <param name="number">The number to negate.</param>
            <returns>The supplied <paramref name="number"/> negated.</returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="number"/> is not a supported numeric type.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Add(System.Object,System.Object)">
            <summary>
            Adds the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Subtract(System.Object,System.Object)">
            <summary>
            Subtracts the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Divide(System.Object,System.Object)">
            <summary>
            Divides the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Modulus(System.Object,System.Object)">
            <summary>
            Calculates remainder for the specified numbers.
            </summary>
            <param name="m">The first number (dividend).</param>
            <param name="n">The second number (divisor).</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.Power(System.Object,System.Object)">
            <summary>
            Raises first number to the power of the second one.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.CoerceTypes(System.Object@,System.Object@)">
            <summary>
            Coerces the types so they can be compared.
            </summary>
            <param name="m">The right.</param>
            <param name="n">The left.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.NumberUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils">
            <summary>
            Helper methods with regard to objects, types, properties, etc.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.EmptyObjects">
            <summary>
            An empty object array.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.InstantiateType(System.Reflection.Assembly,System.String)">
            <summary>
            Instantiates the type using the assembly specified to load the type.
            </summary>
            <remarks>This is a convenience in the case of needing to instantiate a type but not
            wanting to specify in the string the version, culture and public key token.</remarks>
            <param name="assembly">The assembly.</param>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"> 
            If the <paramref name="assembly"/> or <paramref name="typeName"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException">
            If cannot load the type from the assembly or the call to <c>InstantiateType(Type)</c> fails.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.InstantiateType(System.Type)">
            <summary>
            Convenience method to instantiate a <see cref="T:System.Type"/> using
            its no-arg constructor.
            </summary>
            <remarks>
            <p>
            As this method doesn't try to instantiate <see cref="T:System.Type"/>s
            by name, it should avoid <see cref="T:System.Type"/> loading issues.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to instantiate*
            </param>
            <returns>A new instance of the <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException"> 
            If the <paramref name="type"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException">
            If the <paramref name="type"/> is an abstract class, an interface, 
            an open generic type or does not have a public no-argument constructor.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.InstantiateType(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Convenience method to instantiate a <see cref="T:System.Type"/> using
            the given constructor.
            </summary>
            <remarks>
            <p>
            As this method doesn't try to instantiate <see cref="T:System.Type"/>s
            by name, it should avoid <see cref="T:System.Type"/> loading issues.
            </p>
            </remarks>
            <param name="constructor">
            The constructor to use for the instantiation.
            </param>
            <param name="arguments">
            The arguments to be passed to the constructor.
            </param>
            <returns>A new instance.</returns>
            <exception cref="T:System.ArgumentNullException"> 
            If the <paramref name="constructor"/> is <see langword="null"/>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.FatalReflectionException">
            If the <paramref name="constructor"/>'s declaring type is an abstract class, 
            an interface, an open generic type or does not have a public no-argument constructor.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.IsAssignable(System.Type,System.Object)">
            <summary>
            Determine if the given <see cref="T:System.Type"/> is assignable from the
            given value, assuming setting by reflection.
            </summary>
            <remarks>
            <p>
            Considers primitive wrapper classes as assignable to the
            corresponding primitive types.
            </p>
            <p>
            For example used in an object factory's constructor resolution.
            </p>
            </remarks>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="obj">The value that should be assigned to the type.</param>
            <returns>True if the type is assignable from the value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.IsSimpleProperty(System.Type)">
            <summary>
            Check if the given <see cref="T:System.Type"/> represents a
            "simple" property,
            i.e. a primitive, a <see cref="T:System.String"/>, a
            <see cref="T:System.Type"/>, or a corresponding array.
            </summary>
            <remarks>
            <p>
            Used to determine properties to check for a "simple" dependency-check.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.IsPrimitiveArray(System.Type)">
            <summary>
            Check if the given class represents a primitive array,
            i.e. boolean, byte, char, short, int, long, float, or double.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.NullSafeEquals(System.Object,System.Object)">
            <summary>
            Determine if the given objects are equal, returning <see langword="true"/>
            if both are <see langword="null"/> respectively <see langword="false"/>
            if only one is <see langword="null"/>.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the given objects are equal.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.EnumerateFirstElement(System.Collections.IEnumerator)">
            <summary>
            Returns the first element in the supplied <paramref name="enumerator"/>.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> to use to enumerate
            elements.
            </param>
            <returns>
            The first element in the supplied <paramref name="enumerator"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the supplied <paramref name="enumerator"/> did not have any elements.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.EnumerateFirstElement(System.Collections.IEnumerable)">
            <summary>
            Returns the first element in the supplied <paramref name="enumerable"/>.
            </summary>
            <param name="enumerable">
            The <see cref="T:System.Collections.IEnumerable"/> to use to enumerate
            elements.
            </param>
            <returns>
            The first element in the supplied <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the supplied <paramref name="enumerable"/> did not have any elements.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="enumerable"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.EnumerateElementAtIndex(System.Collections.IEnumerator,System.Int32)">
            <summary>
            Returns the element at the specified index using the supplied
            <paramref name="enumerator"/>.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> to use to enumerate
            elements until the supplied <paramref name="index"/> is reached.
            </param>
            <param name="index">
            The index of the element in the enumeration to return.
            </param>
            <returns>
            The element at the specified index using the supplied
            <paramref name="enumerator"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> was less than zero, or the
            supplied <paramref name="enumerator"/> did not contain enough elements
            to be able to reach the supplied <paramref name="index"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.EnumerateElementAtIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at the specified index using the supplied
            <paramref name="enumerable"/>.
            </summary>
            <param name="enumerable">
            The <see cref="T:System.Collections.IEnumerable"/> to use to enumerate
            elements until the supplied <paramref name="index"/> is reached.
            </param>
            <param name="index">
            The index of the element in the enumeration to return.
            </param>
            <returns>
            The element at the specified index using the supplied
            <paramref name="enumerable"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> was less than zero, or the
            supplied <paramref name="enumerable"/> did not contain enough elements
            to be able to reach the supplied <paramref name="index"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="enumerable"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ObjectUtils.GetQualifiedMethodName(System.Reflection.MethodInfo)">
            <summary>
            Gets the qualified name of the given method, consisting of 
            fully qualified interface/class name + "." method name.
            </summary>
            <param name="method">The method.</param>
            <returns>qualified name of the method.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException">
            <summary>
            Superclass for exceptions related to a property access, such as a <see cref="T:System.Type"/>
            mismatch or a target invocation exception.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.PropertyChangeArgs">
            <summary>
            Returns the PropertyChangeEventArgs that resulted in the problem.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.ErrorCode">
            <summary>
            The string error code used to classify the error.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.#ctor(System.String,Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs)">
            <summary>
            Create a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="propertyChangeEvent">Describes the change attempted on the property.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.#ctor(System.String,Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs,System.Exception)">
            <summary>
            Create a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="propertyChangeEvent">Describes the change attempted on the property.</param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.#ctor">
            <summary>
            Creates a new instance of the PropertyAccessException class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs">
            <summary>
            Provides additional data for the <c>PropertyChanged</c> event.
            </summary>
            <remarks>
            <p>
            Provides some additional properties over and above the name of the
            property that has changed (which is inherited from the
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> base class).
            This allows calling code to determine whether or not a property has
            actually changed (i.e. a <c>PropertyChanged</c> event may have been
            raised, but the value itself may be equivalent).
            </p>
            </remarks>
            <seealso cref="T:System.ComponentModel.PropertyChangedEventArgs"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Create a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs"/> class.
            </summary>
            <param name="propertyName">
            The name of the property that was changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">the new value of the property.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs.OldValue">
            <summary>
            Get the old value for the property.
            </summary>
            <seealso cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs.NewValue">
            <summary>
            Get the new value of the property.
            </summary>
            <seealso cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionException">
            <summary>
            Superclass for all exceptions thrown in the Objects namespace and sub-namespaces.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionException.#ctor">
            <summary>Creates a new instance of the ObjectsException class.</summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectsException class. with the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectsException class with the specified message
            and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils">
            <summary>
            Various reflection related methods that are missing from the standard library.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.AllMembersCaseInsensitiveFlags">
            <summary>
            Convenience <see cref="T:System.Reflection.BindingFlags"/> value that will
            match all private and public, static and instance members on a class
            in a case inSenSItivE fashion.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetSignature(System.Type,System.String,System.Type[])">
            <summary>
            Returns signature for the specified <see cref="T:System.Type"/>, method name and argument
            <see cref="T:System.Type"/>s.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the method is in.</param>
            <param name="method">The method name.</param>
            <param name="argumentTypes">
            The argument <see cref="T:System.Type"/>s.
            </param>
            <returns>The method signature.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Returns method for the specified <see cref="T:System.Type"/>, method
            name and argument
            <see cref="T:System.Type"/>s.
            </summary>
            <param name="targetType">
            The target <see cref="T:System.Type"/> to find the method on.
            </param>
            <param name="method">The method to find.</param>
            <param name="argumentTypes">
            The argument <see cref="T:System.Type"/>s. May be
            <see langword="null"/> if the method has no arguments.
            </param>
            <returns>The target method.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the specified method
            or constructor.
            </summary>
            <param name="method">The method (or constructor).</param>
            <returns>An array containing the parameter <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the
            specified parameter info array.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="args"/> is <see langword="null"/> or any of the
            elements <paramref name="args"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetGenericParameterNames(System.Reflection.MethodInfo)">
            <summary>
            Returns an array of <see langword="string"/>s that represent 
            the names of the generic type parameter.
            </summary>
            <param name="method">The method.</param>
            <returns>An array containing the parameter names.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetGenericParameterNames(System.Type[])">
            <summary>
            Returns an array of <see langword="string"/>s that represent 
            the names of the generic type parameter.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter names.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="args"/> is <see langword="null"/> or any of the
            elements <paramref name="args"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetMethodByArgumentValues(System.Reflection.MethodInfo[],System.Object[])">
            <summary>
            From a given list of methods, selects the method having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methods">the list of methods to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the method matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetMethodBaseByArgumentValues(System.String,System.Reflection.MethodBase[],System.Object[])">
            <summary>
            From a given list of methods, selects the method having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methodTypeName">the type of method (used for exception reporting only)</param>
            <param name="methods">the list of methods to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the method matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetConstructorByArgumentValues(System.Reflection.ConstructorInfo[],System.Object[])">
            <summary>
            From a given list of constructors, selects the constructor having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methods">the list of constructors to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the constructor matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetConstructorByArgumentTypes(System.Reflection.ConstructorInfo[],System.Type[])">
            <summary>
            From a given list of constructors, selects the constructor having an exact match on the given <paramref name="argValues"/>' types.
            </summary>
            <param name="methods">the list of constructors to choose from</param>
            <param name="argValues">the arguments to the method</param>
            <returns>the constructor matching exactly the passed <paramref name="argValues"/>' types</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            If more than 1 matching methods are found in the <paramref name="methods"/> list.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.PackageParamArray(System.Object[],System.Int32,System.Type)">
            <summary>
            Packages arguments into argument list containing parameter array as a last argument.
            </summary>
            <param name="argValues">Argument vaklues to package.</param>
            <param name="argCount">Total number of oarameters.</param>
            <param name="elementType">Type of the param array element.</param>
            <returns>Packaged arguments.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.PackageParamTypeArray(System.Type[],System.Int32,System.Type)">
            <summary>
            Packages arguments into argument list containing parameter array as a last argument.
            </summary>
            <param name="argTypes">Argument types to package.</param>
            <param name="argCount">Total number of oarameters.</param>
            <param name="arrayType">Type of the param array element.</param>
            <returns>Packaged arguments.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.ToInterfaceArray(System.Type)">
            <summary>
            Convenience method to convert an interface <see cref="T:System.Type"/> 
            to a <see cref="T:System.Type"/> array that contains 
            all the interfaces inherited and the specified interface.
            </summary>
            <param name="intf">The interface to convert.</param>
            <returns>An array of interface <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentException">
            If the <see cref="T:System.Type"/> specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="intf"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.PropertyIsIndexer(System.String,System.Type)">
            <summary>
            Is the supplied <paramref name="propertyName"/> the default indexer for the
            supplied <paramref name="type"/>?
            </summary>
            <param name="propertyName">
            The name of the property on the supplied <paramref name="type"/> to be checked.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/>  to be checked.
            </param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="propertyName"/> is the
            default indexer for the supplied <paramref name="type"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.MethodIsOnOneOfTheseInterfaces(System.Reflection.MethodBase,System.Type[])">
            <summary>
            Is the supplied <paramref name="method"/> declared on one of these interfaces?
            </summary>
            <param name="method">The method to check.</param>
            <param name="interfaces">The array of interfaces we want to check.</param>
            <returns>
            <see lang="true"/> if the method is declared on one of these interfaces.
            </returns>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="T:System.Type"/>s specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> or any of the specified interfaces is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetDefaultValue(System.Type)">
            <summary>
            Returns the default value for the specified <see cref="T:System.Type"/>
            </summary>
            <remarks>
            <p>
            Follows the standard .NET conventions for default values where
            relevant; for example, all numeric types default to the value
            <c>0</c>.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to return default value for.
            </param>
            <returns>
            The default value for the specified <see cref="T:System.Type"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="type"/> is an enumerated type that
            has no values.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetDefaultValues(System.Type[])">
            <summary>
            Returns an array consisting of the default values for the supplied
            <paramref name="types"/>.
            </summary>
            <param name="types">
            The array of <see cref="T:System.Type"/>s to return default values for.
            </param>
            <returns>
            An array consisting of the default values for the supplied
            <paramref name="types"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If any of the elements in the supplied <paramref name="types"/>
            array is an enumerated type that has no values.
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetDefaultValue(System.Type)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.ParameterTypesMatch(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Checks that the parameter <see cref="T:System.Type"/>s of the
            supplied <paramref name="candidate"/> match the parameter
            <see cref="T:System.Type"/>s of the supplied
            <paramref name="parameterTypes"/>.
            </summary>
            <param name="candidate">The method to be checked.</param>
            <param name="parameterTypes">
            The array of parameter <see cref="T:System.Type"/>s to check against.
            </param>
            <returns>
            <see langword="true"/> if the parameter <see cref="T:System.Type"/>s
            match.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetTypes(System.Object[])">
            <summary>
            Returns an array containing the <see cref="T:System.Type"/>s of the
            objects in the supplied array.
            </summary>
            <param name="args">
            The objects array for which the corresponding <see cref="T:System.Type"/>s
            are needed.
            </param>
            <returns>
            An array containing the <see cref="T:System.Type"/>s of the objects
            in the supplied array; this array will be empty (but not
            <see langword="null"/> if the supplied <paramref name="args"/>
            is null or has no elements.
            </returns>
            <example>
            <p>
            [C#]<br/>
            Given an array containing the following objects,
            <c>[83, "Foo", new object ()]</c>, the <see cref="T:System.Type"/>
            array returned from this method call would consist of the following
            <see cref="T:System.Type"/> elements...
            <c>[Int32, String, Object]</c>.
            </p>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.HasAtLeastOneMethodWithName(System.Type,System.String)">
            <summary>
            Does the given <see cref="T:System.Type"/> and/or it's superclasses
            have at least one or more methods with the given name (with any
            argument types)?
            </summary>
            <remarks>
            <p>
            Includes non-public methods in the methods searched.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to be checked.
            </param>
            <param name="name">
            The name of the method to be searched for. Case inSenSItivE.
            </param>
            <returns>
            <see langword="true"/> if the given <see cref="T:System.Type"/> or / and it's
            superclasses have at least one or more methods (with any argument types);
            <see langword="false"/> if not, or either of the parameters is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.MethodCountForName(System.Type,System.String)">
            <summary>
             Within <paramref name="type"/>, counts the number of overloads for the method with the given (case-insensitive!) <paramref name="name"/> 
            </summary>
            <param name="type">The type to be searched</param>
            <param name="name">the name of the method for which overloads shall be counted</param>
            <returns>The number of overloads for method <paramref name="name"/> within type <paramref name="type"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.CreateCustomAttribute(System.Type,System.Object[],System.Attribute)">
            <summary>
            Creates a custom <see cref="T:System.Attribute"/>.
            </summary>
            <remarks>
            <p>
            Note that if a non-<see langword="null"/> <paramref name="sourceAttribute"/>
            is supplied, any read write properties exposed by the <paramref name="sourceAttribute"/>
            will be used to overwrite values that may have been passed in via the
            <paramref name="ctorArgs"/>. That is, the <paramref name="ctorArgs"/> will be used
            to initialize the custom attribute, and then any read-write properties on the
            <paramref name="sourceAttribute"/> will be plugged in.
            </p>
            </remarks>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <param name="ctorArgs">
            Any constructor arguments for the attribute (may be <see langword="null"/>
            in the case of no arguments).
            </param>
            <param name="sourceAttribute">
            Source attribute to copy properties from (may be <see langword="null"/>).
            </param>
            <returns>A custom attribute builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="type"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="type"/> parameter is not a <see cref="T:System.Type"/>
            that derives from the <see cref="T:System.Attribute"/> class.
            </exception>
            <seealso cref="T:System.Reflection.Emit.CustomAttributeBuilder"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.CreateCustomAttribute(System.Type,System.Attribute)">
            <summary>
            Creates a custom <see cref="T:System.Attribute"/>.
            </summary>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <param name="sourceAttribute">
            Source attribute to copy properties from (may be <see langword="null"/>).
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.CreateCustomAttribute(System.Attribute)">
            <summary>
            Creates a custom <see cref="T:System.Attribute"/>.
            </summary>
            <param name="sourceAttribute">
            The source attribute to copy properties from.
            </param>
            <returns>A custom attribute builder.</returns>
            <exception cref="T:System.NullReferenceException">
            If the supplied <paramref name="sourceAttribute"/> is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.CreateCustomAttribute(System.Type)">
            <summary>
            Creates a custom <see cref="T:System.Attribute"/>.
            </summary>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.CreateCustomAttribute(System.Type,System.Object[])">
            <summary>
            Creates a custom <see cref="T:System.Attribute"/>.
            </summary>
            <param name="type">
            The desired <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.
            </param>
            <param name="ctorArgs">
            Any constructor arguments for the attribute (may be <see langword="null"/>
            in the case of no arguments).
            </param>
            <returns>A custom attribute builder.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetMatchingMethods(System.Type,System.Reflection.MethodInfo[],System.Boolean)">
            <summary>
            Tries to find matching methods in the specified <see cref="T:System.Type"/>
            for each method in the supplied <paramref name="methods"/> list.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to look for matching methods in.
            </param>
            <param name="methods">The methods to match.</param>
            <param name="strict">
            A flag that specifies whether to throw an exception if a matching
            method is not found.
            </param>
            <returns>A list of the matched methods.</returns>
            <exception cref="T:System.ArgumentNullException">
            If either of the <paramref name="type"/> or
            <paramref name="methods"/> parameters are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.TypeOfOrType(System.Object)">
            <summary>
            Returns the <see cref="T:System.Type"/> of the supplied
            <paramref name="source"/>.
            </summary>
            <remarks>
            <p>
            If the <paramref name="source"/> is a <see cref="T:System.Type"/>
            instance, the return value of this method call with be the
            <paramref name="source"/> parameter cast to a
            <see cref="T:System.Type"/>. If the <paramref name="source"/> is
            anything other than a <see cref="T:System.Type"/>, the return value
            will be the result of invoking the <paramref name="source"/>'s
            <see cref="M:System.Object.GetType"/> method.
            </p>
            </remarks>
            <param name="source">
            A <see cref="T:System.Type"/> or <see cref="T:System.Object"/> instance.
            </param>
            <returns>
            The <paramref name="source"/>argument if it is a
            <see cref="T:System.Type"/> or the result of invoking
            <see cref="M:System.Object.GetType"/> on the argument if it
            is an <see cref="T:System.Object"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            If the <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.UnwrapTargetInvocationException(System.Reflection.TargetInvocationException)">
            <summary>
            Unwraps the supplied <see cref="T:System.Reflection.TargetInvocationException"/> 
            and returns the inner exception preserving the stack trace.
            </summary>
            <param name="ex">
            The <see cref="T:System.Reflection.TargetInvocationException"/> to unwrap.
            </param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.IsTypeVisible(System.Type)">
            <summary>
            Is the supplied <paramref name="type"/> can be accessed outside the assembly ?
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <see langword="true"/> if the type can be accessed outside the assembly;
            Otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.IsTypeVisible(System.Type,System.String)">
            <summary>
            Is the supplied <paramref name="type"/> can be accessed 
            from the supplied friendly assembly ?
            </summary>
            <param name="type">The type to check.</param>
            <param name="friendlyAssemblyName">The friendly assembly name.</param>
            <returns>
            <see langword="true"/> if the type can be accessed 
            from the supplied friendly assembly; Otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.GetExplicitBaseException(System.Exception)">
            <summary>
            Returns the explicit <see cref="T:System.Exception"/> that is the root cause of an exception.
            </summary>
            <remarks>
            If the InnerException property of the current exception is a null reference 
            or a <see cref="T:System.NullReferenceException"/>, returns the current exception.
            </remarks>
            <param name="ex">The last exception thrown.</param>
            <returns>
            The first explicit exception thrown in a chain of exceptions.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.ReflectionUtils.MemberwiseCopy(System.Object,System.Object)">
            <summary>
            Copies all fields from one object to another. 
            </summary>
            <remarks>
            The types of both objects must be related. This means, that either of the following is true:
            <list type="bullet">
            	<item><description>fromObject.GetType() == toObject.GetType()</description></item>
            	<item><description>fromObject.GetType() is derived from toObject.GetType()</description></item>
            	<item><description>toObject.GetType() is derived from fromObject.GetType()</description></item>
            </list>
            </remarks>
            <param name="fromObject">The source object</param>
            <param name="toObject">The object, who's fields will be populated with values from the source object</param>
            <exception cref="T:System.ArgumentException">If the object's types are not related</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils">
            <summary>
            Miscellaneous <see cref="T:System.String"/> utility methods.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.EmptyStrings">
            <summary>
            An empty array of <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.AntExpressionPrefix">
            <summary>
            The string that signals the start of an Ant-style expression.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.AntExpressionSuffix">
            <summary>
            The string that signals the end of an Ant-style expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.Split(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Tokenize the given <see cref="T:System.String"/> into a
            <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            If <paramref name="s"/> is <see langword="null"/>, returns an empty
            <see cref="T:System.String"/> array.
            </p>
            <p>
            If <paramref name="delimiters"/> is <see langword="null"/> or the empty
            <see cref="T:System.String"/>, returns a <see cref="T:System.String"/> array with one
            element: <paramref name="s"/> itself.
            </p>
            </remarks>
            <param name="s">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="delimiters">
            The delimiter characters, assembled as a <see cref="T:System.String"/>.
            </param>
            <param name="trimTokens">
            Trim the tokens via <see cref="M:System.String.Trim"/>.
            </param>
            <param name="ignoreEmptyTokens">
            Omit empty tokens from the result array.</param>
            <returns>An array of the tokens.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.CommaDelimitedListToStringArray(System.String)">
            <summary>
            Convert a CSV list into an array of <see cref="T:System.String"/>s.
            </summary>
            <param name="s">A CSV list.</param>
            <returns>
            An array of <see cref="T:System.String"/>s, or the empty array
            if <paramref name="s"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.DelimitedListToStringArray(System.String,System.String)">
            <summary>
            Take a <see cref="T:System.String"/> which is a delimited list
            and convert it to a <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="delimiter"/> is a
            <cref lang="null"/> or zero-length string, then a single element
            <see cref="T:System.String"/> array composed of the supplied
            <paramref name="input"/> <see cref="T:System.String"/> will be 
            eturned. If the supplied <paramref name="input"/>
            <see cref="T:System.String"/> is <cref lang="null"/>, then an empty,
            zero-length <see cref="T:System.String"/> array will be returned.
            </p>
            </remarks>
            <param name="input">
            The <see cref="T:System.String"/> to be parsed.
            </param>
            <param name="delimiter">
            The delimeter (this will not be returned). Note that only the first
            character of the supplied <paramref name="delimiter"/> is used.
            </param>
            <returns>
            An array of the tokens in the list.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.CollectionToDelimitedString(System.Collections.ICollection,System.String)">
            <summary>
            Convenience method to return an
            <see cref="T:System.Collections.ICollection"/> as a delimited
            (e.g. CSV) <see cref="T:System.String"/>.
            </summary>
            <param name="c">
            The <see cref="T:System.Collections.ICollection"/> to parse.
            </param>
            <param name="delimiter">
            The delimiter to use (probably a ',').
            </param>
            <returns>The delimited string representation.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.CollectionToCommaDelimitedString(System.Collections.ICollection)">
            <summary>
            Convenience method to return an
            <see cref="T:System.Collections.ICollection"/> as a CSV
            <see cref="T:System.String"/>.
            </summary>
            <param name="collection">
            The <see cref="T:System.Collections.ICollection"/> to display.
            </param>
            <returns>The delimited string representation.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.ArrayToCommaDelimitedString(System.Object[])">
            <summary>
            Convenience method to return an array as a CSV
            <see cref="T:System.String"/>.
            </summary>
            <param name="source">
            The array to parse. Elements may be of any type (
            <see cref="M:System.Object.ToString"/> will be called on each
            element).
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.ArrayToDelimitedString(System.Object[],System.String)">
            <summary>
            Convenience method to return a <see cref="T:System.String"/>
            array as a delimited (e.g. CSV) <see cref="T:System.String"/>.
            </summary>
            <param name="source">
            The array to parse. Elements may be of any type (
            <see cref="M:System.Object.ToString"/> will be called on each
            element).
            </param>
            <param name="delimiter">
            The delimiter to use (probably a ',').
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.HasLength(System.String)">
            <summary>Checks if a string has length.</summary>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the string has length and is not
            <see langword="null"/>.
            </returns>
            <example>
            <code lang="C#">
            StringUtils.HasLength(null) = false
            StringUtils.HasLength("") = false
            StringUtils.HasLength(" ") = true
            StringUtils.HasLength("Hello") = true
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.HasText(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> has text.
            </summary>
            <remarks>
            <p>
            More specifically, returns <see langword="true"/> if the string is
            not <see langword="null"/>, it's <see cref="P:System.String.Length"/> is >
            zero <c>(0)</c>, and it has at least one non-whitespace character.
            </p>
            </remarks>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="target"/> is not
            <see langword="null"/>,
            <see cref="P:System.String.Length"/> > zero <c>(0)</c>, and does not consist
            solely of whitespace.
            </returns>
            <example>
            <code language="C#">
            StringUtils.HasText(null) = false
            StringUtils.HasText("") = false
            StringUtils.HasText(" ") = false
            StringUtils.HasText("12345") = true
            StringUtils.HasText(" 12345 ") = true
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.IsNullOrEmpty(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> is <see langword="null"/>
            or an empty string.
            </summary>
            <remarks>
            <p>
            More specifically, returns <see langword="false"/> if the string is
            <see langword="null"/>, it's <see cref="P:System.String.Length"/> is equal
            to zero <c>(0)</c>, or it is composed entirely of whitespace
            characters.
            </p>
            </remarks>
            <param name="target">
            The string to check, may (obviously) be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="target"/> is
            <see langword="null"/>, has a length equal to zero <c>(0)</c>, or
            is composed entirely of whitespace characters.
            </returns>
            <example>
            <code language="C#">
            StringUtils.IsNullOrEmpty(null) = true
            StringUtils.IsNullOrEmpty("") = true
            StringUtils.IsNullOrEmpty(" ") = true
            StringUtils.IsNullOrEmpty("12345") = false
            StringUtils.IsNullOrEmpty(" 12345 ") = false
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.StripFirstAndLastCharacter(System.String)">
            <summary>
            Strips first and last character off the string.
            </summary>
            <param name="text">The string to strip.</param>
            <returns>The stripped string.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.Surround(System.Object,System.Object)">
            <summary>
            Surrounds (prepends and appends) the string value of the supplied
            <paramref name="fix"/> to the supplied <paramref name="target"/>.
            </summary>
            <remarks>
            <p>
            The return value of this method call is always guaranteed to be non
            <see langword="null"/>. If every value passed as a parameter to this method is
            <see langword="null"/>, the <see cref="F:System.String.Empty"/> string will be returned.
            </p>
            </remarks>
            <param name="fix">
            The pre<b>fix</b> and suf<b>fix</b> that respectively will be prepended and
            appended to the target <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="target">
            The target that is to be surrounded. If this value is not a
            <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <returns>The surrounded string.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.Surround(System.Object,System.Object,System.Object)">
            <summary>
            Surrounds (prepends and appends) the string values of the supplied
            <paramref name="prefix"/> and <paramref name="suffix"/> to the supplied
            <paramref name="target"/>.
            </summary>
            <remarks>
            <p>
            The return value of this method call is always guaranteed to be non
            <see langword="null"/>. If every value passed as a parameter to this method is
            <see langword="null"/>, the <see cref="F:System.String.Empty"/> string will be returned.
            </p>
            </remarks>
            <param name="prefix">
            The value that will be prepended to the <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="target">
            The target that is to be surrounded. If this value is not a
            <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="suffix">
            The value that will be appended to the <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <returns>The surrounded string.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.StringUtils.ConvertEscapedCharacters(System.String)">
            <summary>
            Converts escaped characters (for example "\t") within a string
            to their real character.
            </summary>
            <param name="inputString">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.CustomNumberConverter">
            <summary>
            A custom <see cref="T:System.ComponentModel.TypeConverter"/> for any
            primitive numeric type such as <see cref="T:System.Int32"/>,
            <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, etc.
            </summary>
            <remarks>
            <p>
            Can use a given <see cref="T:System.Globalization.NumberFormatInfo"/> for
            (locale-specific) parsing and rendering.
            </p>
            <p>
            This is not meant to be used as a system
            <see cref="T:System.ComponentModel.TypeConverter"/> but rather as a
            locale-specific number converter within custom controller code, to
            parse user-entered number strings into number properties of objects,
            and render them in a UI form.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.CustomNumberConverter.#ctor(System.Type,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.CustomNumberConverter"/>
            class.
            </summary>
            <param name="type">
            The primitive numeric <see cref="T:System.Type"/> to convert to.
            </param>
            <param name="format">
            The <see cref="T:System.Globalization.NumberFormatInfo"/> to use for
            (locale-specific) parsing and rendering
            </param>
            <param name="allowEmpty">
            Is an empty string allowed to be converted? If
            <see langword="true"/>, an empty string value will be converted to
            numeric 0.</param>
            <exception cref="T:System.ArgumentException">
            Id the supplied <paramref name="type"/> is not a primitive
            <see cref="T:System.Type"/>.
            </exception>
            <seealso cref="P:System.Type.IsPrimitive"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.CustomNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>
            <see langword="true"/> if the conversion is possible.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.CustomNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object (a string) to the required primitive
            type.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="val">
            The value that is to be converted.
            </param>
            <returns>A primitive representation of the string value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.FileInfoConverter">
            <summary>
            Converter for <see cref="T:System.IO.FileInfo"/> instances.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.FileInfoConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.FileInfoConverter"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.FileInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.FileInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.IO.FileInfo"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.IO.FileInfo"/> if successful. 
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.NameValueConverter">
            <summary>
            Custom <see cref="T:System.ComponentModel.TypeConverter"/> implementation for
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.NameValueConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.NameValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.NameValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from an
            <b>XML formatted</b> <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.NameValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            if successful. 
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RegexConverter">
            <summary>
            Converts string representation of a regular expression into an instance of <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RegexConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from the sourcetype to a <see cref="T:System.Text.RegularExpressions.Regex"/>?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns><see langword="true"/> if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RegexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a <see cref="T:System.String"/> value to an
            <see cref="T:System.Text.RegularExpressions.Regex"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture.
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Text.RegularExpressions.Regex"/> if successful.
            </returns>        
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.ResourceManagerConverter">
            <summary>
            Converts a two part string, (resource name, assembly name)
            to a ResourceManager instance.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.ResourceManagerConverter.APP_GLOBALRESOURCES_ASSEMBLYNAME">
            <summary>
            This constant represents the name of the folder/assembly containing global resources.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.ResourceManagerConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.ResourceManagerConverter"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.ResourceManagerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a
            <see cref="T:System.Resources.ResourceManager"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.ResourceManagerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:System.Resources.ResourceManager"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Resources.ResourceManager"/>
            if successful. 
            </returns>
            <exception cref="T:System.ArgumentException">If the specified <paramref name="value"/> does not denote a valid resource</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter">
            <summary>
            A custom <see cref="T:System.ComponentModel.TypeConverter"/> for
            runtime type references.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion to and from a
            <see cref="T:System.String"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to the <see cref="T:System.Type"/>
            of this converter.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified
            <see cref="T:System.Type"/>.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert to.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.RuntimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the
            <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TimeSpanConverter">
            <summary>
            Converter for <see cref="T:System.TimeSpan"/> instances.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TimeSpanConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TimeSpanConverter"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.TimeSpan"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.TimeSpan"/> if successful. 
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConversionUtils">
            <summary>
            Utility methods that are used to convert objects from one type into another.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConversionUtils.ConvertValueIfNecessary(System.Type,System.Object,System.String)">
            <summary>
            Convert the value to the required <see cref="T:System.Type"/> (if necessary from a string).
            </summary>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we must convert to.
            </param>
            <param name="propertyName">Property name, used for error reporting purposes...</param>
            <returns>The new value, possibly the result of type conversion.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConversionUtils.CreatePropertyChangeEventArgs(System.String,System.Object,System.Object)">
            <summary>
            Utility method to create a property change event.
            </summary>
            <param name="fullPropertyName">
            The full name of the property that has changed.
            </param>
            <param name="oldValue">The property old value</param>
            <param name="newValue">The property new value</param>
            <returns>
            A new <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs"/>.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConverterRegistry">
            <summary>
            Registry class that allows users to register and retrieve type converters.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConverterRegistry.#cctor">
            <summary>
            Registers standard and configured type converters.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConverterRegistry.GetConverter(System.Type)">
            <summary>
            Returns <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type.
            </summary>
            <param name="type">Type to get the converter for.</param>
            <returns>a type converter for the specified type.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConverterRegistry.RegisterConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Registers <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type.
            </summary>
            <param name="type">Type to register the converter for.</param>
            <param name="converter">Type converter to register.</param>
            <exception cref="T:System.ArgumentNullException">If either of arguments is <c>null</c>.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConverterRegistry.RegisterConverter(System.String,System.String)">
            <summary>
            Registers <see cref="T:System.ComponentModel.TypeConverter"/> for the specified type.
            </summary>
            <remarks>
            This is a convinience method that accepts the names of both
            type to register converter for and the converter itself,
            resolves them using <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry"/>, creates an
            instance of type converter and calls overloaded
            <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.TypeConverterRegistry.RegisterConverter(System.Type,System.ComponentModel.TypeConverter)"/> method.
            </remarks>
            <param name="typeName">Type name of the type to register the converter for (can be a type alias).</param>
            <param name="converterTypeName">Type name of the type converter to register (can be a type alias).</param>
            <exception cref="T:System.ArgumentNullException">If either of arguments is <c>null</c> or empty string.</exception>
            <exception cref="T:System.TypeLoadException">
            If either of arguments fails to resolve to a valid <see cref="T:System.Type"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If type converter does not derive from <see cref="T:System.ComponentModel.TypeConverter"/> or if it cannot be instantiated.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.UriConverter">
            <summary>
            Converter for <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.UriConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.UriConverter"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.UriConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.Uri"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeConversion.UriConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> if successful. 
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException">
            <summary>
            Exception thrown on a <see cref="T:System.Type"/> mismatch when trying to set a property
            or resolve an argument to a method invocation.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.ErrorCode">
            <summary>
            The string error code used to classify the exception.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.#ctor">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.#ctor(Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs,System.Type)">
            <summary>
            Creates a new instance of the TypeMismatchException class describing the
            property and required type that could not used to set a property on the target object.
            </summary>
            <param name="propertyChangeEventArgs">
            The description of the property that was to be changed.
            </param>
            <param name="requiredType">The target conversion type.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.#ctor(Novalys.VisualGuard.Security.Scripting.Expressions.Util.PropertyChangeEventArgs,System.Type,System.Exception)">
            <summary>
            Creates a new instance of the TypeMismatchException class describing the
            property, required type, and underlying exception that could not be used
            to set a property on the target object.
            </summary>
            <param name="propertyChangeEventArgs">
            The description of the property that was to be changed.
            </param>
            <param name="requiredType">The target conversion type.</param>
            <param name="rootCause">The underlying exception.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.CachedTypeResolver">
            <summary>
            Resolves (instantiates) a <see cref="T:System.Type"/> by it's (possibly
            assembly qualified) name, and caches the <see cref="T:System.Type"/>
            instance against the type name.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.CachedTypeResolver.typeCache">
            <summary>
            The cache, mapping type names (<see cref="T:System.String"/> instances) against
            <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.CachedTypeResolver.#ctor(Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.ITypeResolver)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.CachedTypeResolver"/> class.
            </summary>
            <param name="typeResolver">
            The <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.ITypeResolver"/> that this instance will delegate
            actual <see cref="T:System.Type"/> resolution to if a <see cref="T:System.Type"/>
            cannot be found in this instance's <see cref="T:System.Type"/> cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="typeResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.CachedTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder">
            <summary>
            Holder for the generic arguments when using type parameters.
            </summary>
            <remarks>
            <p>
            Type parameters can be applied to classes, interfaces, 
            structures, methods, delegates, etc...
            </p>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.GenericArgumentsPrefix">
            <summary>
            The generic arguments prefix.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.GenericArgumentsSuffix">
            <summary>
            The generic arguments suffix.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.GenericArgumentsSeparator">
            <summary>
            The character that separates a list of generic arguments.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.#ctor(System.String)">
            <summary>
            Creates a new instance of the GenericArgumentsHolder class.
            </summary>
            <param name="value">
            The string value to parse looking for a generic definition
            and retrieving its generic arguments.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.GenericTypeName">
            <summary>
            The (unresolved) generic type name portion 
            of the original value when parsing a generic type.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.GenericMethodName">
            <summary>
            The (unresolved) generic method name portion 
            of the original value when parsing a generic method.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.ContainsGenericArguments">
            <summary>
            Is the string value contains generic arguments ?
            </summary>
            <remarks>
            <p>
            A generic argument can be a type parameter or a type argument.
            </p>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.IsGenericDefinition">
            <summary>
            Is generic arguments only contains type parameters ?
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericArgumentsHolder.GetGenericArguments">
            <summary>
            Returns an array of unresolved generic arguments types.
            </summary>
            <remarks>
            <p>
            A empty string represents a type parameter that 
            did not have been substituted by a specific type.
            </p>
            </remarks>
            <returns>
            An array of strings that represents the unresolved generic 
            arguments types or an empty array if not generic.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericTypeResolver">
            <summary>
            Resolves a generic <see cref="T:System.Type"/> by name.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.GenericTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied generic <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved (possibly generic) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.ITypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this interface is to centralise
            the resolution of type names to <see cref="T:System.Type"/> instances
            beyond that offered by the plain vanilla
            <see cref="M:System.Type.GetType(System.String)"/> method call.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.ITypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder.TypeAssemblySeparator">
            <summary>
            The string that separates a <see cref="T:System.Type"/> name
            from the name of it's attendant <see cref="T:System.Reflection.Assembly"/>
            in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeAssemblyHolder class.
            </summary>
            <param name="unresolvedTypeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry">
            <summary> 
            Provides access to a central registry of aliased <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <p>
            Simplifies configuration by allowing aliases to be used instead of
            fully qualified type names.
            </p>
            <p>
            Comes 'pre-loaded' with a number of convenience alias' for the more
            common types; an example would be the '<c>int</c>' (or '<c>Integer</c>'
            for Visual Basic.NET developers) alias for the <see cref="T:System.Int32"/>
            type.
            </p>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int32Alias">
            <summary>
            The alias around the 'int' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int32AliasVB">
            <summary>
            The alias around the 'Integer' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int32ArrayAlias">
            <summary>
            The alias around the 'int[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int32ArrayAliasVB">
            <summary>
            The alias around the 'Integer()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DecimalAlias">
            <summary>
            The alias around the 'decimal' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DecimalAliasVB">
            <summary>
            The alias around the 'Decimal' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DecimalArrayAlias">
            <summary>
            The alias around the 'decimal[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DecimalArrayAliasVB">
            <summary>
            The alias around the 'Decimal()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.CharAlias">
            <summary>
            The alias around the 'char' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.CharAliasVB">
            <summary>
            The alias around the 'Char' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.CharArrayAlias">
            <summary>
            The alias around the 'char[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.CharArrayAliasVB">
            <summary>
            The alias around the 'Char()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int64Alias">
            <summary>
            The alias around the 'long' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int64AliasVB">
            <summary>
            The alias around the 'Long' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int64ArrayAlias">
            <summary>
            The alias around the 'long[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int64ArrayAliasVB">
            <summary>
            The alias around the 'Long()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int16Alias">
            <summary>
            The alias around the 'short' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int16AliasVB">
            <summary>
            The alias around the 'Short' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int16ArrayAlias">
            <summary>
            The alias around the 'short[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.Int16ArrayAliasVB">
            <summary>
            The alias around the 'Short()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.UInt32Alias">
            <summary>
            The alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.UInt64Alias">
            <summary>
            The alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.UInt64ArrayAlias">
            <summary>
            The alias around the 'ulong[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.UInt32ArrayAlias">
            <summary>
            The alias around the 'uint[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.UInt16Alias">
            <summary>
            The alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.UInt16ArrayAlias">
            <summary>
            The alias around the 'ushort[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DoubleAlias">
            <summary>
            The alias around the 'double' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DoubleAliasVB">
            <summary>
            The alias around the 'Double' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DoubleArrayAlias">
            <summary>
            The alias around the 'double[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DoubleArrayAliasVB">
            <summary>
            The alias around the 'Double()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.FloatAlias">
            <summary>
            The alias around the 'float' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.SingleAlias">
            <summary>
            The alias around the 'Single' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.FloatArrayAlias">
            <summary>
            The alias around the 'float[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.SingleArrayAliasVB">
            <summary>
            The alias around the 'Single()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DateTimeAlias">
            <summary>
            The alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DateAlias">
            <summary>
            The alias around the 'DateTime' type (C# style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DateAliasVB">
            <summary>
            The alias around the 'DateTime' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DateTimeArrayAlias">
            <summary>
            The alias around the 'DateTime[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DateTimeArrayAliasCSharp">
            <summary>
            The alias around the 'DateTime[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.DateTimeArrayAliasVB">
            <summary>
            The alias around the 'DateTime()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.BoolAlias">
            <summary>
            The alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.BoolAliasVB">
            <summary>
            The alias around the 'Boolean' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.BoolArrayAlias">
            <summary>
            The alias around the 'bool[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.BoolArrayAliasVB">
            <summary>
            The alias around the 'Boolean()' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.StringAlias">
            <summary>
            The alias around the 'string' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.StringAliasVB">
            <summary>
            The alias around the 'string' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.StringArrayAlias">
            <summary>
            The alias around the 'string[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.StringArrayAliasVB">
            <summary>
            The alias around the 'string[]' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.ObjectAlias">
            <summary>
            The alias around the 'object' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.ObjectAliasVB">
            <summary>
            The alias around the 'object' type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.ObjectArrayAlias">
            <summary>
            The alias around the 'object[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.ObjectArrayAliasVB">
            <summary>
            The alias around the 'object[]' array type (Visual Basic.NET style).
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableInt32Alias">
            <summary>
            The alias around the 'int?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableInt32ArrayAlias">
            <summary>
            The alias around the 'int?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableDecimalAlias">
            <summary>
            The alias around the 'decimal?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableDecimalArrayAlias">
            <summary>
            The alias around the 'decimal?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableCharAlias">
            <summary>
            The alias around the 'char?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableCharArrayAlias">
            <summary>
            The alias around the 'char?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableInt64Alias">
            <summary>
            The alias around the 'long?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableInt64ArrayAlias">
            <summary>
            The alias around the 'long?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableInt16Alias">
            <summary>
            The alias around the 'short?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableInt16ArrayAlias">
            <summary>
            The alias around the 'short?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableUInt32Alias">
            <summary>
            The alias around the 'unsigned int?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableUInt64Alias">
            <summary>
            The alias around the 'unsigned long?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableUInt64ArrayAlias">
            <summary>
            The alias around the 'ulong?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableUInt32ArrayAlias">
            <summary>
            The alias around the 'uint?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableUInt16Alias">
            <summary>
            The alias around the 'unsigned short?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableUInt16ArrayAlias">
            <summary>
            The alias around the 'ushort?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableDoubleAlias">
            <summary>
            The alias around the 'double?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableDoubleArrayAlias">
            <summary>
            The alias around the 'double?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableFloatAlias">
            <summary>
            The alias around the 'float?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableFloatArrayAlias">
            <summary>
            The alias around the 'float?[]' array type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableBoolAlias">
            <summary>
            The alias around the 'bool?' type.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.NullableBoolArrayAlias">
            <summary>
            The alias around the 'bool?[]' array type.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.#cctor">
            <summary>
            Registers standard and user-configured type aliases.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.RegisterType(System.String,System.String)">
            <summary> 
            Registers an alias for the specified <see cref="T:System.Type"/>. 
            </summary>
            <remarks>
            <p>
            This overload does eager resolution of the <see cref="T:System.Type"/>
            referred to by the <paramref name="typeName"/> parameter. It will throw a
            <see cref="T:System.TypeLoadException"/> if the <see cref="T:System.Type"/> referred
            to by the <paramref name="typeName"/> parameter cannot be resolved.
            </p>
            </remarks>
            <param name="alias">
            A string that will be used as an alias for the specified
            <see cref="T:System.Type"/>.
            </param>
            <param name="typeName">
            The (possibly partially assembly qualified) name of the
            <see cref="T:System.Type"/> to register the alias for.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If either of the supplied parameters is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
            <exception cref="T:System.TypeLoadException">
            If the <see cref="T:System.Type"/> referred to by the supplied
            <paramref name="typeName"/> cannot be loaded.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.RegisterType(System.Type)">
            <summary> 
            Registers short type name as an alias for 
            the supplied <see cref="T:System.Type"/>. 
            </summary> 
            <param name="type">
            The <see cref="T:System.Type"/> to register.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.RegisterType(System.String,System.Type)">
            <summary> 
            Registers an alias for the supplied <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias for the supplied <see cref="T:System.Type"/>.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> to register the supplied <paramref name="alias"/> under.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="type"/> is <see langword="null"/>; or if
            the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.ResolveType(System.String)">
            <summary> 
            Resolves the supplied <paramref name="alias"/> to a <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias to resolve.
            </param>
            <returns>
            The <see cref="T:System.Type"/> the supplied <paramref name="alias"/> was
            associated with, or <see lang="null"/> if no <see cref="T:System.Type"/> 
            was previously registered for the supplied <paramref name="alias"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeRegistry.ContainsAlias(System.String)">
            <summary>
            Returns a flag specifying whether <b>TypeRegistry</b> contains
            specified alias or not.
            </summary>
            <param name="alias">
            Alias to check.
            </param>
            <returns>
            <c>true</c> if the specified type alias is registered, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolutionUtils">
            <summary>
            Helper methods with regard to type resolution.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolutionUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolutionUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolutionUtils.ResolveType(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <remarks>
            <p>
            If you require special <see cref="T:System.Type"/> resolution, do
            <b>not</b> use this method, but rather instantiate
            your own <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver"/>.
            </p>
            </remarks>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolutionUtils.ResolveInterfaceArray(System.String[])">
            <summary>
            Resolves a string array of interface names to
            a <see cref="T:System.Type"/> array.
            </summary>
            <param name="interfaceNames">
            An array of valid interface names. Each name must include the full
            interface and assembly name.
            </param>
            <returns>An array of interface <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.TypeLoadException">
            If any of the interfaces can't be loaded.
            </exception>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="T:System.Type"/>s specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="interfaceNames"/> (or any of its elements ) is
            <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved (possibly partially assembly qualified) name 
            of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver.LoadTypeDirectlyFromAssembly(Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder)">
            <summary>
            Uses <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            to load an <see cref="T:System.Reflection.Assembly"/> and then the attendant
            <see cref="T:System.Type"/> referred to by the <paramref name="typeInfo"/>
            parameter.
            </summary>
            <remarks>
            <p>
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> is
            deprecated in .NET 2.0, but is still used here (even when this class is
            compiled for .NET 2.0);
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> will
            still resolve (non-.NET Framework) local assemblies when given only the
            display name of an assembly (the behaviour for .NET Framework assemblies
            and strongly named assemblies is documented in the docs for the
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> method).
            </p>
            </remarks>
            <param name="typeInfo">
            The assembly and type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
            <exception cref="T:System.Exception">
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver.LoadTypeByIteratingOverAllLoadedAssemblies(Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeAssemblyHolder)">
            <summary>
            Uses <see cref="M:System.AppDomain.CurrentDomain.GetAssemblies()"/>
            to load the attendant <see cref="T:System.Type"/> referred to by 
            the <paramref name="typeInfo"/> parameter.
            </summary>
            <param name="typeInfo">
            The type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver.BuildTypeLoadException(System.String)">
            <summary>
            Creates a new <see cref="T:System.TypeLoadException"/> instance 
            from the given <paramref name="typeName"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Util.TypeResolution.TypeResolver.BuildTypeLoadException(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:System.TypeLoadException"/> instance
            from the given <paramref name="typeName"/> with the given inner <see cref="T:System.Exception"/> 
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullLiteralNode">
            <summary>
            Represents parsed null literal node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the null literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException">
            <summary>
            Thrown in response to encountering a <see langword="null"/> value
            when traversing a nested path expression.
            </summary>
            <version>$Id: NullValueInNestedPathException.cs,v 1.2 2007/07/31 03:47:22 markpollack Exp $</version>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.PropertyName">
            <summary>
            The name of the offending property.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of the class where the property was last looked for.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException"/> class.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object where the property was not found.
            </param>
            <param name="theProperty">The name of the property not found.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object where the property was not found.
            </param>
            <param name="theProperty">The name of the property not found.</param>
            <param name="message">A message about the exception.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.NullValueInNestedPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpADD">
            <summary>
            Represents arithmetic addition operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpADD.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpADD.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpADD.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic addition operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpAND">
            <summary>
            Represents logical AND operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpAND.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpAND.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpAND.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical AND operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpBetween">
            <summary>
            Represents logical BETWEEN operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpBetween.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpBetween.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpBetween.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical IN operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand is contained within the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpDIVIDE">
            <summary>
            Represents arithmetic division operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpDIVIDE.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpDIVIDE.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpDIVIDE.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic division operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpEqual">
            <summary>
            Represents logical equality operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpEqual.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical equality operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreater">
            <summary>
            Represents logical "greater than" operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreater.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreater.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreater.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "greater than" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreaterOrEqual">
            <summary>
            Represents logical "greater than or equal" operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreaterOrEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreaterOrEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpGreaterOrEqual.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "greater than or equal" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpIn">
            <summary>
            Represents logical IN operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpIn.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpIn.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpIn.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical IN operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand is contained within the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpIs">
            <summary>
            Represents logical IS operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpIs.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpIs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpIs.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical IS operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand is contained within the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpLess">
            <summary>
            Represents logical "less than" operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLess.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLess.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLess.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "less than" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpLessOrEqual">
            <summary>
            Represents logical "less than or equal" operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLessOrEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLessOrEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLessOrEqual.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical "less than or equal" operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpLike">
            <summary>
            Represents VB-style logical LIKE operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLike.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLike.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpLike.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical LIKE operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand matches the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpMatches">
            <summary>
            Represents logical MATCHES operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMatches.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMatches.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMatches.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical MATCHES operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>
            true if the left operand matches the right operand, false otherwise.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpMODULUS">
            <summary>
            Represents arithmetic modulus operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMODULUS.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMODULUS.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMODULUS.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic modulus operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpMULTIPLY">
            <summary>
            Represents arithmetic multiplication operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMULTIPLY.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMULTIPLY.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpMULTIPLY.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic multiplication operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpNOT">
            <summary>
            Represents logical NOT operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpNOT.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpNOT.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpNOT.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical NOT operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpNotEqual">
            <summary>
            Represents logical inequality operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpNotEqual.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpNotEqual.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpNotEqual.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical inequality operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpOR">
            <summary>
            Represents logical OR operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpOR.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpOR.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpOR.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the logical OR operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpPOWER">
            <summary>
            Represents arithmetic exponent operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpPOWER.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpPOWER.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpPOWER.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic exponent operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpSUBTRACT">
            <summary>
            Represents arithmetic subtraction operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpSUBTRACT.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpSUBTRACT.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpSUBTRACT.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the arithmetic subtraction operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryMinus">
            <summary>
            Represents unary minus operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryMinus.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryMinus.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryMinus.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the unary plus operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryPlus">
            <summary>
            Represents unary plus operator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryPlus.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryPlus.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.OpUnaryPlus.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the unary plus operator node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.AverageAggregator">
            <summary>
            Implementation of the average aggregator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.AverageAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the average of the numeric values in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The average of the numeric values in the source collection.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.CountAggregator">
            <summary>
            Implementation of the count aggregator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.CountAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the number of items in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The number of items in the source collection, 
            or zero if the collection is empty or <c>null</c>.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.DistinctProcessor">
            <summary>
            Implementation of the distinct processor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.DistinctProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns distinct items from the collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            0: boolean flag specifying whether to include <c>null</c>
            in the results or not. Default is false, which means that
            <c>null</c> values will not be included in the results.
            </param>
            <returns>
            A collection containing distinct source collection elements.
            </returns>
            <exception cref="T:System.ArgumentException">
            If there is more than one argument, or if the single optional argument 
            is not <b>Boolean</b>.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.ICollectionProcessor">
            <summary>
            Defines an interface that should be implemented
            by all collection processors and aggregators.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.ICollectionProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Processes a list of source items and returns a result.
            </summary>
            <param name="source">
            The source list to process.
            </param>
            <param name="args">
            An optional processor arguments array.
            </param>
            <returns>
            The processing result.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.ICollectionProcessor.GetResultType(System.Type,System.Type[])">
            <summary>
            Evaluate the type of 
            </summary>
            <param name="sourceType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.MaxAggregator">
            <summary>
            Implementation of the maximum aggregator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.MaxAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the largest item in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The largest item in the source collection.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.MinAggregator">
            <summary>
            Implementation of the minimum aggregator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.MinAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the smallest item in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The smallest item in the source collection.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.NonNullProcessor">
            <summary>
            Implementation of the non-null processor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.NonNullProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns non-null items from the collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            A collection containing non-null source collection elements.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.OrderByProcessor">
            <summary>
            Implementation of the 'order by' processor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.OrderByProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Sorts the source collection using custom sort criteria.
            </summary>
            <remarks>
            Please not that this aggregator requires that collection elements
            are of a uniform type.
            </remarks>
            <param name="source">
            The source collection to sort.
            </param>
            <param name="args">
            Sort criteria to use.
            </param>
            <returns>
            A sorted array containing collection elements.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.SortProcessor">
            <summary>
            Implementation of the sort processor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.SortProcessor.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Sorts the source collection.
            </summary>
            <remarks>
            Please not that this processor requires that collection elements
            are of a uniform type and that they implement <see cref="T:System.IComparable"/>
            interface.
            <p/>
            If you want to perform custom sorting based on element properties
            you should consider using <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.OrderByProcessor"/> instead.
            </remarks>
            <param name="source">
            The source collection to sort.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            An array containing sorted collection elements.
            </returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="source"/> collection is not empty and it is 
            neither <see cref="T:System.Collections.IList"/> nor <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.SortProcessor.DetermineElementType(System.Collections.ICollection)">
            <summary>
            Tries to determine collection element type.
            </summary>
            <param name="source">Source collection.</param>
            <returns>A best possible element type match.</returns>
            <exception cref="T:System.ArgumentException">
            If <paramref name="source"/> is neither <see cref="T:System.Collections.IList"/>
            nor <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Collections.ISet"/>.
            </exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.SumAggregator">
            <summary>
            Implementation of the sum aggregator.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Processors.SumAggregator.Process(System.Collections.ICollection,System.Object[])">
            <summary>
            Returns the sum of the numeric values in the source collection.
            </summary>
            <param name="source">
            The source collection to process.
            </param>
            <param name="args">
            Ignored.
            </param>
            <returns>
            The sum of the numeric values in the source collection.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.ProjectionNode">
            <summary>
            Represents parsed projection node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ProjectionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ProjectionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.ProjectionNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> containing results of evaluation
            of projection expression against each node in the context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode">
            <summary>
            Represents node that navigates to object's property or public field.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.InitializeNode(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Initializes the node.
            </summary>
            <param name="context">The parent.</param>
            <param name="evalContext">the context of evaluation</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.GetPropertyOrFieldAccessor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Attempts to resolve property or field.
            </summary>
            <param name="contextType">
            Type to search for a property or a field.
            </param>
            <param name="memberName">
            Property or field name.
            </param>
            <param name="bindingFlags">
            Binding flags to use.
            </param>
            <returns>
            Resolved property or field accessor, or <c>null</c> 
            if specified <paramref name="memberName"/> cannot be resolved.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.Set(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.IsProperty">
            <summary>
            Gets a value indicating whether this node represents a property.
            </summary>
            <value>
            	<c>true</c> if this node is a property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.IsType">
            <summary>
            Gets a value indicating whether this node represents a property.
            </summary>
            <value>
            	<c>true</c> if this node is a property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.IsField">
            <summary>
            Gets a value indicating whether this node represents a field.
            </summary>
            <value>
            	<c>true</c> if this node is a field; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.GetPropertyOrFieldValue(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Retrieves property or field value.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Property or field value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.SetPropertyOrFieldValue(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets property value, doing any type conversions that are necessary along the way.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.SetPropertyOrFieldValueInternal(System.Object,System.Object)">
            <summary>
            Sets property or field value using either dynamic or standard reflection.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node, converted to appropriate type.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.PropertyOrFieldNode.AddToCollections(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            In the case of read only collections or custom collections that are not assignable from
            IList, try to add to the collection.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
            <returns>true if was able add to IList, IDictionary, or ISet</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.QualifiedIdentifier">
            <summary>
            Represents parsed named argument node in the expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.QualifiedIdentifier.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.QualifiedIdentifier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.QualifiedIdentifier.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the value of the named argument defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.QualifiedIdentifier.getText">
            <summary>
            Overrides getText to allow easy way to get fully 
            qualified identifier.
            </summary>
            <returns>
            Fully qualified identifier as a string.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.RealLiteralNode">
            <summary>
            Represents parsed real literal node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.RealLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.RealLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.RealLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the real literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Context.Support.ReferenceNode">
            <summary>
            Represents a reference to a Novalys.VisualGuard.Security.Scripting.Expressions-managed object.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Context.Support.ReferenceNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Context.Support.ReferenceNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Context.Support.ReferenceNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the integer literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember">
            <summary>
            Base class for dynamic members.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember.METHOD_ATTRIBUTES">
            <summary>
            Method attributes constant.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember.SetupTargetInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Sets up target instance for invocation.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="targetType">Type of target instance.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember.SetupArgument(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            Sets up invocation argument.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="argumentType">Argument type.</param>
            <param name="argumentPosition">Argument position.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember.InvokeMethod(System.Reflection.Emit.ILGenerator,System.Boolean,System.Boolean,System.Reflection.MethodInfo)">
            <summary>
            Generates method invocation code.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="isStatic">Flag specifying whether method is static.</param>
            <param name="isValueType">Flag specifying whether method is on the value type.</param>
            <param name="method">Method to invoke.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember.ProcessReturnValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Generates code to process return value if necessary.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="returnValueType">Type of the return value.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.BaseDynamicMember.ThrowInvalidOperationException(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Generates code that throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="il">IL generator to use.</param>
            <param name="message">Error message to use.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicConstructor">
            <summary>
            Defines constructors that dynamic constructor class has to implement.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicConstructor.Invoke(System.Object[])">
            <summary>
            Invokes dynamic constructor.
            </summary>
            <param name="arguments">
            Constructor arguments.
            </param>
            <returns>
            A constructor value.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeConstructor">
            <summary>
            Safe wrapper for the dynamic constructor.
            </summary>
            <remarks>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeConstructor"/> will attempt to use dynamic
            constructor if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeConstructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new instance of the safe constructor wrapper.
            </summary>
            <param name="constructor">Constructor to wrap.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeConstructor.Invoke(System.Object[])">
            <summary>
            Invokes dynamic constructor.
            </summary>
            <param name="arguments">
            Constructor arguments.
            </param>
            <returns>
            A constructor value.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicConstructor">
            <summary>
            Factory class for dynamic constructors.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicConstructor.Create(System.Reflection.ConstructorInfo)">
            <summary>
            Creates dynamic constructor instance for the specified <see cref="T:System.Reflection.ConstructorInfo"/>.
            </summary>
            <param name="constructor">Constructor info to create dynamic constructor for.</param>
            <returns>Dynamic constructor for the specified <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicField">
            <summary>
            Defines methods that dynamic field class has to implement.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicField.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to get field value from.
            </param>
            <returns>
            A field value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicField.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to set field value on.
            </param>
            <param name="value">
            A new field value.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeField">
            <summary>
            Safe wrapper for the dynamic field.
            </summary>
            <remarks>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeField"/> will attempt to use dynamic
            field if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeField.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new instance of the safe field wrapper.
            </summary>
            <param name="field">Field to wrap.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeField.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to get field value from.
            </param>
            <returns>
            A field value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeField.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic field for the specified target object.
            </summary>
            <param name="target">
            Target object to set field value on.
            </param>
            <param name="value">
            A new field value.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicField">
            <summary>
            Factory class for dynamic fields.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicField.Create(System.Reflection.FieldInfo)">
            <summary>
            Creates dynamic field instance for the specified <see cref="T:System.Reflection.FieldInfo"/>.
            </summary>
            <param name="field">Field info to create dynamic field for.</param>
            <returns>Dynamic field for the specified <see cref="T:System.Reflection.FieldInfo"/>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer">
            <summary>
            Defines methods that dynamic indexer class has to implement.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer.GetValue(System.Object,System.Int32)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer.GetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set the indexer value on.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set the indexer value on.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set the indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer">
            <summary>
            Safe wrapper for the dynamic indexer.
            </summary>
            <remarks>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer"/> will attempt to use dynamic
            indexer if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of the safe indexer wrapper.
            </summary>
            <param name="indexer">Indexer to wrap.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.GetValue(System.Object,System.Int32)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get indexer value from.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.GetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get the indexer value from.
            </param>
            <param name="index">
            Indexer argument.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to get indexer value from.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <returns>
            A indexer value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            Sets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            Sets the value of the dynamic indexer for the specified target object.
            </summary>
            <param name="target">
            Target object to set indexer value on.
            </param>
            <param name="index">
            Indexer arguments.
            </param>
            <param name="value">
            A new indexer value.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeIndexer.IndexerProperty">
            <summary>
            Internal PropertyInfo accessor.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicIndexer">
            <summary>
            Factory class for dynamic indexers.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicIndexer.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates dynamic indexer instance for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="indexer">Indexer info to create dynamic indexer for.</param>
            <returns>Dynamic indexer for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicMethod">
            <summary>
            Defines methods that dynamic method class has to implement.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicMethod.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes dynamic method on the specified target object.
            </summary>
            <param name="target">
            Target object to invoke method on.
            </param>
            <param name="arguments">
            Method arguments.
            </param>
            <returns>
            A method return value.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeMethod">
            <summary>
            Safe wrapper for the dynamic method.
            </summary>
            <remarks>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeMethod"/> will attempt to use dynamic
            method if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance of the safe method wrapper.
            </summary>
            <param name="method">Method to wrap.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeMethod.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes dynamic method.
            </summary>
            <param name="target">
            Target object to invoke method on.
            </param>
            <param name="arguments">
            Method arguments.
            </param>
            <returns>
            A method return value.
            </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicMethod">
            <summary>
            Factory class for dynamic methods.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicMethod.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates dynamic method instance for the specified <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">Method info to create dynamic method for.</param>
            <returns>Dynamic method for the specified <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicProperty">
            <summary>
            Defines methods that dynamic property class has to implement.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicProperty.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to get property value from.
            </param>
            <returns>
            A property value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicProperty.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to set property value on.
            </param>
            <param name="value">
            A new property value.
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty">
            <summary>
            Safe wrapper for the dynamic property.
            </summary>
            <remarks>
            <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty"/> will attempt to use dynamic
            property if possible, but it will fall back to standard
            reflection if necessary.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of the safe property wrapper.
            </summary>
            <param name="property">Property to wrap.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty.GetValue(System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to get property value from.
            </param>
            <returns>
            A property value.
            </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty.SetValue(System.Object,System.Object)">
            <summary>
            Gets the value of the dynamic property for the specified target object.
            </summary>
            <param name="target">
            Target object to set property value on.
            </param>
            <param name="value">
            A new property value.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty.PropertyInfo">
            <summary>
            PropertyInfo accessor.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicProperty">
            <summary>
            Factory class for dynamic properties.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicProperty.CreateSafe(System.Reflection.PropertyInfo)">
            <summary>
            Creates safe dynamic property instance for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <remarks>
            <p>This factory method will create a dynamic property with a "safe" wrapper.</p>
            <p>Safe wrapper will attempt to use generated dynamic property if possible,
            but it will fall back to standard reflection if necessary.</p>
            </remarks>
            <param name="property">Property info to create dynamic property for.</param>
            <returns>Safe dynamic property for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
            <seealso cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.SafeProperty"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicProperty.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates dynamic property instance for the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">Property info to create dynamic property for.</param>
            <returns>Dynamic property for the specified <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreatePropertyCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicProperty"/> from a <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateFieldCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicField"/> from a <see cref="T:System.Reflection.FieldInfo"/> instance.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateMethodCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicMethod"/> from a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateConstructorCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicConstructor"/> from a <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateIndexerCallback">
            <summary>
            Represents a callback method used to create an <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer"/> from a <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager">
            <summary>
            Allows easy access to existing and creation of new dynamic relection members.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.ASSEMBLY_NAME">
            <summary>
            The name of the assembly that defines reflection types created.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.TYPE_ATTRIBUTES">
            <summary>
            The attributes of the reflection type to generate.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.propertyCache">
            <summary>
            Cache for dynamic property types.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.fieldCache">
            <summary>
            Cache for dynamic field types.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.indexerCache">
            <summary>
            Cache for dynamic indexer types.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.methodCache">
            <summary>
            Cache for dynamic method types.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.constructorCache">
            <summary>
            Cache for dynamic constructor types.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.CreateTypeBuilder(System.String)">
            <summary>
            Creates an appropriate type builder.
            </summary>
            <param name="name">
            The base name to use for the reflection type name.
            </param>
            <returns>The type builder to use.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.GetDynamicProperty(System.Reflection.PropertyInfo,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreatePropertyCallback)">
            <summary>
            Returns dynamic property if one exists.
            </summary>
            <param name="property">Property to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic property</param>
            <returns>An <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicProperty"/> for the given property info.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.GetDynamicField(System.Reflection.FieldInfo,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateFieldCallback)">
            <summary>
            Returns dynamic field if one exists.
            </summary>
            <param name="field">Field to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic field</param>
            <returns>An <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicField"/> for the given field info.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.GetDynamicIndexer(System.Reflection.PropertyInfo,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateIndexerCallback)">
            <summary>
            Returns dynamic indexer if one exists.
            </summary>
            <param name="indexer">Indexer to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic indexer</param>
            <returns>An <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicIndexer"/> for the given indexer.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.GetDynamicMethod(System.Reflection.MethodInfo,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateMethodCallback)">
            <summary>
            Returns dynamic method if one exists.
            </summary>
            <param name="method">Method to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic method</param>
            <returns>An <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicMethod"/> for the given method.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.GetDynamicConstructor(System.Reflection.ConstructorInfo,Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.CreateConstructorCallback)">
            <summary>
            Returns dynamic constructor if one exists.
            </summary>
            <param name="constructor">Constructor to look up.</param>
            <param name="createCallback">callback function that will be called to create the dynamic constructor</param>
            <returns>An <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.IDynamicConstructor"/> for the given constructor.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.Dynamic.DynamicReflectionManager.SaveAssembly">
            <summary>
            Saves dynamically generated assembly to disk.
            Can only be called in DEBUG mode, per ConditionalAttribute rules.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.VGTypeDelegator">
            <summary>
            Encapsulates a type
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.Reflection.VGTypeDelegator.DelegatingType">
            <summary>
            Returns the true type
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionFirstNode">
            <summary>
            Represents parsed selection node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionFirstNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionFirstNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionFirstNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the first context item that matches selection expression.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionLastNode">
            <summary>
            Represents parsed selection node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionLastNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionLastNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionLastNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns the last context item that matches selection expression.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionNode">
            <summary>
            Represents parsed selection node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.SelectionNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a <see cref="T:System.Collections.IList"/> containing results of evaluation
            of selection expression against each node in the context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.StringLiteralNode">
            <summary>
            Represents parsed string literal node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.StringLiteralNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.StringLiteralNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.StringLiteralNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the string literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.TernaryNode">
            <summary>
            Represents ternary expression node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.TernaryNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.TernaryNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.TernaryNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns a value for the string literal node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.TypeNode">
            <summary>
            Represents parsed type node in the navigation expression.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.TypeNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.TypeNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.TypeNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.UnaryOperator">
            <summary>
            Base class for unary operators.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.UnaryOperator.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.UnaryOperator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.UnaryOperator.Operand">
            <summary>
            Gets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.VariableNode">
            <summary>
            Represents parsed variable node.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VariableNode.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VariableNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VariableNode.Get(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext)">
            <summary>
            Returns value of the variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VariableNode.Set(System.Object,Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode.EvaluationContext,System.Object)">
            <summary>
            Sets value of the variable represented by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST">
            <summary>
            For internal purposes only. Use <see cref="T:Novalys.VisualGuard.Security.Scripting.Expressions.BaseNode"/> for expression node implementations.
            </summary>
            <remarks>
            This class is only required to enable serialization of parsed Novalys.VisualGuard.Security.Scripting.Expressions expressions since antlr.CommonAST
            unfortunately is not marked as [Serializable].<br/>
            <br/>
            <b>Note:</b>Since VGAST implements <see cref="T:System.Runtime.Serialization.ISerializable"/>, deriving classes 
            have to explicitely override <see cref="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> if they need to persist additional
            data during serialization.
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.Creator">
            <summary>
            The global VGAST node factory
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.#ctor">
            <summary>
            Create an instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.#ctor(Novalys.VisualGuard.Security.Scripting.Expressions.Tools.IToken)">
            <summary>
            Create an instance from a token
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.initialize(Novalys.VisualGuard.Security.Scripting.Expressions.Tools.collections.AST)">
            <summary>
            initialize this instance from an AST
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.initialize(Novalys.VisualGuard.Security.Scripting.Expressions.Tools.IToken)">
            <summary>
            initialize this instance from an IToken
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.initialize(System.Int32,System.String)">
            <summary>
            initialize this instance from a token type number and a text
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.Type">
            <summary>
            gets or sets the token type of this node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.Text">
            <summary>
            gets or sets the text of this node
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.setText(System.String)">
            <summary>
            sets the text of this node
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.getText">
            <summary>
            gets the text of this node
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance from SerializationInfo
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.Expressions.VGAST.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            populate SerializationInfo from this instance
            </summary>
            
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.TempFiles">
            <summary>
            This class allows deleting generated files
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.VGCompilationErrorException">
            <summary>
            Exception thrown when an error occurred in the compilation of dynamic script.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGCompilationErrorException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.VGCompilationErrorException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGCompilationErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.Scripting.VGCompilationErrorException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGCompilationErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.VGLanguages">
            <summary>
            Represents the enumeration of all script languages that are currently supported.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.VGLanguages.VB">
            <summary>
            Script based on VB.net syntax.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.VGLanguages.CSharp">
            <summary>
            Script based on c# syntax.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.VGScript">
            <summary>
            Represents a Script or a part of script to compile.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScript.#ctor(Novalys.VisualGuard.Security.Scripting.VGLanguages)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Scripting.VGScript"/> class.
            </summary>
            <param name="language">A <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value indicating the language of the script.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScript.#ctor(System.String,Novalys.VisualGuard.Security.Scripting.VGLanguages)">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.Scripting.VGScript"/> class.
            </summary>
            <param name="source">The source code of the script.</param>
            <param name="language">A <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value indicating the language of the script.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.VGScript.Source">
            <summary>
            Gets the source code of the script. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Scripting.VGScript.Language">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value representing the language of the script.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScript.Clone">
            <summary>
            Returns a copy of the object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.Scripting.VGScripting">
            <summary>
            Provides functions for generating and compiling C# or VB.Net script.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.Scripting.VGScripting.DefaultScriptLanguageKey">
            <summary>
            A string value representing the key used to store the default language.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.CompileScript(Novalys.VisualGuard.Security.Scripting.VGScript)">
            <summary>
            Compiles a script
            </summary>
            <param name="source">The source code of the script.</param>
            <returns>a <see cref="T:System.CodeDom.Compiler.CompilerResults"/> object containing the result of the compilation.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.ConvertLanguageToString(Novalys.VisualGuard.Security.Scripting.VGLanguages)">
            <summary>
            Converts a <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value to a string value.
            </summary>
            <param name="language">A <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value.</param>
            <returns>A string value representing the given language.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.ConvertLanguageFromString(System.String)">
            <summary>
            Converts a string value to a <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value.
            </summary>
            <param name="language">a string value containing the language.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.Scripting.VGLanguages"/> value.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.GetSupportedLanguageList">
            <summary>
            Returns an array of string containing the list of supported languages.
            </summary>
            <returns>An array of string containing the list of supported languages.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.AddScriptToCompileByBatch(Novalys.VisualGuard.Security.Scripting.VGScript)">
            <summary>
            Adds a script to compile by batch mode
            </summary>
            <param name="script">the <see cref="T:Novalys.VisualGuard.Security.Scripting.VGScript"/> object representing the script to compile.</param>
            <remarks>To compile added script you must call the method <see cref="M:Novalys.VisualGuard.Security.Scripting.VGScripting.CompileScriptsByBatch"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.CompileScriptsByBatch">
            <summary>
            Compile the list of script added by the method <see cref="M:Novalys.VisualGuard.Security.Scripting.VGScripting.AddScriptToCompileByBatch(Novalys.VisualGuard.Security.Scripting.VGScript)"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.Scripting.VGScripting.HasScriptsToCompile">
            <summary>
            Indicates if there are scripts to compile in batch mode.
            </summary>
            <returns>true if there is one or more scripts to compile in batch mode, false otherwise.</returns>
            <remarks>You can use this method to know if the method <see cref="M:Novalys.VisualGuard.Security.Scripting.VGScripting.CompileScriptsByBatch"/> must be called.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.Token.VGTokenDetailsInformation.FromInformation">
            <summary>
            Descrition of where this authentication is demand
            For Web technology, we show the Http page
            For Win technology, we show the machine information
            For WebService, we show the details of the user
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.UserProfile.ProfileAttributeType">
            <summary>
            Represents an enum for Attribute type whether this attribute is custom or VG (VisualGuard's) default attribute
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.ProfileAttributeType.Custom">
            <summary>
            Custom attribute
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.ProfileAttributeType.VG">
            <summary>
            VisualGuard default attribute (ex. Firstname, Lastname)
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.UserProfile.VGAttribute_InformationType">
            <summary>
            Represents an enum containing default VG Attribute Information types. While creating profile attribute, if these types are used,
            Those attributes will be auto mapped to module's attributes.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileAttributeInformation.Item">
            <summary>
            Gets or sets item
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileAttributeInformation.SetDropDownItems(System.Collections.Generic.List{System.String})">
            <summary>
            Sets value for dropDown Items
            </summary>
            <param name="items">collection of items</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileAttributeInformation.GetDropDownItems">
            <summary>
            Gets dropdown items.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileAttributeInformation.isVisible">
            <summary>
            Gets or sets defaultData Value
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType">
            <summary>
            Represents an enum for profile attribute datatype (ex. string, integer, double etc)
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.String">
            <summary>
            String datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.Integer">
            <summary>
            Integer datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.Double">
            <summary>
            Double datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.DateTime">
            <summary>
            DateTime datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.Boolean">
            <summary>
            Boolean datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.Image">
            <summary>
            Image datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.DropDownList">
            <summary>
            DropDown list datatype
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.UserProfile.VGProfileDataType.BinaryData">
            <summary>
            Binary data datatype
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValue.PropertyValue">
            <summary>
            Gets or sets PropertyValue for the attribute
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended">
            <summary>
            This class represents user profileValue collection.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Save">
            <summary>
            Saves profile values.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetEnumerator">
            <summary>
            Gets enumerator for profile value collection.
            </summary>
            <returns>enumerator for profile value collection.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets enumerator for profile value collection.
            </summary>
            <returns>enumerator for profile value collection.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Contains(System.Guid,System.String)">
            <summary>
            Checks if profileValue collection contains particular property for contextual group.
            </summary>
            <param name="groupid">ContextualGroupId</param>
            <param name="propertyName">property Name</param>
            <returns>True if profileValue collection contains particular property for contextual group else False.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Contains(System.Guid,System.Guid)">
            <summary>
            Checks if profileValue collection contains particular property for contextual group.
            </summary>
            <param name="groupid">ContextualGroupId</param>
            <param name="propertyId">property Id</param>
            <returns>True if profileValue collection contains particular property for contextual group else False.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Contains(System.String)">
            <summary>
            Checks if profileValue collection contains particular property
            </summary>
            <param name="propertyName">propertyName</param>
            <returns>True if profileValue collection contains particular property else False</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Contains(System.Guid)">
            <summary>
            Checks if profileValue collection contains particular property
            </summary>
            <param name="propertyId">propertyId</param>
            <returns>True if profileValue collection contains particular property else False</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.CheckIfGroupSupportsMultiUserProfile(Novalys.VisualGuard.Security.Membership.VGGroup)">
            <summary>
            checks if group supports multi user profile
            </summary>
            <param name="groupId">groupId</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetDefaultValue(System.String)">
            <summary>
            Gets default user profile value by property Name
            </summary>
            <param name="propertyName">property name</param>
            <returns>default user profile value (Object) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetDefaultValue(System.Guid)">
            <summary>
            Gets default user profile value by property Id.
            </summary>
            <param name="propertyId">property Id</param>
            <returns>user profile value (Object) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetDefaultValue``1(System.String)">
            <summary>
            Gets default user profile value by property Name
            </summary>
            <typeparam name="T">Type(T)</typeparam>
            <param name="propertyName">property Name</param>
            <returns>default user profile value (T) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetDefaultValue``1(System.Guid)">
            <summary>
            Gets default user profile value by property Id.
            </summary>
            <typeparam name="T">Type(T)</typeparam>
            <param name="propertyId">property Id</param>
            <returns>default user profile value (T)</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetDefaultValue``1(Novalys.VisualGuard.Security.Membership.VGProfileAttribute)">
            <summary>
            Gets default user profile value by VGProfileAttribute.
            </summary>
            <typeparam name="T">Type(T)</typeparam>
            <param name="property">VGProfileAttribute object</param>
            <returns> default user profile value (T)</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(System.String)">
            <summary>
            Gets user profile value by property name.
            </summary>
            <param name="propertyName">property name</param>
            <returns>user profile value (Object) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(System.Guid)">
            <summary>
            Gets user profile value by property Id.
            </summary>
            <param name="propertyId">property Id</param>
            <returns>user profile value (Object) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(Novalys.VisualGuard.Security.Membership.VGProfileAttribute)">
            <summary>
            Gets user profile value by VGProfileAttribute.
            </summary>
            <param name="attribute">VGProfileAttribute object</param>
            <returns>user profile value (Object) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue``1(System.String)">
            <summary>
            Gets user profile value by property name.
            </summary>
            <typeparam name="T">Type(T)</typeparam>
            <param name="propertyName">property Name</param>
            <returns>user profile value (T) </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue``1(System.Guid)">
            <summary>
            Gets user profile value by property Id.
            </summary>
            <typeparam name="T">Type(T)</typeparam>
            <param name="propertyId">property Id</param>
            <returns>user profile value (T)</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue``1(Novalys.VisualGuard.Security.Membership.VGProfileAttribute)">
            <summary>
            Gets user profile value by VGProfileAttribute.
            </summary>
            <typeparam name="T">Type(T)</typeparam>
            <param name="property">VGProfileAttribute object</param>
            <returns>user profile value (T)</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Item(System.String)">
            <summary>
            Gets user profile value by property name.
            </summary>
            <param name="propertyName">property Name</param>
            <returns>user profile value (object) </returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Item(System.Guid)">
            <summary>
            Gets user profile value by property Id.
            </summary>
            <param name="propertyId">property Id</param>
            <returns>user profile value (object)</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Item(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid)">
            <summary>
            Gets particular contextual group's user profile value by property Id.
            </summary>
            <param name="group">contextual group which supports MultiUserProfile</param>
            <param name="propertyId">property Id</param>
            <returns>contextual group's user profile value</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Item(Novalys.VisualGuard.Security.Membership.VGGroup,System.String)">
            <summary>
            Gets particular contextual group's user profile value by property Name
            </summary>
            <param name="group">contextual group which supports MultiUserProfile</param>
            <param name="propertyName">property Name</param>
            <returns>contextual group's user profile value</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Item(Novalys.VisualGuard.Security.VGContextualGroup,System.Guid)">
            <summary>
            Gets particular contextual group's user profile value by propertyId
            </summary>
            <param name="contextualGroup">contextualGroup which supports MultiUserProfile</param>
            <param name="propertyId">propertyId</param>
            <returns>contextual group's user profile value</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.Item(Novalys.VisualGuard.Security.VGContextualGroup,System.String)">
            <summary>
            Gets particular contextual group's user profile value by property Name
            </summary>
            <param name="contextualGroup">contextualGroup which supports MultiUserProfile</param>
            <param name="propertyName">property Name</param>
            <returns>contextual group's user profile value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(Novalys.VisualGuard.Security.VGContextualGroup,System.String)">
            <summary>
            Gets particular contextual group's user profile value by property Name
            </summary>
            <param name="contextualGroup">contextualGroup which supports MultiUserProfile</param>
            <param name="propertyName">property Name</param>
            <returns>contextual group's user profile value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(Novalys.VisualGuard.Security.VGContextualGroup,System.Guid)">
            <summary>
            Gets particular contextual group's user profile value by propertyId
            </summary>
            <param name="contextualGroup">contextualGroup which supports MultiUserProfile</param>
            <param name="propertyName">propertyId</param>
            <returns>contextual group's user profile value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.String)">
            <summary>
            Gets particular contextual group's user profile value by property name.
            </summary>
            <param name="group">contextual group which supports MultiUserProfile</param>
            <param name="propertyName">property name of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid)">
            <summary>
            Gets particular contextual group's user profile value by property Id.
            </summary>
            <param name="group">contextual group which supports MultiUserProfile</param>
            <param name="propertyId">propertyId of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.String)">
            <summary>
            Gets particular contextual group's user profile value by property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group">contextual group object which supports MultiUserProfile</param>
            <param name="propertyName">property name of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.GetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid)">
            <summary>
            Gets particular contextual group's user profile value by property Id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group">contextual group object which supports MultiUserProfile</param>
            <param name="propertyId">propertyId of the attribute</param>
            <returns>returns user profile value for particular contextual group</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetDefaultValue(System.String,System.Object)">
            <summary>
            Sets default user profile value by property Name.
            </summary>
            <param name="propertyName">property Name</param>
            <param name="propertyValue">propertyValue to set</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetDefaultValue(System.Guid,System.Object)">
            <summary>
            Sets default user profile value by property Id
            </summary>
            <param name="propertyId">property Id</param>
            <param name="propertyValue">propertyValue to set</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetDefaultValue``1(Novalys.VisualGuard.Security.Membership.VGProfileAttribute,``0)">
            <summary>
            Sets default user profile value for particular contextual group by attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attribute">property attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetDefaultValue``1(System.String,``0)">
            <summary>
            Sets default user profile value for particular contextual group by property Name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">property Name of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetDefaultValue``1(System.Guid,``0)">
            <summary>
            Sets default user profile value for particular contextual group by propertyId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue(System.String,System.Object)">
            <summary>
            Sets user profile value by property Name.
            </summary>
            <param name="propertyName">property Name</param>
            <param name="propertyValue">propertyValue to set</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue(System.Guid,System.Object)">
            <summary>
            Sets user profile value by property Id
            </summary>
            <param name="propertyId">property Id</param>
            <param name="propertyValue">propertyValue to set</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.String,``0)">
            <summary>
            Sets user profile value for particular contextual group by propertyname.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyName">propertyName of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue``1(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid,``0)">
            <summary>
            Sets user profile value for particular contextual group by propertyId.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="group">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.String,System.Object)">
            <summary>
            Sets user profile value for particular contextual group by propertyname.
            </summary>
            <param name="group">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyName">propertyName of attribute</param>
            <param name="propertyValue">propertyValue</param>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue(Novalys.VisualGuard.Security.Membership.VGGroup,System.Guid,System.Object)">
            <summary>
            Sets user profile value for particular contextual group by propertyId.
            </summary>
            <param name="group">Contextual group object for which you want to set user profile value.</param>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue(Novalys.VisualGuard.Security.VGContextualGroup,System.Guid,System.Object)">
            <summary>
            Sets user profile value for particular contextual group by propertyId.
            </summary>
            <param name="contextualGroup">Contextual group object for which you want to set user profile value.</param>
            <param name="propertyId">propertyId of attribute</param>
            <param name="propertyValue">propertyValue</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGProfileValueCollectionExtended.SetValue(Novalys.VisualGuard.Security.VGContextualGroup,System.String,System.Object)">
            <summary>
            Sets user profile value for particular contextual group by propertyname.
            </summary>
            <param name="contextualGroup">Contextual vggroup for which you want to set user profile value.</param>
            <param name="propertyName">propertyName of attribute</param>
            <param name="propertyValue">propertyValue</param>        
        </member>
        <member name="T:Novalys.VisualGuard.Security.UserProfile.VGUserProfileAttributeInformation">
            <summary>
            VGUserProfileAttributeInformation
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.UserProfile.VGUserProfileAttributeInformation.Clone">
            <summary>
            Creates a Clone of the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.UserProfile.VGUserProfileAttributeInformation.IsMultiProfileSupported">
            <summary>
            Gets or sets is multi profile supported for this attribute
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException">
            <summary>
            Exception thrown when the method <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadAnomymousSecurity"/> is called and the application disallows anonymous session or if the role granted to anonymous session is not valid.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGApplicationType">
            <summary>
            Defines all types of application supported by Visual Guard
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.Neutral">
            <summary>
            Represents Neutral application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.ASPNET_2_0">
            <summary>
            Represents ASP.Net (2.0 or higher) application based on Website project.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.ASPNET_1_1">
            <summary>
            Represents ASP.Net 1.1 application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.WinForm">
            <summary>
            Represents WinForm application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.ASPNET_2_0_WebApplication">
            <summary>
            Represents ASP.Net (2.0 or higher) application based on Web Application project.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.PowerBuilder">
            <summary>
            Represents Powerbuilder application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.Console">
            <summary>
            Represents Console Application or Dll.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGApplicationType.NetCore_AspNet">
            <summary>
            Represents Asp.Net Core Application
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAssemblyNotSecuredException">
            <summary>
            Exception thrown when the application tries to load security permission from a repository and the application is not declared in the repository.
            </summary>
            <remarks>The id of the secured assembly is stored in the "VisualGuardConfiguration.config".
            You must regenerate this file property by using the Visual Guard console.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAssemblyNotSecuredException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGAssemblyNotSecuredException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAssemblyNotSecuredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGAssemblyNotSecuredException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAssemblyNotSecuredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAuthenticationMode">
            <summary>
            Indicates the authentication mode used by Visual Guard to authenticate a user. 
            </summary>
            The authentication mode is used by the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            You can also see the authentication mode supported by a repository by using the <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.SupportedAuthenticationModes"/> properties.
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None">
            <summary>
            The repository does not support any authentication mode
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard">
            <summary>
            The repository supports authentication based on Visual Guard user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows">
            <summary>
            The repository supports authentication based on Windows Account
            </summary>
            <remarks>This authentication mode uses the specified Windows account to check authorization.</remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database">
            <summary>
            The repository supports authentication based on Database Account
            </summary>
            <remarks>This authentication mode uses the database authentication process to authenticate a user. If the specified user cannot be connected to the database containing the Visual Guard repository the access to the application is denied.</remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.WindowsByCredential">
            <summary>
            The repository supports authentication based on windows account 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Federation">
            <summary>
            The repository supports authentication based on ADFS
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Custom">
            <summary>
            The repository supports custom authentication
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationMode.All">
            <summary>
            All authentication modes supported by Visual Guard
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAuthenticationState">
            <summary>
            Defines the state of an authentication process.
            </summary>
            <example> The following example displays how to test the state of the authentication
            <code lang="C#">
            Reauthenticate:
            VGAuthenticationState state = VGSecurityManager.Authenticate(user.Text, password.Text);
            if (state.IsFailed)
            {
            	if (state.IsCanceled) return;
            	if (state.IsCredentialInvalid)
            	{
            		if (state.IsLastBadLogin)
            		{
            			MessageBox.Show("Invalid user or password. The next bad login will lock your account.");
            		}
            		else
            		{
            			MessageBox.Show("Invalid user or password");
            		}
            	}
            	else if (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("user not authorized to log on the application");
            	}
            	else if (state.IsUserAccountExpired)
            	{
            		MessageBox.Show("your account is no more valid. Contact your administrator");
            	}
            	else if (state.IsUserAccountNotYetAvailable)
            	{
            		MessageBox.Show("your account is not yet available.");
            	}
            	else if (state.IsUserAccountLockedOut)
            	{
            		MessageBox.Show("your account is locked out. Contact your administrator.");
            	}
            	else if (state.MustChangePasswordAtNextLogon)
            	{
            	    if (!state.IsPasswordSecure)
            	    {
                        if (state.PasswordExpired)
                        {
            		        MessageBox.Show("Your password has expired. You are required to change it.");
                        }
                        else
                        {
            		        MessageBox.Show("Your password is not secure enough. You are required to change it.");
                        }
                    }
                    else
                    {
            		    MessageBox.Show("You are required to change your password at first logon.");
                    }
                    VGChangePasswordForm form = new VGChangePasswordForm(runtime);
                    form.UserName = currentUsername;
                    form.OldPassword = currentPassword;
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        currentPassword = form.NewPassword;
                        goto Reauthenticate;
                    }
            	}
            }
            else
            {
            	this.DialogResult = DialogResult.OK;
            	if (!state.IsPasswordSecured)
            	{
            		if (MessageBox.Show("Your password is not secure enough. " + Environment.NewLine + "Do you want to change it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes)
            		{
            			// Use the Visual guard form to change the password
            			// You can replace it by your own form
            			VGChangePasswordForm form = new VGChangePasswordForm();
            			form.ShowDialog();
            		}
            	}
            }
            </code>
            <code lang="vb.net">
            Reauthenticate:
            Dim state As VGAuthenticationState = VGSecurityManager.Authenticate(userTextBox.Text, passwordTextBox.Text)
            If state.IsFailed Then
            	Me.DialogResult = DialogResult.None
            	If state.IsCanceled Then Return
            	If state.IsCredentialInvalid Then
            		If state.IsLastBadLogin Then
            		    MessageBox.Show("Invalid user or password. The next bad login will lock your account.")
            		Else
            			MessageBox.Show("Invalid user or password")
            		End If
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("user not authorized to log on to the application")
            	ElseIf state.IsUserAccountExpired Then
            		MessageBox.Show("your account is no more valid. Contact your administrator")
            	ElseIf state.IsUserAccountNotYetAvailable Then
            		MessageBox.Show("your account is not yet available.")
            	ElseIf state.MustChangePasswordAtNextLogon Then
                    If Not state.IsPasswordSecure Then
                        If state.IsPasswordExpired Then
                            MessageBox.Show("Your password has expired. You are required to change it.")
                        Else
                            MessageBox.Show("Your password is not secure enough. You are required to change it.")
                        End If
                    Else
                        MessageBox.Show("You are required to change your password at first logon.")
                    End If
            		Dim form As VGChangePasswordForm = New VGChangePasswordForm
                    form.UserName = userTextBox.Text
                    form.OldPassword = passwordTextBox.Text
            		If form.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                        passwordTextBox.Text = form.NewPassword
                        GoTo Reauthenticate
                    End If
            	ElseIf state.IsUserAccountLockedOut Then
            		MessageBox.Show("your account is locked out. Contact your administrator.")
            	End If
            Else
            	Me.DialogResult = DialogResult.OK
            	If Not state.IsPasswordSecured Then
            		If MessageBox.Show("Your password is not secure enough. " + _
            			Environment.NewLine + "Do you want to change it?", "", _
            			MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
            			MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes Then
            			' Use the Visual guard form to change the password
            			' You can replace it by your own form
            			Dim form As VGChangePasswordForm = New VGChangePasswordForm
            			form.ShowDialog()
            		End If
            	End If
            End If
            </code>
            </example>
            <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAuthenticationState.#ctor(Novalys.VisualGuard.Security.VGAuthenticationStatus)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/>.
            </summary>
            <param name="status">The status of the authentication.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.Status">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationStatus"/> corresponding to the authentication state.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsFailed">
            <summary>
            Checks if the authentication process has failed
            </summary>
            <returns><c>true</c> if the authentication process has failed. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsNotApproved">
            <summary>
            Checks whether the user is not approved and cannot be authenticated.
            </summary>
            <returns><c>true</c> if the user is not approved. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsCanceled">
            <summary>
            Checks whether the authentication process has been canceled by the user.
            </summary>
            <returns><c>true</c> if the authentication process has been canceled. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsCredentialInvalid">
            <summary>
            Checks whether the authentication process has failed due to bad credentials (user or password incorrect).
            </summary>
            <returns><c>true</c> if the user or the password is invalid. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserNotAuthorized">
            <summary>
            Checks whether the user is not authorized to access to the application.
            </summary>
            <returns><c>true</c> if the user is not authorized to access to the application. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserAccountExpired">
            <summary>
            Checks whether the user account has expired.
            </summary>
            <returns><c>true</c> if the user account has expired. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserAccountNotYetAvailable">
            <summary>
            Checks whether the user account exists but is not yet available.
            </summary>
            <returns><c>true</c> if the user account exists but is not yet available. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserAccountDisabled">
            <summary>
            Checks whether user account is disabled.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserAccountLocked">
            <summary>
            Checks whether user account is locked
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsLastBadLogin">
            <summary>
            Checks whether the next bad logon attempt will lock out the user account.
            </summary>
            <returns><c>true</c> if the next bad logon attempt will lock out the user account. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsLastGraceLogon">
            <summary>
            Checks whether it is the last grace logon before locking out the account.
            </summary>
            <remarks><see cref="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsLastGraceLogon"/> has been deprecated. When the password is expired and it is the last grace logon, Visual Guard no longer locks the account but sets the option 'MustChangedAtNexLogon' of the account and returns the status: <see cref="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsFailed"/> | <see cref="P:Novalys.VisualGuard.Security.VGAuthenticationState.MustChangePasswordAtNextLogon"/> | <see cref="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsPasswordExpired"/>. </remarks>
            <returns><c>true</c> if it is the last grace logon before locking out the account. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsPasswordExpired">
            <summary>
            Checks whether the password is expired according to the password policy.
            </summary>
            <returns><c>true</c> if the password has expired. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsPasswordSecure">
            <summary>
            Checks whether the password is secure enough according to the password policy.
            </summary>
            <returns><c>true</c> if the password is enough secure. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserAccountLockedOut">
            <summary>
            Checks whether the user account is locked out due to bad credentials.
            </summary>
            <returns><c>true</c> if the user account is locked out. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.IsUserAccountWillBeLockedOut">
            <summary>
            Checks whether the user account will be locked out for the next logon attempt.
            </summary>
            <returns><c>true</c> if the user account will be locked out. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthenticationState.MustChangePasswordAtNextLogon">
            <summary>
            Checks whether the user must change the password at next logon.
            </summary>
            <returns><c>true</c> if the user must change the password at next logon. <c>false</c> otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAuthenticationState.ToString">
            <summary>
            Convert the state to a string value.
            </summary>
            <returns>the state as a string value.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAuthenticationStatus">
            <summary>
            Defines all the authentication status
            </summary>
            <remarks>
            Since Status can be a combination (bit-flag) of enum values, you can't use
            the equality operator to compare them. To test if an authentication has failed, you must use this syntax:
            <code lang="C#">
            if ((status &amp; VGAuthenticationStatus.Failure) == VGAuthenticationStatus.Failure)
            {
            	// Authentication has failed
            	if ((status &amp; VGAuthenticationStatus.PasswordDoesNotMatch) == VGAuthenticationStatus.PasswordDoesNotMatch)
            	{
            		// Invalid password
            	}
            }
            </code>
            <code lang="vb.net">o
            if (status And VGAuthenticationStatus.Failure) = VGAuthenticationStatus.Failure Then
            	' Authentication has failed
            	if (status And VGAuthenticationStatus.PasswordDoesNotMatch) = VGAuthenticationStatus.PasswordDoesNotMatch Then
            		// Invalid password ...
            	End If
            End If
            </code>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.Failure">
            <summary>
            The authentication fails.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserNotFound">
            <summary>
            The authentication fails. The user is not found in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordIsLocked">
            <summary>
            The authentication fails. The password is locked and must be unlocked by an administrator
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordDoesNotMatch">
            <summary>
            The authentication fails. The password does not match the password stored in the repository.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserNotAuthorized">
            <summary>
            The authentication fails. The user does not have any granted role for the application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserAccountExpired">
            <summary>
            The authentication fails. The user account is expired.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserAccountNotYetAvailable">
            <summary>
            The authentication fails. The user account is not yet available.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.ProcessCanceled">
            <summary>
            The authentication fails. The logon process has been canceled by the user.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.NotApproved">
            <summary>
            The authentication fails. The credential is not approved and cannot be authenticated.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.MustChangePasswordAtNextLogon">
            <summary>
            The authentication fails. The password must be changed during the logon process. You must call the method <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.ChangePassword(System.String,System.String,System.String,System.String)"/> before attempting to authenticate the user.
            </summary>
            <remarks>This value can be combined with <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordExpired"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordDoesNotPassValidation"/> when the password does not complies with the Password Policy and it is last grace logon.</remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.LastBadLogin">
            <summary>
            The authentication fails. The password does not match the password stored in the repository and
            if the next login attempt fails the account will be locked.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.Success">
            <summary>
            The authentication succeeds.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.LastGraceLogon">
            <summary>
            LastGraceLogon has been deprecated. The authentication succeeds but the password is expired and it is the last grace logon.
            If the password is not changed before next login attempt, the password will be locked.
            </summary>
            <remarks><see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.LastGraceLogon"/> is deprecated. When the password is expired and it is the last grace logon, Visual Guard sets the option 'MustChangedAtNexLogon' and returns the status: <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.Failure"/> | <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.MustChangePasswordAtNextLogon"/> | <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordExpired"/>. </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordExpired">
            <summary>
            The authentication succeeds if it is not the last grace logon or fails otherwise. The password is expired and must be changed.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordDoesNotPassValidation">
            <summary>
            The authentication succeeds if it is not the last grace logon or fails otherwise. The password does not pass the validation according to the password policy and must be changed
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.PasswordWillBeLocked">
            <summary>
            The authentication fails. The password will be locked for the next login attempt.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserNotFoundInCustomStorage">
            <summary>
            The authentication fails. User does not exist in Custom identity module storage
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserAccountDisabled">
            <summary>
            The authentication fails. User is disabled
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserAccountLocked">
            <summary>
            The authentication fails. User account is locked
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAuthorizationState">
            <summary>
            Defines the state of an authorization process.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAuthorizationState.#ctor(Novalys.VisualGuard.Security.VGAuthorizationStatus)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/>.
            </summary>
            <param name="status">The status of the authorization.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthorizationState.Status">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> corresponding to the authorization state.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthorizationState.IsFailed">
            <summary>
            Checks if the authorization process has failed
            </summary>
            <returns><c>true</c> if the authorization process has failed. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthorizationState.IsCanceled">
            <summary>
            Checks whether the authorization process has been canceled by the user.
            </summary>
            <returns><c>true</c> if the authorization process has been canceled. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthorizationState.IsUserNotFound">
            <summary>
            Checks whether the user is not found in the repository.
            </summary>
            <returns><c>true</c> if the user is invalid. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthorizationState.IsUserNotAuthorized">
            <summary>
            Checks whether the user is not authorized to access to the application (whether the user has no granted role).
            </summary>
            <returns><c>true</c> if the user is not authorized to access to the application. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGAuthorizationState.IsVersionNotCompatible">
            <summary>
            Checks whether the version of the permission is not compatible with the version of the application.
            </summary>
            <returns><c>true</c> the version of the permission is not compatible with the version of the application. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAuthorizationState.ToString">
            <summary>
            Returns the state as string.
            </summary>
            <returns>the state as string</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGAuthorizationState.ConvertToAuthenticationStatus">
            <summary>
            Converts the current <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> to a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationStatus"/> value.
            </summary>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationStatus"/> value corresponding to the authorization state.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGAuthorizationStatus">
            <summary>
            Defines all the authorization status
            </summary>
            <remarks>
            Since Status can be a combination (bit-flag) of enum values, you can't use
            the equality operator to compare them. To test if an authorization has failed, you must use this syntax:
            <code lang="C#">
            if ((status &amp; VGAuthorizationStatus.Failure) == VGAuthorizationStatus.Failure)
            {
            	// Authentication has failed
            	if ((status &amp; VGAuthorizationStatus.UserNotFound) == VGAuthorizationStatus.UserNotFound)
            	{
            		// The user is not found in the repository ...
            	}
            }
            </code>
            <code lang="vb.net">
            if (status And VGAuthorizationStatus.Failure) = VGAuthorizationStatus.Failure Then
            	' Authentication has failed
            	if (status And VGAuthorizationStatus.UserNotFound) = VGAuthorizationStatus.UserNotFound Then
            		' The user is not found in the repository ...
            	End If
            End If
            </code>
            </remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.Failure">
            <summary>
            The authorization fails.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.UserNotFound">
            <summary>
            The authorization fails. The user is not found in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.UserNotAuthorized">
            <summary>
            The authorization fails. The user does not have any granted role for the application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.ProcessCanceled">
            <summary>
            The authorization fails. The authorization process has been canceled by the user.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.Success">
            <summary>
            The authorization succeeds.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.VersionNotCompatible">
            <summary>
            The version of the permissions is not compatible with the application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.GroupSelectionInvalid">
            <summary>
            The group selection mode doesn't match or not exists.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.RoleSelectionInvalid">
            <summary>
            The role selection mode doesn't match or not exists.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGAuthorizationStatus.InProgress">
            <summary>
            Is in Progress if GroupSelection or RoleSelection is Invalid.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGCheckVersionEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.CheckVersion"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGCheckVersionEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGCheckVersionEventArgs">
            <summary>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.CheckVersion"/> event.
            </summary>    
            <example>
            This example display how to use the event <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.CheckVersion"/> to allow the user select a roles in the list of granted roles.
            <code lang="vb.net">
            Private Sub OnCheckVersion(ByVal sender As Object, ByVal e As VGCheckVersionEventArgs)
            	If e.Version &lt; new Version(1,2,0,0) Then
            		e.Cancel = true
            	End If
            End Sub
            </code>
            <code lang="C#">
            private void OnCheckVersion (object sender, VGCheckVersionEventArgs args)
            {
            	if (e.Version &lt; new Version(1,2,0,0))
                {
            		e.Cancel = true
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGCheckVersionEventArgs.#ctor(System.Version)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGCheckVersionEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="version">
            <para>The version of the permissions of the application.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGCheckVersionEventArgs.Version">
            <summary>
            <para>Gets the version of the permissions of the application.</para>
            </summary>
            <value>
            <para>The version of the permissions of the application.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGCheckVersionEventArgs.Cancel">
            <summary>
            Allows to cancel the authentication or authorization process.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGConfigurationException">
            <summary>
            Exception thrown when an error occurs during the initialization of Visual Guard.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGConfigurationException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGConfigurationException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGDebugOptions">
            <summary>
            Specifies whether debug information should be generated
            </summary>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityManager.GenerateDebugInformation"/>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGDebugOptions.Never">
            <summary>
            Visual Guard will never generate debug information
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGDebugOptions.OnlyWhenDebuggerAttached">
            <summary>
            Visual Guard will generate debug information only when a debugger is attached 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGDebugOptions.Always">
            <summary>
            Visual Guard will always generate debug information
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute">
            <summary>
            Specifies that an assembly, class, property or event is viewable in a Visual Guard editor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute"/> and sets its state to <see cref="F:Novalys.VisualGuard.Security.VGEditorBrowsableState.Always"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute.#ctor(Novalys.VisualGuard.Security.VGEditorBrowsableState)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute"/> and sets its state to <see cref="F:Novalys.VisualGuard.Security.VGEditorBrowsableState.Always"/>.
            </summary>
            <param name="state">A <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableState"/> indicating the item associated to this attribute is viewable in a Visual Guard editor. </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute.State">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableState"/> indicating if the associated item is viewable  in a Visual Guard editor.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute.Equals(System.Object)">
            <summary>
             Determines whether two <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute"/> instances are equal.
            </summary>
            <param name="obj">a <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute"/> object to compare with the current object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGEditorBrowsableState">
            <summary>
            Specifies the browsable state of a class, assembly, property or event from within a Visual Guard editor.
            </summary>
            <remarks>You can defines the browsable state of class, assembly, property or event by using the <see cref="T:Novalys.VisualGuard.Security.VGEditorBrowsableAttribute"/> class.</remarks>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGEditorBrowsableState.Always">
            <summary>
            the item is always browsable even if the <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> is set to false for this item.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGEditorBrowsableState.OnlyIfBrowsable">
            <summary>
            the item is browsable only if the <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> is set to true for this item.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGEditorBrowsableState.Never">
            <summary>
            the item is never browsable even if the <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> is set to true for this item.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGEditorBrowsableState.OnlyAtDesignTime">
            <summary>
            the item is browsable only at design time.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGGrantedApplication">
            <summary>
            Represents a class for 'granted application' to user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedApplication.ApplicationName">
            <summary>
            Application name
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.IsActive">
            <summary>
            Represente if the group is consedering for the application security.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.IsContextual">
            <summary>
            Can be selected by the user when the application has Single or Multiple selection
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.IsMultiUserProfileSupported">
            <summary>
            Represents if this group supports multi user profile value or not.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.InContextualTree">
            <summary>
            True if a group or one of its parent group has Contextual.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.IsActiveOnContext">
            <summary>
            True if either Active or is not InContextualTree.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedGroup.GetValue``1(System.Guid)">
            <summary>
            Gets profileattribute Value by attributeId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attributeId">attributeId</param>
            <returns>profileattribute Value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedGroup.GetValue(System.Guid)">
            <summary>
            Gets profileattribute Value by attributeId
            </summary>
            <param name="attributeId">profileAttributeId</param>
            <returns>profileattribute Value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedGroup.GetValue``1(System.String)">
            <summary>
            Gets profileAttribute Value by propertyName 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">propertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedGroup.GetValue(System.String)">
            <summary>
            Gets profileAttribute Value by propertyName
            </summary>
            <param name="propertyName">propertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.Item(System.String)">
            <summary>
            Gets or sets profileAttribute Value by attribute's propertyName.
            </summary>
            <param name="propertyName">attribute PropertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedGroup.Item(System.Guid)">
            <summary>
            Gets or sets profileAttribute Value by attribute's Id.
            </summary>
            <param name="attributeId"></param>
            <returns>Value for attribute</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGGrantedRole">
            <summary>
            Represents a Visual Guard role granted to a user.
            </summary>
            <remarks>You can use this class when you want to filter the list of granted role in the event <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedRole.#ctor(System.String,Novalys.VisualGuard.Security.Role.VGRoleId,System.Collections.Generic.List{Novalys.VisualGuard.Security.VGIPermissionSet},System.Collections.Generic.List{Novalys.VisualGuard.Security.Permission.VGIGrantedPermission},Novalys.VisualGuard.Security.CommonProfileAttribute.VGProfileValue.VGCommonProfileValueCollection,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGGrantedRole"/> class
            </summary>
            <param name="name">The name of the role.</param>
            <param name="id">The Visual Guard unique identifier of the role.</param>
            <param name="lstpermSet">A  list of <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> representing the permission sets granted to the role.</param>
            <param name="lstpermissions">A  list of <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> representing the permissions granted to the role.</param>
            <param name="profilevaluecollection">ProfileValueCollection representing the profile values of the role.</param>
            <param name="ownerId">The repository id of the principal for which this role is granted to.</param>
            <param name="isAssignDirectly">isAssignDirectly</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.Id">
            <summary>
            Gets the id of the granted role
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.Name">
            <summary>
            Gets the name of the granted role
            </summary>
            <remarks>the names of shared roles are prefixed by "#"</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.IsSharedRole">
            <summary>
            Gets a boolean value indicating if the current role is a shared role
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedRole.ToString">
            <summary>
            Converts the granted role to a string value.
            </summary>
            <returns>A string value representing the role.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.PermissionSets">
            <summary>
            Gets the list of permissionset assigned to the granted role
            </summary>
            <value>A <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> object representing the permission set granted to the role. <c>null</c> (or <c>Nothing</c>) is there is no permission set granted to this role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.Permissions">
            <summary>
            Gets the list of permissions directly assigned to the granted role
            </summary>
            <value>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object representing the permission granted to the role. <c>null</c> (or <c>Nothing</c>) is there is no permission granted to this role.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.OwnerId">
            <summary>
            Represents the repository id of the principal for which this role is granted to.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.RepositoryId">
            <summary>
            Gets the unique identifier from the repository for the role.
            </summary>
            <value>the unique identifier from the repository for the role.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedRole.GetValue``1(System.Guid)">
            <summary>
            Gets profileattribute Value by attributeId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attributeId">attributeId</param>
            <returns>profileattribute Value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedRole.GetValue(System.Guid)">
            <summary>
            Gets profileattribute Value by attributeId
            </summary>
            <param name="attributeId">profileAttributeId</param>
            <returns>profileattribute Value</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedRole.GetValue``1(System.String)">
            <summary>
            Gets profileAttribute Value by propertyName 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">propertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGrantedRole.GetValue(System.String)">
            <summary>
            Gets profileAttribute Value by propertyName
            </summary>
            <param name="propertyName">propertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.Item(System.String)">
            <summary>
            Gets or sets profileAttribute Value by attribute's propertyName.
            </summary>
            <param name="propertyName">attribute PropertyName</param>
            <returns>Value for attribute</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGrantedRole.Item(System.Guid)">
            <summary>
            Gets or sets profileAttribute Value by attribute's Id.
            </summary>
            <param name="attributeId"></param>
            <returns>Value for attribute</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGGroupsLoadingEventHandler">
            <summary>
            Represents the method that handles a <see cref="!:VGSecurityManager.GroupSelectionLoading"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs.#ctor(System.Security.Principal.IIdentity,Novalys.VisualGuard.Security.VGGrantedGroup[],Novalys.VisualGuard.Security.VGAuthorizationStatus,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="roles">
            <para>The list of <see cref="T:Novalys.VisualGuard.Security.VGGrantedGroup"/> corresponding to the list of groups for the given identity.</para>
            </param>
            <param name="identity">
            <para>The <see cref="T:System.Security.Principal.IIdentity"/> corresponding to the user for which the groups will be loaded.</para>
            </param>
            <param name="repositoryId">the repository id of the user for which the groups will be loaded.</param>
            <param name="status">The <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> representing the status of the current authorization process.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs.Identity">
            <summary>
            <para>Gets the <see cref="T:System.Security.Principal.IIdentity"/> representing the user for which the groups will be loaded.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Security.Principal.IIdentity"/> representing the user for which the groups will be loaded.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs.RepositoryId">
            <summary>
            <para>Gets the Visual Guard Repository Id of the user for which the groups will be loaded.</para>
            </summary>
            <value>
            <para>The Visual Guard Repository Id of the user for which the groups will be loaded.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs.Status">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> representing the status of the current authorization process.</para>
            </summary>
            <value>
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> value representing the status of the current authorization process.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs.SelectedContextualGroups">
            <summary>
            <para>Gets or sets the list of <see cref="T:Novalys.VisualGuard.Security.VGGrantedGroup"/> corresponding to groups granted to the user.</para>
            </summary>
            <remarks>if the value is an empty array, <see cref="P:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs.Status"/> is automatically set to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserNotAuthorized"/></remarks>
            <exception cref="T:System.ArgumentNullException">the value cannot be a null reference.</exception>
            <exception cref="T:System.ArgumentException">each group must already exist in the initial list.</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGIIdentity">
            <summary>
            Defines basic functionality of a Visual Guard identity.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIIdentity.IsAnonymous">
            <summary>
            Indicates if the Visual Guard identity is anonymous.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGInvalidActionException">
            <summary>
            Exception thrown when an action generates an exception.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidActionException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGInvalidActionException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidActionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGInvalidActionException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidActionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGInvalidRepositoryException">
            <summary>
            Exception thrown when the repository containing the security information cannot not be found.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidRepositoryException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGInvalidRepositoryException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidRepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGInvalidRepositoryException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidRepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGInvalidTargetTypeException">
            <summary>
            Exception thrown when an action must be executed on a target and the target type cannot be found in the current application domain.
            </summary>
            <remarks>If this exception is thrown in your application, you must correct the action by using the Visual Guard console. You can check the all actions defined in a repository by right-clicking the application and selecting the option "Action/Check Actions...".</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidTargetTypeException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGInvalidTargetTypeException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidTargetTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGInvalidTargetTypeException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGInvalidTargetTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGIPermission">
            <summary>
            Defines the basic functionality for a Visual Guard permission.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.Attributes">
            <summary>
            Gets or sets the attributes (arguments) list of the permission
            </summary>
            <remarks>this attribute list is defined at design time by using the Visual Guard console. To edit the attributes list, you must use the menu option 'Action>Edit arguments list' when the permission is selecting.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.Id">
            <summary>
            Gets the unique Visual Guard identifier of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.IdOrOriginalId">
            <summary>
            Gets the unique Visual Guard identifier that will be see in the application
            </summary>
            <remarks>returns the original id if it is a new version of another permission.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.Name">
            <summary>
            Gets the name of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.FullName">
            <summary>
            Gets the Full Name of the permission, including the folder path
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.Description">
            <summary>
            Gets the description of the permission
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.Item(System.String)">
            <summary>
            Gets the value of the attribute specified by its name.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermission.OriginalId">
            <summary>
            Gets the unique Visual Guard identifier of the original permission when the permission is a new version of another permission
            </summary>
            <value>the unique Visual Guard identifier of the original permission when the permission is a new version of another permission. When the permission is the original permission, the value is equal to <see cref="F:System.Guid.Empty"/>.</value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGIPermissionAttribute">
            <summary>
            Represents an attribute (argument) of a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object.
            </summary>
            <remarks>This attribute can be defined at design time by using the Visual Guard console. To edit the attributes list, you must use the menu option 'Action>Edit arguments list' when the permission is selected.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionAttribute.Name">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionAttribute.Description">
            <summary>
            Gets the description of the attribute.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
            <example>
            <p>This example modify the argument Country of the permission '\Common\Display only information on a country'</p>
            <code lang="vb.net">
            Dim PermId As Guid = New Guid("975d80d8-b23f-4226-8cc8-ce2965e59e8c") ' Id of the permission "\Common\Display only information on a country"
            ' Checks if the permission is granted to the current user and gets the argument value assign to this permission
            If Not VGSecurityManager.Principal.HasPermission(PermId) Then
                MessageBox.Show("The permssion '\Common\Display only information on a country' is not granted to the current user")
            Else
                Dim myPerm As VGIPermission = VGSecurityManager.Principal.GetPermission(PermId)
                Dim attr As VGIPermissionAttribute = myPerm.Attributes.GetAttributeByName("Country")
                attr.Value = "France"
                MessageBox.Show("The current user can now see information about the country 'France'")
            End If
            </code>
            <code lang="C#">
            Guid PermId = new Guid("975d80d8-b23f-4226-8cc8-ce2965e59e8c");
            // Id of the permission "\Common\Display only information on a country"
            // Checks if the permission is granted to the current user and gets the argument value assign to this permission
            if (!VGSecurityManager.Principal.HasPermission(PermId))
            {
                MessageBox.Show("The permssion '\\Common\\Display only information on a country' is not granted to the current user");
            }
            else
            {
                VGIPermission myPerm = VGSecurityManager.Principal.GetPermission(PermId);
                VGIPermissionAttribute attr = myPerm.Attributes.GetAttributeByName("Country");
                attr.Value = "France";
                MessageBox.Show("The current user can now see information about the country 'France'");
            }
            </code>
            </example>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionAttribute.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionAttribute.Id">
            <summary>
            Gets the id of the attribute.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGIPermissionSet">
            <summary>
            Represents a collection of Visual Guard permissions. This collection can contain <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> or <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> objects.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionSet.Name">
            <summary>
            Gets the name of the permission set
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionSet.Id">
            <summary>
            Gets the Visual Guard unique identifier of the permission set
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionSet.Description">
            <summary>
            Gets the description of the permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionSet.Permissions">
            <summary>
            Gets the list of permissions granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionSet.PermissionSets">
            <summary>
            Gets the list of permission sets granted to this permission set.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPermissionSet.CanBeGrantedToRole">
            <summary>
            Gets a value indicating if this permission set can be granted to a role.
            </summary>
            <value><c>true</c> if the permission set can be granted to a role. <c>false</c> if the permission set must be only granted to a permission set and not directly to a role.</value>
            <remarks>this property is used only at design time in the Visual Guard console to allow or disallow a user to grant the permission set to a role.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPermissionSet.GetPermission(System.String)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified name.
            </summary>
            <param name="permissionName">The name identifying the permission.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.</returns>
            <example><P>The following example gets the permission "Disable customer edition" contained in the folder "Customers" granted to the permission set "HR permissions".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions").GetPermission("\Customers\Disable customer edition")</code>
            </example>
            <remarks>This method does not look for permission in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPermissionSet.GetPermission(System.Guid)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.
            </summary>
            <param name="permissionId">The <see cref="T:System.Guid"/> identifying the permission</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.</returns>
            <example><P>The following example gets the permission identified by the guid "5F0BAF21-A66C-4b27-9E9E-CCAE72226613" granted to the permission set "HR permissions".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions").GetPermission(new Guid("{5F0BAF21-A66C-4b27-9E9E-CCAE72226613}"))</code>
            </example>
            <remarks>This method does not look for permission in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPermissionSet.GetPermissionSet(System.String)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> object with the specified name.
            </summary>
            <param name="permissionSetName">The name identifying the permission set.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermissionSet"/> object with the specified id.</returns>
            <example><P>The following example gets the permission set "HR permissions".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions")</code>
            </example>
            <remarks>This method does not look for permission set in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPermissionSet.GetPermissionSet(System.Guid)">
            <summary>
            Gets the a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.
            </summary>
            <param name="permissionSetId">The <see cref="T:System.Guid"/> identifying the permission set</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object with the specified id.</returns>
            <example><P>The following example gets the permission set identified by the guid "5F0BAF21-A66C-4b27-9E9E-CCAE72226613".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermissionSet("HR permissions").GetPermission(new Guid("{5F0BAF21-A66C-4b27-9E9E-CCAE72226613}"))</code>
            </example>
            <remarks>This method does not look for permission set in sub permission sets.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPermissionSet.GetAllPermissions">
            <summary>
            Gets all permissions granted to the permission set
            </summary>
            <returns>An array of <see cref="T:Novalys.VisualGuard.Security.Permission.VGIGrantedPermission"/> granted to the permission set</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGIPrincipal">
            <summary>
            Defines the basic functionality of a Visual Guard principal
            </summary>
            <remarks>A <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> object is returned by the <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.Principal"/> and represents the current logged-on user.</remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/>
            <seealso cref="T:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.Identity">
            <summary>
            Gets the identity of the current principal.
            </summary>
            <value>The <see cref="T:System.Security.Principal.IIdentity"/> object associated with the current principal.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.IsInRole(System.Guid)">
            <summary>
            Determines whether the current principal belongs to the role with the specified id.
            </summary>
            <param name="roleId">The <see cref="T:System.Guid"/> identifying the role for which to check membership.</param>
            <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.Roles">
            <summary>
            Gets the list of roles of current application granted to the user
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.GetPermission(System.String)">
            <summary>
            Gets the specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object.
            </summary>
            <param name="fullname">The full name of the permission, including the folder path.</param>
            <returns>The specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object if the permission is granted to the principal. Returns null (Nothing in VB) if the permission is not granted or it does not exist.</returns>
            <example>
            <P>The following example gets the permission "My permission" stored in the root of permissions.</P>
            <code lang="vb.net">
            Dim myPerm as VGIPermission = VGSecurityManager.Principal.GetPermission("My permission")
            If myPerm is Nothing Then
                ' the permission is not granted ...
            Else
                Dim myValue as String = CType(myPerm(myValue), String)
            End If
            </code>
            <code lang="C#">
            VGIPermission myPerm = VGSecurityManager.Principal.GetPermission("My permission")
            if (myPerm == null)
            {
                // the permission is not granted ...
            }
            Else
            {
                string myValue (string)myPerm[myValue];
            }
            </code>
            <P>The following example gets the permission "Disable Edition" contained in the folder "Customer".</P>
            <code lang="CSharp">VGSecurityManager.Principal.GetPermission(@"\Customers\Disable Edition")</code>
            </example>
            <remarks>this method is not case sensitive</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.GetPermission(System.Guid)">
            <summary>
            Gets the specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission</param>
            <returns>The specified <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object if the permission is granted to the principal. Returns null (Nothing in VB) if the permission is not granted or it does not exist.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.RepositoryId">
            <summary>
            Gets the Visual Guard unique ID for this principal
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.CanAccessApplication(System.String)">
            <summary>
            Gets if principal has access for particular application or not.
            </summary>
            <param name="applicationName">Name of the application to check</param>
            <returns>True if principal has access for particular application else false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.CanAccessApplication(System.Guid)">
            <summary>
            Gets if principal has access for particular application or not.
            </summary>
            <param name="applicationId">Id of the application to check</param>
            <returns>True if principal has access for particular application else false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.CanAccessApplication(Novalys.VisualGuard.Security.Membership.VGApplication)">
            <summary>
            Gets if principal has access for particular application or not.
            </summary>
            <param name="application">VGApplication object to check</param>
            <returns>True if principal has access for particular application else false. </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.SelectContextualGroups(System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedGroup})">
            <summary>
            This method applies selection of contextual groups to principal.
            </summary>
            <param name="groups"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.SelectContextualGroups(System.Collections.Generic.List{Novalys.VisualGuard.Security.VGContextualGroup})">
            <summary>
            This method applies selection of contextual groups to principal.
            </summary>
            <param name="groups">Return status on selection</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.SelectContextualGroup(Novalys.VisualGuard.Security.VGContextualGroup)">
            <summary>
            This method applies selection of contextual group to principal.
            </summary>
            <param name="group">Return status on selection</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.SelectContextualRole(Novalys.VisualGuard.Security.VGGrantedRole)">
            <summary>
            This method applies selection of contextual role to principal.
            </summary>
            <param name="role">Return status on selection</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.SelectContextualRoles(System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedRole})">
            <summary>
            This method applies selection of contextual roles to principal.
            </summary>
            <param name="roles">Return status on selection</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.SelectContextualRoles(Novalys.VisualGuard.Security.VGSecurityRuntime,System.Collections.Generic.List{Novalys.VisualGuard.Security.VGGrantedRole})">
            <summary>
            This method applies selection of contextual roles to principal.
            </summary>
            <param name="roles">Return status on selection</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.HasPermission(System.String)">
            <summary>
            Checks whether the specified permission is granted to the principal.
            </summary>
            <param name="fullname">The full name of the permission, including the folder path.</param>
            <returns>true if the principal has the permission, false otherwise</returns>
            <example>
            <P>The following example checks whether the permission "My permission" stored in the root of permissions is granted to the current user.</P>
            <code lang="vb.net">
            If not VGSecurityManager.Principal.HasPermission("My permission") Then
                ' the permission is not granted ...
            End If
            </code>
            <code lang="C#">
            if (!VGSecurityManager.Principal.HasPermission("My permission"))
            {
                // the permission is not granted ...
            }
            </code>
            <P>The following example checks whether the permission "Disable Edition" contained in the folder "Customer" is granted to the current user.</P>
            <code lang="CSharp">VGSecurityManager.Principal.HasPermission(@"\Customers\Disable Edition")</code>
            </example>
            <remarks>this method is not case sensitive</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.HasPermission(System.Guid)">
            <summary>
            Checks whether the specified permission is granted to the principal.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission</param>
            <returns>true if the principal has the permission, false otherwise</returns>
            <example>
            <P>The following example checks whether the permission "{AEE3A747-05FB-4f90-BD3A-EF872E4D3211}" is granted to the current user.</P>
            <code lang="vb.net">
            If not VGSecurityManager.Principal.HasPermission(new Guid ("AEE3A747-05FB-4f90-BD3A-EF872E4D3211")) Then
                ' the permission is not granted ...
            End If
            </code>
            <code lang="C#">
            if (!VGSecurityManager.Principal.HasPermission(new Guid ("AEE3A747-05FB-4f90-BD3A-EF872E4D3211")))
            {
                // the permission is not granted ...
            }
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.HasPermission(System.Guid,System.Boolean)">
            <summary>
            Checks whether the specified permission is granted to the principal.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission</param>
            <param name="includeVGPermissions">If you include a VGPermissions</param>
            <returns>true if the principal has the permission, false otherwise</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.MembershipPermission">
            <summary>
            Gets a value that indicates whether the current user can use Membership API to edit, create, delete or assign role to users for the current application
            </summary>
            <value>When the Membership Permissions are disabled, the value is always <see cref="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AllAccess"/>. When Membership Permssions are enabled, if the user is member of the 'Membership Manager' role, this property is equal to <see cref="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AllAccess"/>, otherwise the property is equal to <see cref="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.NoAccess"/></value>
            <remarks>This property allows to check whether the user can use Membership API. .
            <para>You can enabled Membership permissions by using the Visual Guard console and setting the property "Membership Permissions Enabled" to true for the application.</para></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.TryGetPermission(System.Guid,Novalys.VisualGuard.Security.VGIPermission@)">
            <summary>
            Retrieves the <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object granted to principal with the specified id.
            </summary>
            <param name="id">The Visual Guard unique identifier of the permission to get.</param>
            <param name="permission">When this method returns, contains the permission associated with the specified id, if the id corespond to a granted permission; otherwise, null.</param>
            <returns>true if the permission corresponding to the specified id is granted to the principal. Otherwise false if the permission is not granted or does not exist.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.TryGetPermission(System.String,Novalys.VisualGuard.Security.VGIPermission@)">
            <summary>
            Retrieves the <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/> object granted to principal with the specified name.
            </summary>
            <param name="fullname">The full name of the permission, including the folder path.</param>
            <param name="permission">When this method returns, contains the permission whut the specified name, if the name correspond to a granted permission; otherwise, null.</param>
            <returns>true if the permission corresponding to the specified name is granted to the principal. False if the permission is not granted or does not exist.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.Runtime">
            <summary>
            Returns the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used to manage the principal.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGIPrincipal.GetAllCurrentPermissions">
            <summary>
            Return all permission for current application
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.ProfileValues">
            <summary>
            Get User Profile values of the current user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.GrantedGroups">
            <summary>
            This property contains all granted groups to the user.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.Groups">
            <summary>
            This property contains all granted groups which are Active.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.ContextualGroups">
            <summary>
            This property contains all contextual groups which are selectable.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGIPrincipal.SelectedContextualGroups">
            <summary>
            This property contains contextual groups which are selected.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGISecurable">
            <summary>
            Provides an interface for classes that need to be secured by Visual Guard.
            </summary>
            <remarks>If you add this interface to a class, this class will be visible at design time in the Visual Guard Console. By default Visual Guard automatically intercepts Forms creation and sets the security. The automatic interception is disabled for classes implementing this interface (like Form, Page, MasterPage).
            <para>For more information, see  <a href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</a></para></remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityManager.AllowAutomaticInterception"/>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGMembershipPermissionAccess">
            <summary>
            Specifies access to Membership api
            </summary>
            <seealso cref="P:Novalys.VisualGuard.Security.VGIPrincipal.MembershipPermission"/>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.NoAccess">
            <summary>
            No access to Membership API
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.Read">
            <summary>
            Ability to use Membership API to read information about the users of the application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AddUser">
            <summary>
            Ability to use Membership API to create a new user and assign the default role of the application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.Delete">
            <summary>
            Ability to use Membership API to delete a users from the list of member of the application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.Update">
            <summary>
            Ability to use Membership API to update a user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AssignRoles">
            <summary>
            Ability to use Membership API to grant or revoke a role to a user
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AssignMembershipPermissions">
            <summary>
            Ability to use Membership API to grant membership permission to a user.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AddRole">
            <summary>
            Ability to add a role to the application.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.UpdateRole">
            <summary>
            Ability to modify an existing role.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.DeleteRole">
            <summary>
            Ability to delete an existing role.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGMembershipPermissionAccess.AllAccess">
            <summary>
            Ability to use Membership API to edit, create, delete and assign roles
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGMemberShipUserState">
            <summary>
            Indicates the state of the Visual Guard user . 
            </summary>
            The authentication mode is used by the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            You can also see the authentication mode supported by a repository by using the <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.SupportedAuthenticationModes"/> properties.
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPasswordModificationState">
            <summary>
            Defines the state of a password modification process.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPasswordModificationState.#ctor(Novalys.VisualGuard.Security.VGPasswordModificationStatus)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationState"/>.
            </summary>
            <param name="status">The status of the modification.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.Status">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> corresponding to the modification state.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.IsFailed">
            <summary>
            Checks if the modification process has failed
            </summary>
            <returns><c>true</c> if the modification process has failed. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.UserAccountDoesNotExist">
            <summary>
            Checks whether the user account does not exist in the repository.
            </summary>
            <returns><c>true</c> if the user account does not exist in the repository. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.IsUserAccountLockedOut">
            <summary>
            Checks whether the user account is locked out.
            </summary>
            <returns><c>true</c> if the user account is locked out. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.OldPasswordDoesNotMatch">
            <summary>
            Checks whether the password does not match the password stored in the repository.
            </summary>
            <returns><c>true</c> if the password does not match. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.IsLastBadLogin">
            <summary>
            Checks whether the next bad logon attempt will lock out the user account.
            </summary>
            <returns><c>true</c> if the next bad logon attempt will lock out the user account. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.PasswordConfirmationDoesNotMatch">
            <summary>
            Checks whether the Password Confirmation does not match the new password.
            </summary>
            <returns><c>true</c> if the Password Confirmation does not match. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.NewPasswordDoesNotPassValidation">
            <summary>
            Checks whether the Password Confirmation does not match the new password.
            </summary>
            <returns><c>true</c> if the Password Confirmation does not match. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.PasswordHistoryDoesNotPassValidation">
            <summary>
            The password modification fails as the password exists in password history
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.PasswordLengthDoesNotPassValidation">
            <summary>
            The password modification fails as the password length does not meet.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordModificationState.PasswordComplexityDoesNotPassValidation">
            <summary>
            The password modification fails as the password complexity could not meet. For instance, reguar expression, special characters, etc.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus">
            <summary>
            Defines all the password modification status
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.Success">
            <summary>
            The password modification succeeds. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.Failure">
            <summary>
            The password modification fails. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.OldPasswordDoesNotMatch">
            <summary>
            The password modification fails. Old password does not match the password stored in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.LastBadLogin">
            <summary>
            The password modification fails. The password does not match the password stored in the repository and
            if the next logon fails the account will be locked.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.AccountIsLockedOut">
            <summary>
            The password modification fails. The current password is locked out and must be unlocked by an administrator before changing the password
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.PasswordConfirmationDoesNotMatch">
            <summary>
            The password modification fails. The password confirmation does match with the new password.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.UserNotFound">
            <summary>
            The password modification fails. The user is not found in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.NewPasswordDoesNotPassValidation">
            <summary>
            The password modification fails. The new password does not pass the validation according to the password policy
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.PasswordAnswerDoesNotMatch">
            <summary>
            The password modification fails. The password answer does match the answer stored in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.ChangePasswordRequestKeyNotMatch">
            <summary>
            The password modification fails as the requested key could not match with the generated key.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.ChangePasswordRequestExpired">
            <summary>
            The password modification fails as the requested time duration expired
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.ChangePasswordRequestNotExists">
            <summary>
            The password modification fails as the claim doesn not exists. This could be because password is already generated or generating with invalid request.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.PasswordHistoryDoesNotPassValidation">
            <summary>
            The password modification fails as the password exists in password history
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.PasswordLengthDoesNotPassValidation">
            <summary>
            The password modification fails as the password length does not meet.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordModificationStatus.PasswordComplexityDoesNotPassValidation">
            <summary>
            The password modification fails as the password complexity could not meet. For instance, reguar expression, special characters, etc.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState">
            <summary>
            Defines the state of a password modification process.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.#ctor(Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState"/>.
            </summary>
            <param name="status">The status of the modification.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.Status">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus"/> corresponding to the modification state.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.IsFailed">
            <summary>
            Checks if the modification process has failed
            </summary>
            <returns><c>true</c> if the modification process has failed. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.UserAccountDoesNotExist">
            <summary>
            Checks whether the user account does not exist in the repository.
            </summary>
            <returns><c>true</c> if the user account does not exist in the repository. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.IsUserAccountLockedOut">
            <summary>
            Checks whether the user account is locked out.
            </summary>
            <returns><c>true</c> if the user account is locked out. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.PasswordDoesNotMatch">
            <summary>
            Checks whether the password does not match the password stored in the repository.
            </summary>
            <returns><c>true</c> if the password does not match. <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState.IsLastBadLogin">
            <summary>
            Checks whether the next bad logon attempt will lock out the user account.
            </summary>
            <returns><c>true</c> if the next bad logon attempt will lock out the user account. <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus">
            <summary>
            Defines all the password question and answer modification status
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.Success">
            <summary>
            The modification succeeds. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.Failure">
            <summary>
            The modification fails. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.PasswordDoesNotMatch">
            <summary>
            The modification fails. The given password does not match the password stored in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.LastBadLogin">
            <summary>
            The modification fails. The given password does not match the password stored in the repository and
            if the next authentication fails the account will be locked.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.AccountIsLockedOut">
            <summary>
            The modification fails. The user account is locked out and must be unlocked by an administrator before changing the password question and answer.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.UserNotFound">
            <summary>
            The modification fails. The user is not found in the repository
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationStatus.ProviderError">
            <summary>
            When the identity module does not have an interfaces requirements
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPermissionAttributeCollection">
            <summary>
            Represents a collection of <see cref="T:Novalys.VisualGuard.Security.VGIPermissionAttribute"/> associated to a <see cref="T:Novalys.VisualGuard.Security.VGIPermission"/>.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.#ctor(Novalys.VisualGuard.Security.VGIPermissionAttribute[])">
            <summary>
            Creates a new instance of a <see cref="T:Novalys.VisualGuard.Security.VGPermissionAttributeCollection"/>.
            </summary>
            <param name="values">an array of <see cref="T:Novalys.VisualGuard.Security.VGIPermissionAttribute"/> containing the list of property and the values.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.GetAllAttributes">
            <summary>
            Gets an array of <see cref="T:Novalys.VisualGuard.Security.VGIPermissionAttribute"/> objects stored in the collection.
            </summary>
            <returns>an array of <see cref="T:Novalys.VisualGuard.Security.VGIPermissionAttribute"/>.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.Item(System.Int32)">
            <summary>
            Gets the value of the indexed attribute.
            </summary>
            <value>the value of the attribute if found, null (Nothing) otherwise.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was out of range. Must be non-negative and less than the size of the collection.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.Item(System.String)">
            <summary>
            Gets the value of the attribute specified by its name.
            </summary>
            <value>the value of the attribute if found, null (Nothing) otherwise.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.GetKeyAtIndex(System.Int32)">
            <summary>
            Gets the name of the attribute corresponding to the specified index
            </summary>
            <param name="index">Index of the key.</param>
            <returns>The name of the attribute at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> was out of range. Must be non-negative and less than the size of the collection.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.Item(System.Guid)">
            <summary>
            Gets the value of the attribute specified by its id.
            </summary>
            <value>the value of the attribute if found, null (Nothing) otherwise.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.GetAttributeByName(System.String)">
            <summary>
            Gets the attribute specified by its name.
            </summary>
            <param name="name">the name of the attribute to look for.</param>
            <returns>The attribute if found, null (Nothing) otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.GetAttributeById(System.Guid)">
            <summary>
            Gets the attribute specified by its id.
            </summary>
            <param name="id">The ID of the attribute to look for</param>
            <returns>The attribute if found, null (Nothing) otherwise</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.Contains(System.String)">
            <summary>
            Determines whether the specified argument is in the collection
            </summary>
            <param name="name">The argument to locate in the collection</param>
            <returns>true if value is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.Contains(System.Guid)">
            <summary>
            Determines whether the specified argument is in the collection
            </summary>
            <param name="id">The argument id to locate in the collection</param>
            <returns>true if value is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionAttributeCollection.Clone">
            <summary>
            Duplicates the current object.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs">
            <summary>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event.
            </summary>    
            <example>
            This example display how to use the event <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> to allow the user select a roles in the list of granted roles.
            <code lang="vb.net">
            Private Sub OnPermissionLoading(ByVal sender As Object, ByVal e As VGPermissionsLoadingEventArgs)
            	If e.Roles.Length &gt; 0 Then
            		Dim form As New SelectRoleForm
            		form.Roles = e.Roles
            		If form.ShowDialog() = DialogResult.OK Then
            			e.Roles = form.Roles
            		Else
            			e.Status = VGAuthorizationStatus.Failure Or VGAuthorizationStatus.ProcessCanceled;
            		End If
            	End If
            End Sub
            </code>
            <code lang="C#">
            private void OnPermissionLoading (object sender, VGPermissionsLoadingEventArgs args)
            {
            	if (e.Roles.Length &gt; 0)
            		SelectRoleForm form = new SelectRoleForm();
            		form.Roles = e.Roles;
            		if (form.ShowDialog() == DialogResult.OK)
            		{
            			e.Roles = form.Roles;
            		}
            		else
            		{
            			e.Status = VGAuthorizationStatus.Failure | VGAuthorizationStatus.ProcessCanceled;
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs.#ctor(System.Security.Principal.IIdentity,Novalys.VisualGuard.Security.VGGrantedRole[],Novalys.VisualGuard.Security.VGAuthorizationStatus,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="roles">
            <para>The list of <see cref="T:Novalys.VisualGuard.Security.VGGrantedRole"/> corresponding to the list of roles for the given identity.</para>
            </param>
            <param name="identity">
            <para>The <see cref="T:System.Security.Principal.IIdentity"/> corresponding to the user for which the permission will be loaded.</para>
            </param>
            <param name="repositoryId">the repository id of the user for which the permission will be loaded.</param>
            <param name="status">The <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> representing the status of the current authorization process.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs.Identity">
            <summary>
            <para>Gets the <see cref="T:System.Security.Principal.IIdentity"/> representing the user for which the permission will be loaded.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Security.Principal.IIdentity"/> representing the user for which the permission will be loaded.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs.RepositoryId">
            <summary>
            <para>Gets the Visual Guard Repository Id of the user for which the permission will be loaded.</para>
            </summary>
            <value>
            <para>The Visual Guard Repository Id of the user for which the permission will be loaded.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs.Status">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> representing the status of the current authorization process.</para>
            </summary>
            <value>
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationStatus"/> value representing the status of the current authorization process.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs.Roles">
            <summary>
            <para>Gets or sets the list of <see cref="T:Novalys.VisualGuard.Security.VGGrantedRole"/> corresponding to roles granted to the user.</para>
            </summary>
            <remarks>if the value is an empty array, <see cref="P:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs.Status"/> is automatically set to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationStatus.UserNotAuthorized"/></remarks>
            <exception cref="T:System.ArgumentNullException">the value cannot be a null reference.</exception>
            <exception cref="T:System.ArgumentException">each role must already exist in the initial list.</exception>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPermissionType">
            <summary>
            Specifies the type of the item (role or permission) checked by the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/> object.
            </summary>
            <seealso cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/>
            <seealso cref="T:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute"/>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPermissionType.Role">
            <summary>
            Specifies that the type of the item to check is a role.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGPermissionType.Permission">
            <summary>
            Specifies that the type of the item to check is a permission.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPermissionVersionNotSupportedException">
            <summary>
            Exception thrown when the version of the permissions stored in the repository is not supported by the application.
            </summary>
            <remarks>You can check the version of permissions by handling the event <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.CheckVersion"/></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionVersionNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGPermissionVersionNotSupportedException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionVersionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGPermissionVersionNotSupportedException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPermissionVersionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPrincipalPermission">
            <summary>
            Allows checks against the current principal (see <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.Principal"></see>) using the language constructs defined for both declarative and imperative security actions.
            </summary>
            <remarks>This class can be used in place of the <see cref="T:System.Security.Permissions.PrincipalPermission"/> class and allows to check whether a Visual Guard permission or role is granted to the current Visual Guard principal.</remarks>
            <seealso cref="T:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute"/>
            <seealso cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/>
            <seealso cref="T:System.Security.Permissions.PrincipalPermission"/>
            <seealso href="../ApplySecurityInYourApp.htm">How to apply security in your application</seealso>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"></see> class with the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.</summary>
            <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values. </param>
            <exception cref="T:System.ArgumentException">The state parameter is not a valid <see cref="T:System.Security.Permissions.PermissionState"></see>. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.IsUnrestricted">
            <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
            <returns>true if the current permission is unrestricted; otherwise, false.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.#ctor(System.String,Novalys.VisualGuard.Security.VGPermissionType)">
            <summary>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/> class for the specified role or permission.</summary>
            <param name="name">The name of the role or the fullname of the permission for which to check membership. This value is not case sensitive.</param>
            <param name="type">the type of the item to check (role or permission)</param>
            <remarks>When the user is not authenticated the permission will throw a security exception.
            <para>If you want to check a permission, you have to use the full name of the permission. When the permission is stored in the root permission folder, the full name of the permission is equal to the permisison name.
            When the permission is stored in a sub permission folder, the full name is equal to "\&lt;sub folder name&gt;\&lt;\...\permission name name&gt;".</para>
            <para>For example the full name of the "Disallow to administrate customers" permission stored in the "Customers" folder is equal to "\Customers\Disallow to administrate customers" </para>.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.#ctor(System.String,Novalys.VisualGuard.Security.VGPermissionType,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/> class for the specified role or permission.</summary>
            <param name="name">The name of the role or the fullname of the permission for which to check membership. This value is not case sensitive.</param>
            <param name="type">the type of the item to check (role or permission)</param>
            <param name="isAuthenticated">true to signify that the user is authenticated; otherwise, false.</param>
            <remarks>When <paramref name="isAuthenticated"/> is equal to false, <paramref name="name"/> is ignored.
            <para>If you want to check a permission, you have to use the full name of the permission. When the permission is stored in the root permission folder, the full name of the permission is equal to the permission name.
            When the permission is stored in a sub permission folder, the full name is equal to "\&lt;sub folder name&gt;\&lt;\...\permission name name&gt;".</para>
            <para>For example the full name of the "Disallow to administrate customers" permission stored in the "Customers" folder is equal to "\Customers\Disallow to administrate customers" </para>.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.#ctor(System.Guid,Novalys.VisualGuard.Security.VGPermissionType)">
            <summary>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/> class for the specified role or permission.</summary>
            <param name="repositoryId">The Visual Guard unique identifier of the role or the permission for which to check membership.</param>
            <param name="type">the type of the item to check (role or permission)</param>
            <remarks>When the current principal is null or not authenticated the permission will throw a security exception.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.#ctor(System.Guid,Novalys.VisualGuard.Security.VGPermissionType,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"/> class for the specified role or permission.</summary>
            <param name="repositoryId">The Visual Guard unique identifier of the role or the permission for which to check membership.</param>
            <param name="type">the type of the item to check (role or permission)</param>
            <param name="isAuthenticated">true to signify that the user is authenticated; otherwise, false.</param>
            <remarks>When <paramref name="isAuthenticated"/> is equal to false, <paramref name="repositoryId"/> is ignored.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.Copy">
            <summary>Creates and returns an identical copy of the current permission.</summary>
            <returns>A copy of the current permission.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.Demand">
            <summary>Determines at run time whether the current Visual Guard principal matches the principal specified by the current permission.</summary>
            <exception cref="T:System.Security.SecurityException">The current principal does not pass the security check for the principal specified by the current permission.
            <para>-or-</para>
            The current <see cref="T:System.Security.Principal.IPrincipal"></see> is null. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.Intersect(System.Security.IPermission)">
            <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
            <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission will be null if the intersection is empty.</returns>
            <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
            <exception cref="T:System.ArgumentException">The target parameter is not null and is not an instance of the same class as the current permission. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object is equal to the current <see cref="T:System.Security.Permissions.PrincipalPermission"></see>.</summary>
            <returns>true if the specified <see cref="T:System.Security.Permissions.PrincipalPermission"></see> is equal to the current <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object; otherwise, false.</returns>
            <param name="obj">The <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object to compare with the current <see cref="T:System.Security.Permissions.PrincipalPermission"></see>. </param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.GetHashCode">
            <summary>Gets a hash code for the <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object that is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>A hash code for the current <see cref="T:System.Security.Permissions.PrincipalPermission"></see> object.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.IsSubsetOf(System.Security.IPermission)">
            <summary>Determines whether the current permission is a subset of the specified permission.</summary>
            <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
            <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission. </param>
            <exception cref="T:System.ArgumentException">The target parameter is an object that is not of the same type as the current permission. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.Union(System.Security.IPermission)">
            <summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
            <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
            <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
            <exception cref="T:System.ArgumentException">The other parameter is an object that is not of the same type as the current permission. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.FromXml(System.Security.SecurityElement)">
            <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
            <param name="elem">The XML encoding to use to reconstruct the permission. </param>
            <exception cref="T:System.ArgumentException">The elem parameter is not a valid permission element.-or- The elem parameter's version number is not valid. </exception>
            <exception cref="T:System.ArgumentNullException">The elem parameter is null. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermission.ToXml">
            <summary>Creates an XML encoding of the permission and its current state.</summary>
            <returns>An XML encoding of the permission, including any state information.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute">
            <summary>Allows security actions for <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"></see> to be applied to code using declarative security.</summary>
            <remarks>This class can be used in place of the <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute"/> class and allows to check whether a Visual Guard permission or role is granted to the current Visual Guard principal.</remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityManager.Principal"/>
            <seealso cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
            <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values. </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute.Type">
            <summary>
            Specifies the type of item for which the current principal is a member.
            </summary>
            <value>A <see cref="T:Novalys.VisualGuard.Security.VGPermissionType"/> value. The default is <see cref="F:Novalys.VisualGuard.Security.VGPermissionType.Permission"/>.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute.Authenticated">
            <summary>Gets or sets a value indicating whether the current principal has been authenticated by Visual Guard.</summary>
            <returns>true if the current principal has been authenticated; otherwise, false. The default value is <c>true</c></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute.Name">
            <summary>
            Gets or sets the fullname of the permission or the name of the role.
            </summary>
            <value>The fullname of the Visual Guard permission, including the folder path
            <para>- or -</para>
            the name of the role.</value>
            <remarks>When <see name="Authenticated"/> is equal to false, the name is ignored.
            <para>If you want to check a permission, you have to use the full name of the permission. When the permission is stored in the root permission folder, the full name of the permission is equal to the permission name.
            When the permission is stored in a sub permission folder, the full name is equal to "\&lt;sub folder name&gt;\&lt;\...\permission name name&gt;".</para>
            <para>For example the full name of the "Disallow to administrate customers" permission stored in the "Customers" folder is equal to "\Customers\Disallow to administrate customers" </para>.
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute.RepositoryId">
            <summary>
            Gets or sets the Visual Guard unique identifier of the item (role or permission).
            </summary>
            <value>The Visual Guard unique identifier of the item (role or permission).</value>
            <remarks>The value must be a valid <see cref="T:System.Guid"/>.
            <para>
            When <see name="Authenticated"/> is equal to false, this value is ignored.
            </para></remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGPrincipalPermissionAttribute.CreatePermission">
            <summary>Creates and returns a new <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"></see>.</summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGPrincipalPermission"></see> that corresponds to this attribute.</returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGProductInformation">
            <summary>
            Gets information about the product.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGProductInformation.minimumConsoleVersion">
            <summary>
            This version is used by the Visual Guard console to check if the runtime integrated in an application is compatible with the console.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGProductInformation.minimumRuntimeVersion">
            <summary>
            This version is used by the Visual Guard console to set the minimum runtime version of a repository that will be created or updated.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGProductInformation.minimumRepositoryVersion">
            <summary>
            This version is used by the Visual Guard runtime to check if a repository is compatible or must be migrated.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGProductInformation.versionForNewRepository">
            <summary>
            Gets the version of Visual Guard repository created by this version of the runtime.
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGProductInformation.minimumSchemaVersion">
            <summary>
            the minimum version of database supported by the runtime in an application
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGProductInformation.minimumSchemaVersionForConsole">
            <summary>
            the minimum version of database supported by the console
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.StrongNameKey">
            <summary>
            Gets the strong name public key of the assembly
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.ProductName">
            <summary>
            Gets the name of the product
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.CommonApplicationDataFolder">
            <summary>
            Gets the path of the common application data folder 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.ApplicationDataFolder">
            <summary>
            Gets the path of the user's application data folder 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.CompanyName">
            <summary>
            Gets the name of the company
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.Version">
            <summary>
            Gets the version of the Visual Guard runtime
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.FileVersion">
            <summary>
            Gets the file version of the Visual Guard runtime
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGProductInformation.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            Gets the file version of the specified assembly
            </summary>
            <param name="assembly">the assembly for which you want the file version</param>
            <returns>the file version of the specified assembly.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.ProductKey">
            <summary>
            Gets the registry key of the product
            </summary>
            <value>the format of the value is "Software\Novalys\Visual Guard For .NET x.y" where x is the major version and y is the minor version.</value>
            <remarks>You can use this key to get information in the registry (HKCU or HKLM).</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.MinimumRepositoryVersion">
            <summary>
            Gets the minimum version of the repository supported by this version of the runtime
            </summary>
            <value>A <see cref="P:Novalys.VisualGuard.Security.VGProductInformation.Version"/> object representing the minimum version of the repository.</value>
            <remarks>This version is used by the Visual Guard runtime to check if a repository is compatible or must be migrated.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.VersionForNewRepository">
            <summary>
            Gets the version of Visual Guard repository created by this version of the runtime.
            </summary>
            <value>A <see cref="P:Novalys.VisualGuard.Security.VGProductInformation.Version"/> object representing the version of a repository created by this runtime.</value>
            <remarks>This version is used by the Visual Guard console when a new repository is created. This version is upgraded each time the data model of the repository is modified.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.MinimumConsoleVersion">
            <summary>
            Gets the minimum version of the Visual Guard console supported by this version of the runtime
            </summary>
            <value>A <see cref="P:Novalys.VisualGuard.Security.VGProductInformation.Version"/> object representing the version of the console supported by the runtime.</value>
            <remarks>This version is used by the Visual Guard console to check if the runtime integrated in an application is compatible with the console.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.MinimumRuntimeVersion">
            <summary>
            Gets the minimum version of the Visual Guard runtime supported by a repository created or upgraded by this runtime.
            </summary>
            <value>A <see cref="P:Novalys.VisualGuard.Security.VGProductInformation.Version"/> object representing the minimum version of the runtime supported by a repository created or upgraded by this runtime.</value>
            <remarks>This version is used by the Visual Guard console to set the minimum runtime version of a repository that will be created or updated.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.MinimumSchemaVersion">
            <summary>
            Gets the minimum version of the database schema supported by this Visual Guard runtime.
            </summary>
            <value>A <see cref="P:Novalys.VisualGuard.Security.VGProductInformation.Version"/> object representing the minimum version of the database schema supported by this Visual Guard runtime.</value>
            <remarks>This version is used by the Visual Guard to check when the database schema in which a repository is stored needs to be upgraded before using by this version of Visual Guard.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.MinimumSchemaVersionForConsole">
            <summary>
            Gets the minimum version of the database schema supported by this Visual Guard console.
            </summary>
            <value>A <see cref="P:Novalys.VisualGuard.Security.VGProductInformation.Version"/> object representing the minimum version of the database schema supported by this Visual Guard console.</value>
            <remarks>This version is used by the Visual Guard to check when the database schema in which a repository is stored needs to be upgraded before using by this version of Visual Guard console.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.IsSmallBusinessEdition">
            <summary>
            Indicates whether the current Visual Guard runtime is a small business edition
            </summary>
            <value>true if it is a small business edition false otherwise.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.Edition">
            <summary>
            Gets the name of the edition of Visual Guard
            </summary>
            <value>The name of the Visual Guard edition (Small Business Edition or Enterprise Edition).</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGProductInformation.Copyright">
            <summary>
            Gets the Copyright information of Visual Guard
            </summary>
            <value>The copyright information of Visual Guard.</value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGReflectionHelper">
            <summary>
            <para>Helper class for reflection.</para>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGReflectionHelper.ReflectionOnPrivateMember">
            <summary>
            Indicates whether reflection is allowed by CAS for private member
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGReflectionHelper.ReflectionEmitAllowed">
            <summary>
            Indicates whether reflection emit is allowed by CAS
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetProperty(System.String,System.Type,System.Type)">
            <summary>
            Gets a property by using Bindingflags appropriate to the security permission of reflection
            </summary>
            <param name="property">the name of the property to search for.</param>
            <param name="type">the type of the object.</param>
            <param name="propertyType">the return type of the property.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> corresponding to specified property name for the specified type.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetField(System.Object,System.String,System.Type)">
            <summary>
            Gets an object representing the field with the specified name for the specified target.
            </summary>
            <param name="target">The object whose field will be returned</param>
            <param name="fieldName">A string containing the name of the field in dotted-quad notation(e.g. fieldname.subfieldname.subfieldname).</param>
            <param name="targetType">the type for which the field is retrieved</param>
            <returns>An object representing the field with the specified name for the specified target. Returns the target if the specified fieldName if null or empty.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.ResolveAmbigousProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Resolve the ambiguity of specified property for the specified type
            </summary>
            <param name="type">the type where the property is ambigous.</param>
            <param name="propertyName">the name of the ambigous property.</param>
            <param name="flags">a <see cref="T:System.Reflection.BindingFlags"/> values used to get the list of properties.</param>
            <returns>a <see cref="T:System.Reflection.PropertyInfo"/> of the property belonging of the class that is the lowest in the level of inheritance hierarchy.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetFieldOrPropertyInfo(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> object representing a field or a property of the specified target with the specified name.
            </summary>
            <param name="target">The object whose field will be returned</param>
            <param name="fieldName">A string containing the name of field in dotted-quad notation(e.g. fieldname.subfieldname.subfieldname).</param>
            <returns>A <see cref="T:System.Reflection.MemberInfo"/> object representing the field or the property , if found; otherwise, null.</returns>
            <example><code lang="CSharp">MenberInfo info = VGReflectionHelper.GetFieldOrPropertyInfo(typeof(Form1), "userControl1.button1");</code></example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetEventInfo(System.Type,System.String)">
            <summary>
            Gets an <see cref="T:System.Reflection.EventInfo"/> object representing the event with the specified name for the specified target.
            </summary>
            <param name="target">The object whose field will be returned</param>
            <param name="eventName">A string containing the name of the event in dotted-quad notation(e.g. fieldname.subfieldname.eventname).</param>
            <returns>An <see cref="T:System.Reflection.EventInfo"/> object representing the event with the specified name for the specified target, if it found;  otherwise, null.</returns>
            <example><code lang="CSharp">EventInfo info = VGReflectionHelper.GetEventInfo(typeof(Form1), "userControl1.button1.Click");</code></example>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetUndecoratedFieldName(System.Reflection.FieldInfo)">
            <summary>
            Gets the name of the property used to access to the given FieldInfo.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.FieldInfo"/> for which you want to get the property name.</param>
            <returns>The name of the property if the field is accessed through a property, otherwise the name of the FieldInfo.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.IsAccessedThroughProperty(System.Reflection.FieldInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Checks whether a field should be accessed through a property.
            </summary>
            <param name="info">the field to check.</param>
            <param name="propInfo">the <see cref="T:System.Reflection.PropertyInfo"/> corresponding to the field if the field should be accessed through a property. null (Nothing) otherwise.</param>
            <returns>true if the field should be accessed through a property. false otherwise.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetAssociatedPropertyInfo(System.Reflection.FieldInfo)">
            <summary>
            Gets the name of the property used to access to the given FieldInfo.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.FieldInfo"/> for which you want to get the property name.</param>
            <returns>The name of the property if the field is accessed through a property, otherwise the name of the FieldInfo.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetEventArgsParameter(System.Reflection.EventInfo)">
            <summary>
            Gets the event arguments of the specified event
            </summary>
            <param name="ei">an <see cref="T:System.Reflection.EventInfo"/> for which to get the argument.</param>
            <returns>a <see cref="T:System.Reflection.ParameterInfo"/> object representing the event argument. null (Nothing) if the event is null or does not have argument.</returns>
            <remarks>this method returns the second argument of the method Invoke of the event (this first one is .</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGReflectionHelper.GetEventArgsParameter(System.Type,System.String)">
            <summary>
            Gets the event arguments of the specified event
            </summary>
            <param name="eventName">A string containing the name of event in dotted-quad notation (e.g. fieldname.subfieldname.eventname).</param>
            <param name="target">the type of target</param>
            <returns>a <see cref="T:System.Reflection.ParameterInfo"/> object representing the event argument. null (Nothing) if the eventname is null, or empty or the event does not exist or does not have argument.</returns>
            <remarks>this method returns the second argument of the method Invoke of the event (this first one is the sender of the event).</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException">
            <summary>
            Exception thrown when the version of the repository does not support the version of the Visual Guard runtime.
            </summary>
            <remarks>To correct this problem you must change the Visual Guard assemblies referenced by your application.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGRepositoryVersionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityErrorEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityError"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs">
            <summary>
            <para>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityError"/> event.
            </para>
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs.#ctor(Novalys.VisualGuard.Security.VGIPrincipal,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="principal">
            <para>The <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the current user.</para>
            </param>
            <param name="exception">
            <para>The <see cref="P:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs.Exception"/> exception thrown by Visual Guard .</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs.Principal">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the current user.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the current user.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs.Continue">
            <summary>
            <para>Gets or sets a value indicating if the exception must ignore or thrown.</para>
            </summary>
            <value>
            <para><c>true</c> if the exception must be ignored, <c>false</c> if the exception must be thrown.</para>
            </value>
            <remarks>The default value is false and all exceptions are thrown.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs.Exception">
            <summary>
            <para>Gets or sets an exception generated by Visual Guard.</para>
            </summary>
            <value>
            <para>The exception thrown by Visual Guard. You can replace the exception thrown by Visual Guard by a new exception.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityInitializedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.DefaultRuntimeInitialized"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs">
            <summary>
            <para>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.DefaultRuntimeInitialized"/> event.
            </para>
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="runtime">the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used by <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/> to load and set the security.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs.Runtime">
            <summary>
            <para>Gets or sets the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used to load and set the security of the application.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object used by <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/> to load and set the security.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityLoadedEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityLoaded"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs">
            <summary>
            <para>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityError"/> event.
            </para>
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs.#ctor(Novalys.VisualGuard.Security.VGIPrincipal)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="principal">
            <para>The <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the current user.</para>
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs.Principal">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the current user.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the current user.</para>
            </value>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityManager">
            <summary>
            Provides the main access point for classes interacting with the Visual Guard security system. This class cannot be inherited.
            </summary>
            <remarks><see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/> class allows to access to the default Visual Guard runtime environment. If you need to use more than one environment in a same application domain, you can use the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.DefaultRuntimeInitialized">
            <summary>
            Occurs when the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object assigned by default to the security manager is initialized.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGSecurityInitializedEventArgs"/> containing data related to this event.
            The <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.DefaultRuntimeInitialized"/> event allows to change the default security settings used by Visual Guard to load the security from the repository and set the security on the objects of the application.
            <para>For ASP.Net application using the <c>VGHttpModule</c> module to manage the security, the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> object defined in this event is not used. You should use the <c>VGHttpModule.Initialized</c> event if you want to change the default security settings.</para>
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.LogWriting">
            <summary>
            Occurs before a log entries is written in a repository.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGLogWritingEventArgs"/> containing data related to this event.
            The <c>LogWriting</c> event allows altering or filtering events that will be written in a repository.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.SignedOut">
            <summary>
            Occurs when the current user is signed out.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:System.EventArgs"/> containing data related to this event.
            The <c>SignedOut</c> event allows executing an action after each call of the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.SignOut"/> method.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.OnWriteLog(System.Object,Novalys.VisualGuard.Security.VGLogWritingEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.ValidatingPassword">
            <summary>
            Occurs when a password is changed or is reset.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs"/> containing data related to this event.
            The <c>ValidatingPassword</c> event allows to cancel the password modification when the password is not valid.
            </remarks>
            <example>
            This example show a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.ValidatingPassword"/> event that checks whether the password does not contain a list of invalid string.
            <code lang="vb.net">
            Private Sub OnValidatingPassword(ByVal sender As Object, ByVal e As VGValidatePasswordEventArgs)
               Dim invalidText() As String = New String() {"password", "novalys", "aaa", "bbb", "ccc"}
               For Each text As String In invalidText
                   If e.Password.IndexOf(text, StringComparison.CurrentCultureIgnoreCase) >= 0 Then
                       e.Cancel = True
                       Return
                   End If
               Next
               If e.Password.IndexOf(e.UserName, StringComparison.CurrentCultureIgnoreCase) >= 0 Then
                   e.Cancel = True
               End If
            End Sub
            </code>
            <code lang="C#">
            private void OnValidatingPassword (object sender, VGValidatePasswordEventArgs args)
            {
                string[] invalidText = new string[] { "pwd", "password", "passwd", "aaa", "bbb" };
                foreach (string text in invalidText)
                {
                    if (e.Password.IndexOf(text, StringComparison.CurrentCultureIgnoreCase) >= 0 
                    {
                        e.Cancel = true;
                        return;
                    }
                }
                if (e.Password.IndexOf(e.UserName, StringComparison.CurrentCultureIgnoreCase) >= 0)
                {
                   e.Cancel = true;
                }
            }
            </code>
            </example>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading">
            <summary>
            Occurs before the permissions are loaded and allows filtering the list of user's roles.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGPermissionsLoadingEventArgs"/> containing data related to this event.
            The <c>PermissionsLoading</c> event allows a user to filter the list of roles granted to the principal or to cancel the authorization (or authentication) process.
            </remarks>
            <example>
            This example display how to use the event <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> to allow the user select a roles in the list of granted roles.
            <code lang="vb.net">
            Private Sub OnPermissionLoading(ByVal sender As Object, ByVal e As VGPermissionsLoadingEventArgs)
            	If e.Roles.Length > 0 Then
            		Dim form As New SelectRoleForm
            		form.Roles = e.Roles
            		If form.ShowDialog() = DialogResult.OK Then
            			e.Roles = form.Roles
            		Else
            			e.Cancel = True
            		End If
            	End If
            End Sub
            </code>
            <code lang="C#">
            private void OnPermissionLoading (object sender, VGPermissionsLoadingEventArgs args)
            {
            	if (e.Roles.Length > 0)
            		SelectRoleForm form = new SelectRoleForm()
            		form.Roles = e.Roles
            		if (form.ShowDialog() == DialogResult.OK)
            		{
            			e.Roles = form.Roles
            		}
            		else
            		{
            			e.Cancel = true
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.GroupsLoading">
            <summary>
            Occurs before the permissions are loaded and allows filtering the list of user's groups for contextual group selection.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGGroupsLoadingEventArgs"/> containing data related to this event.
            The <c>GroupSelectionLoading</c> event allows a user to filter the list of user's groups for contextual group selection.
            </remarks>       
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.CheckVersion">
            <summary>
             Allows to check if the version of the repository permissions is compatible with the version of the application.
            </summary>    
            <example>
            This example display how to use the event <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.CheckVersion"/> to allow the user select a roles in the list of granted roles.
            <code lang="vb.net">
            Private Sub OnCheckVersion(ByVal sender As Object, ByVal e As VGCheckVersionEventArgs)
            	If e.Version &lt; new Version(1,2,0,0) Then
            		e.Cancel = true
            	End If
            End Sub
            </code>
            <code lang="C#">
            private void OnCheckVersion (object sender, VGCheckVersionEventArgs args)
            {
            	if (e.Version &lt; new Version(1,2,0,0))
                {
            		e.Cancel = true
            	}
            }
            </code>
            </example>
            <remarks>
             Occurs after the authentication and before loading permissions.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityLoaded">
            <summary>
             Occurs after the security permissions are loaded.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGSecurityLoadedEventArgs"/> containing data related to this event.
            The <c>SecurityLoaded</c> event allows executing an action after each call of the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity"/> or <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> method.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityError">
            <summary>
            Occurs when Visual Guard loads security actions and a type are unknown or when Visual Guard sets the security of an object and an exception occurs.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGSecurityErrorEventArgs"/> containing data related to this event.
            The <c>SecurityError</c> event allows a user to determine whether or not the operation should continue after the error occurs.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.AddRuntimeProvider(Novalys.VisualGuard.Security.Common.VGIRuntimeProvider,System.Int32)">
            <summary>
            Add a runtime provider to the list of runtime provider.
            </summary>
            <param name="runtimeProvider">The runtime provider to add to the list of runtime provider.</param>
            <param name="priority">the priority of the provider.</param>
            <remarks>
            This method supports the Visual Guard Framework infrastructure and is not intended to be used directly from your code. 
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"></see>.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"></see>.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String)">
            <summary>
            Authenticates a user by using the database or Visual Guard authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>This method will use database authentication mode if this mode is allowed by the repository. If the authentication fails, it will try to authenticate by using the Visual Guard authentication mode.
            </remarks>
            <example> The following example displays how to test the state of the authentication
            <code lang="C#">
            Reauthenticate:
            VGAuthenticationState state = VGSecurityManager.Authenticate(user.Text, password.Text);
            if (state.IsFailed)
            {
            	if (state.IsCanceled) return;
            	if (state.IsCredentialInvalid)
            	{
            		if (state.IsLastBadLogin)
            		{
            			MessageBox.Show("Invalid user or password. The next bad login will lock your account.");
            		}
            		else
            		{
            			MessageBox.Show("Invalid user or password");
            		}
            	}
            	else if (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("user not authorized to log on the application");
            	}
            	else if (state.IsUserAccountExpired)
            	{
            		MessageBox.Show("your account is no more valid. Contact your administrator");
            	}
            	else if (state.IsUserAccountNotYetAvailable)
            	{
            		MessageBox.Show("your account is not yet available.");
            	}
            	else if (state.IsUserAccountLockedOut)
            	{
            		MessageBox.Show("your account is locked out. Contact your administrator.");
            	}
            	else if (state.MustChangePasswordAtNextLogon)
            	{
            	    if (!state.IsPasswordSecure)
            	    {
                        if (state.PasswordExpired)
                        {
            		        MessageBox.Show("Your password has expired. You are required to change it.");
                        }
                        else
                        {
            		        MessageBox.Show("Your password is not secure enough. You are required to change it.");
                        }
                    }
                    else
                    {
            		    MessageBox.Show("You are required to change your password at first logon.");
                    }
                    VGChangePasswordForm form = new VGChangePasswordForm(runtime);
                    form.UserName = currentUsername;
                    form.OldPassword = currentPassword;
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        currentPassword = form.NewPassword;
                        goto Reauthenticate;
                    }
            	}
            }
            else
            {
            	this.DialogResult = DialogResult.OK;
            	if (!state.IsPasswordSecured)
            	{
            		if (MessageBox.Show("Your password is not secure enough. " + Environment.NewLine + "Do you want to change it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes)
            		{
            			// Use the Visual guard form to change the password
            			// You can replace it by your own form
            			VGChangePasswordForm form = new VGChangePasswordForm();
            			form.ShowDialog();
            		}
            	}
            }
            </code>
            <code lang="vb.net">
            Reauthenticate:
            Dim state As VGAuthenticationState = VGSecurityManager.Authenticate(userTextBox.Text, passwordTextBox.Text)
            If state.IsFailed Then
            	Me.DialogResult = DialogResult.None
            	If state.IsCanceled Then Return
            	If state.IsCredentialInvalid Then
            		If state.IsLastBadLogin Then
            		    MessageBox.Show("Invalid user or password. The next bad login will lock your account.")
            		Else
            			MessageBox.Show("Invalid user or password")
            		End If
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("user not authorized to log on to the application")
            	ElseIf state.IsUserAccountExpired Then
            		MessageBox.Show("your account is no more valid. Contact your administrator")
            	ElseIf state.IsUserAccountNotYetAvailable Then
            		MessageBox.Show("your account is not yet available.")
            	ElseIf state.MustChangePasswordAtNextLogon Then
                    If Not state.IsPasswordSecure Then
                        If state.IsPasswordExpired Then
                            MessageBox.Show("Your password has expired. You are required to change it.")
                        Else
                            MessageBox.Show("Your password is not secure enough. You are required to change it.")
                        End If
                    Else
                        MessageBox.Show("You are required to change your password at first logon.")
                    End If
            		Dim form As VGChangePasswordForm = New VGChangePasswordForm
                    form.UserName = userTextBox.Text
                    form.OldPassword = passwordTextBox.Text
            		If form.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                        passwordTextBox.Text = form.NewPassword
                        GoTo Reauthenticate
                    End If
            	ElseIf state.IsUserAccountLockedOut Then
            		MessageBox.Show("your account is locked out. Contact your administrator.")
            	End If
            Else
            	Me.DialogResult = DialogResult.OK
            	If Not state.IsPasswordSecured Then
            		If MessageBox.Show("Your password is not secure enough. " + _
            			Environment.NewLine + "Do you want to change it?", "", _
            			MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
            			MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes Then
            			' Use the Visual guard form to change the password
            			' You can replace it by your own form
            			Dim form As VGChangePasswordForm = New VGChangePasswordForm
            			form.ShowDialog()
            		End If
            	End If
            End If
            </code>
            </example>
            <exception cref="T:System.ArgumentException">
            the <paramref name="name"/> is an empty string or is longer than 64 characters.
            <para>- or- </para>
            the <paramref name="password"/> is longer than 64 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard or database authentication mode.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Authenticates a user by using the specified authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <param name="mode">The mode of the authentication used to authenticate the user. If you indicates <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/>, the user and password are ignored and Visual Guard will use the current windows account.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <example> The following example displays how to test the state of the authentication
            <code lang="C#">
            Reauthenticate:
            VGAuthenticationState state = VGSecurityManager.Authenticate(user.Text, password.Text);
            if (state.IsFailed)
            {
            	if (state.IsCanceled) return;
            	if (state.IsCredentialInvalid)
            	{
            		if (state.IsLastBadLogin)
            		{
            			MessageBox.Show("Invalid user or password. The next bad login will lock your account.");
            		}
            		else
            		{
            			MessageBox.Show("Invalid user or password");
            		}
            	}
            	else if (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("user not authorized to log on the application");
            	}
            	else if (state.IsUserAccountExpired)
            	{
            		MessageBox.Show("your account is no more valid. Contact your administrator");
            	}
            	else if (state.IsUserAccountNotYetAvailable)
            	{
            		MessageBox.Show("your account is not yet available.");
            	}
            	else if (state.IsUserAccountLockedOut)
            	{
            		MessageBox.Show("your account is locked out. Contact your administrator.");
            	}
            	else if (state.MustChangePasswordAtNextLogon)
            	{
            	    if (!state.IsPasswordSecure)
            	    {
                        if (state.PasswordExpired)
                        {
            		        MessageBox.Show("Your password has expired. You are required to change it.");
                        }
                        else
                        {
            		    MessageBox.Show("Your password is not secure enough. You are required to change it.");
                        }
                    }
                    else
                    {
            		    MessageBox.Show("You are required to change your password at first logon.");
                    }
                    VGChangePasswordForm form = new VGChangePasswordForm(runtime);
                    form.UserName = currentUsername;
                    form.OldPassword = currentPassword;
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        currentPassword = form.NewPassword;
                        goto Reauthenticate;
                    }
            	}
            }
            else
            {
            	this.DialogResult = DialogResult.OK;
            	if (!state.IsPasswordSecured)
            	{
            		if (MessageBox.Show("Your password is not secure enough or has expired. " + Environment.NewLine + "Do you want to change it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes)
            		{
            			// Use the Visual guard form to change the password
            			// You can replace it by your own form
            			VGChangePasswordForm form = new VGChangePasswordForm();
            			form.ShowDialog();
            		}
            	}
            }
            </code>
            <code lang="vb.net">
            Reauthenticate:
            Dim state As VGAuthenticationState = VGSecurityManager.Authenticate(userTextBox.Text, passwordTextBox.Text)
            If state.IsFailed Then
            	Me.DialogResult = DialogResult.None
            	If state.IsCanceled Then Return
            	If state.IsCredentialInvalid Then
            		If state.IsLastBadLogin Then
            		    MessageBox.Show("Invalid user or password. The next bad login will lock your account.")
            		Else
            			MessageBox.Show("Invalid user or password")
            		End If
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("user not authorized to log on to the application")
            	ElseIf state.IsUserAccountExpired Then
            		MessageBox.Show("your account is no more valid. Contact your administrator")
            	ElseIf state.IsUserAccountNotYetAvailable Then
            		MessageBox.Show("your account is not yet available.")
            	ElseIf state.MustChangePasswordAtNextLogon Then
                    If Not state.IsPasswordSecure Then
                        If state.IsPasswordExpired Then
                            MessageBox.Show("Your password has expired. You are required to change it.")
                        Else
                            MessageBox.Show("Your password is not secure enough. You are required to change it.")
                        End If
                    Else
                        MessageBox.Show("You are required to change your password at first logon.")
                    End If
            		Dim form As VGChangePasswordForm = New VGChangePasswordForm
                    form.UserName = userTextBox.Text
                    form.OldPassword = passwordTextBox.Text
            		If form.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                        passwordTextBox.Text = form.NewPassword
                        GoTo Reauthenticate
                    End If
            	ElseIf state.IsUserAccountLockedOut Then
            		MessageBox.Show("your account is locked out. Contact your administrator.")
            	End If
            Else
            	Me.DialogResult = DialogResult.OK
            	If Not state.IsPasswordSecured Then
            		If MessageBox.Show("Your password is not secure enough or has expired. " + _
            			Environment.NewLine + "Do you want to change it?", "", _
            			MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
            			MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes Then
            			' Use the Visual guard form to change the password
            			' You can replace it by your own form
            			Dim form As VGChangePasswordForm = New VGChangePasswordForm
            			form.ShowDialog()
            		End If
            	End If
            End If
            </code>
            </example>
            <exception cref="T:System.ArgumentException">The value of <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/> or is a combination of several modes.
            <para>- or- </para>
            the <paramref name="name"/> is an empty string or is longer than 64 characters.
            <para>- or- </para>
            the <paramref name="password"/> is longer than 64 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c> and the <paramref name="mode"/> is not <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/>.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(Novalys.VisualGuard.Security.Membership.VGAdfsServer)">
            <summary>
            Authenticates a federated user 
            </summary>
            <param name="adfsServer">Adfs server using for your current windows authentication.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>
            For more information about this method, you can see <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the specified authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential)">
            <summary>
            Authenticate the user by the VGICredential
            </summary>
            <param name="credential">Represente the credential of your user</param>
            <returns>Return the state of your user for the current VGRuntime</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(Novalys.VisualGuard.Security.Membership.VGAdfsServer,System.String,System.String)">
            <summary>
            Authenticates a federated user 
            </summary>
            <param name="adfsServer">Adfs server specific for this authentication</param>
            <param name="name">Name of your user sample (Novalys\Jsmith)</param>
            <param name="password">Password of user</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.ChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="oldPassword">the old password of the given user.</param>
            <param name="newPassword">the new password of the given user.</param>
            <param name="passwordConfirmation">the confirmation of the new password.</param>
            <returns>The status of the modification.  Values are defined in <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationStatus"/> value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name, old password, the new password or the password confirmation is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The length name, old password, new password or password confirmation is greater than 64 characters</para>
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <remarks>This method allows changing password only for Visual Guard user. It does not support password modification for database account or Windows account.</remarks>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityManager.ValidatingPassword"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.ResetPassword(System.String,System.String)">
            <summary>Resets a user's password to a new, automatically generated password.</summary>
            <param name="name">The name of the user to reset the password for. </param>
            <param name="passwordAnswer">The password answer for the specified user. </param>
            <returns>The new password for the specified user.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            or
            <para>The passwordAnswer is null and <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.RequiresQuestionAndAnswer"/> is set to true.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name or passwordAnswer is longer than 64 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">passwordAnswer is invalid.
            <para>- or -</para>
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.EnablePasswordReset"/> is not set to true.</para>
            - Or -
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <code lang="CSharp">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            <code lang="vb.net">
            <para>
            user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())
            </para>
            <para>
            user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())
            </para>
            </code>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)"/>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.ChangePassword(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.ResetPassword(System.String)">
            <summary>Resets a user's password to a new, automatically generated password.</summary>
            <param name="name">The name of the user to reset the password for. </param>
            <returns>The new password for the specified user.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name is longer than 64 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.RequiresQuestionAndAnswer"/> is not set to true.</para>
            or
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.EnablePasswordReset"/> is not set to true.</para>
            or
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.ChangePassword(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.ResetPassword(System.String,System.Boolean)">
            <summary>Resets a user's password to a new, automatically generated password.</summary>
            <param name="name">The name of the user to reset the password for. </param>
            <param name="ignoreRequiresQuestionAndAnswer">When the value is true ignore the option <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.RequiresQuestionAndAnswer"/> and reset the password.</param>
            <returns>The new password for the specified user.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name is longer than 64 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.RequiresQuestionAndAnswer"/> is set to true and <paramref name="ignoreRequiresQuestionAndAnswer"/> is set to false.</para>
            or
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.EnablePasswordReset"/> is not set to true.</para>
            or
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException"><paramref name="ignoreRequiresQuestionAndAnswer"/> is true and the current user does not have enough privileges to ignore password answer. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity">
            <summary>
            Loads the permission of the <see cref="P:System.Threading.Thread.CurrentPrincipal"/> identity.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permision sets granted to the roles.</remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity(System.Security.Principal.WindowsIdentity)">
            <summary>
            Loads the permission of the given <see cref="T:System.Security.Principal.WindowsIdentity"/> IIdentity.
            </summary>
            <param name="identity">a <see cref="T:System.Security.Principal.WindowsIdentity"/> object representing the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <example>
            <code lang="vb.net">
            Dim state As VGAuthorizationState
            state = VGSecurityManager.LoadSecurity (System.Security.Principal.WindowsIdentity.GetCurrent())
            If state.IsFailed Then
            	If state.IsUserNotFound Then
            		MessageBox.Show("Your are not declared in the security repository")
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("Your are not authorized to log on to this application")
            	End If
            Else
            	Application.Run(New MDIForm)
            End If
            </code>
            <code lang="C#">
            VGAuthorizationState state = VGSecurityManager.LoadSecurity (System.Security.Principal.WindowsIdentity.GetCurrent());
            if (state.IsFailed)
            {
            	if (state.IsUserNotFound)
            	{
            		MessageBox.Show("Your are not declared in the security repository");
            	}
            	elseif (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("Your are not authorized to log on to this application")
            	}
            }
            else
            {
            	Application.Run(new MDIForm())
            }
            </code>
            </example>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permision sets granted to the roles.</remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity(System.Security.Principal.IIdentity)">
            <summary>
            Loads the permissions of the given <see cref="T:System.Security.Principal.IIdentity"/> object.
            </summary>
            <param name="identity">an <see cref="T:System.Security.Principal.IIdentity"/> object representing the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permision sets granted to the roles.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The identity is <see cref="T:System.Security.Principal.WindowsIdentity"/> and the repository does not support Windows authentication Mode.
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity(System.String)">
            <summary>
            Loads the permissions of a user identified by the user name.
            </summary>
            <param name="name">the name of the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <example>
            <code lang="vb.net">
            Dim state As VGAuthorizationState
            state = VGSecurityManager.LoadSecurity ("myUserName")
            If state.IsFailed Then
            	If state.IsUserNotFound Then
            		MessageBox.Show("Your are not declared in the security repository")
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("Your are not authorized to log on to this application")
            	End If
            Else
            	Application.Run(New MDIForm)
            End If
            </code>
            <code lang="C#">
            VGAuthorizationState state = VGSecurityManager.LoadSecurity ("myUserName");
            if (state.IsFailed)
            {
            	if (state.IsUserNotFound)
            	{
            		MessageBox.Show("Your are not declared in the security repository");
            	}
            	elseif (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("Your are not authorized to log on to this application")
            	}
            }
            else
            {
            	Application.Run(new MDIForm())
            }
            </code>
            </example>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permision sets granted to the roles.
            <para>This method check authorization only for Visual Guard user, do not use this method for database or Windows user</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The <paramref name="name"/> is longer than 64 characters</para>
            <para>The <paramref name="name"/> is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean)">
            <summary>
            Loads the permissions of a user identified by the user name by using the specified authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="mode">the authentication mode used indicating the type of the user (<see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/>).</param>
            <param name="isAuthenticated">Indicates that the given user has been authenticated.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <example>
            <code lang="vb.net">
            Dim state As VGAuthorizationState
            state = VGSecurityManager.LoadSecurity ("myUserName", VGAuthenticationMode.Database, True)
            If state.IsFailed Then
            	If state.IsUserNotFound Then
            		MessageBox.Show("Your are not declared in the security repository")
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("Your are not authorized to log on to this application")
            	End If
            Else
            	Application.Run(New MDIForm)
            End If
            </code>
            <code lang="C#">
            VGAuthorizationState state = VGSecurityManager.LoadSecurity ("myUserName", VGAuthenticationMode.Database, true);
            if (state.IsFailed)
            {
            	if (state.IsUserNotFound)
            	{
            		MessageBox.Show("Your are not declared in the security repository");
            	}
            	elseif (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("Your are not authorized to log on to this application")
            	}
            }
            else
            {
            	Application.Run(new MDIForm())
            }
            </code>
            </example>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permision sets granted to the roles.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the specified authentication mode.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The <paramref name="name"/> is longer than 64 characters</para>
            <para>The <paramref name="name"/> is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.SecurityEnabled">
            <summary>
            Gets or sets a value indicating if the Visual Guard security is enabled.
            </summary>
            <value>If the security is disabled, Visual Guard will not execute any more actions on the object of your application</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.GetBytes(System.String)">
            <summary>
            Encodes a specified String into a byte array
            </summary>
            <param name="text">the string value to convert.</param>
            <returns>A byte array containing the encoded representation of the specified string.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.PasswordPolicyMessage">
            <summary>
            Gets the message displayed to the user if the password does not match the validation rules.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.Principal">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the security context of current user on whose behalf the application is running.
            this property is <c>null</c> (Nothing) before calling the <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> or <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadSecurity(System.String)"/> methods or when the last authorization or authentication process has failed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.ReplaceCurrentPrincipal">
            <summary>
            Gets or sets a value indicating if the principal of the current thread (<see cref="P:System.Threading.Thread.CurrentPrincipal"/>) must be replaced by the Visual Guard principal after an authentication.
            </summary>
            <remarks>Setting this value will only be effective if you set it before using the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> method.
            By default the value is <c>true</c>. If your application already uses CurrentPrincipal properties (with a <see cref="T:System.Security.Principal.WindowsPrincipal"/> for example), you can set the value to false.</remarks>
            <value>true to replace the current principal of the thread, false otherwise.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.ConfigurationFile">
            <summary>
            Gets or sets the path of the Visual Guard configuration file.
            </summary>
            <remarks>By default, the Visual Guard configuration file is named VisualGuardConfiguration.exe.config and is located in the same directory as the Novalys.VisualGuard.Security assembly.
            This property must be set before calling the other methods of <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/>.
            <para>Click here for more information about Visual Guard configuration files, see <a href="GenerateConfigFiles.htm">"How to generate or edit the Visual Guard configuration files"</a></para></remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityManager.DefaultConfigurationFilename"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.SetSecurity(System.Object)">
            <summary>
            Sets the security for the specified object.
            </summary>
            <param name="target">The object for which you want to set the security</param>
            <remarks><P>You need to call this method only once for each object instance.</P><P>In most of case, this method must be called at the end of constructor of the object (after the call of InitializeComponent method for components).
            This method registers the object in Visual Guard then it executes the actions defined for this target to be executed when the security is loaded.</P>
            <P>If some actions must be executed on other events, It handles these events. The actions associated to these events will be executed each time the events are raised.</P>
            <br/><b>For more information, you can consult:</b>
            <para><A href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</A></para>
            <para><A href="ApplySecurityInYourApp.htm">How to apply security in your application</A></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.AuthenticationState">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> object representing the last authentication state.
            </summary>
            <remarks>You can use this value to test if the last authentication has failed or not and to check reason of the failure.
            </remarks>
            <example> The following example displays how to test the state of the authentication
            <code lang="C#">
            Reauthenticate:
            VGAuthenticationState state = VGSecurityManager.Authenticate(user.Text, password.Text);
            if (state.IsFailed)
            {
            	if (state.IsCanceled) return;
            	if (state.IsCredentialInvalid)
            	{
            		if (state.IsLastBadLogin)
            		{
            			MessageBox.Show("Invalid user or password. The next bad login will lock your account.");
            		}
            		else
            		{
            			MessageBox.Show("Invalid user or password");
            		}
            	}
            	else if (state.IsUserNotAuthorized)
            	{
            		MessageBox.Show("user not authorized to log on the application");
            	}
            	else if (state.IsUserAccountExpired)
            	{
            		MessageBox.Show("your account is no more valid. Contact your administrator");
            	}
            	else if (state.IsUserAccountNotYetAvailable)
            	{
            		MessageBox.Show("your account is not yet available.");
            	}
            	else if (state.IsUserAccountLockedOut)
            	{
            		MessageBox.Show("your account is locked out. Contact your administrator.");
            	}
            	else if (state.MustChangePasswordAtNextLogon)
            	{
            	    if (!state.IsPasswordSecure)
            	    {
                        if (state.PasswordExpired)
                        {
            		        MessageBox.Show("Your password has expired. You are required to change it.");
                        }
                        else
                        {
            		    MessageBox.Show("Your password is not secure enough. You are required to change it.");
                        }
                    }
                    else
                    {
            		    MessageBox.Show("You are required to change your password at first logon.");
                    }
                    VGChangePasswordForm form = new VGChangePasswordForm(runtime);
                    form.UserName = currentUsername;
                    form.OldPassword = currentPassword;
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        currentPassword = form.NewPassword;
                        goto Reauthenticate;
                    }
            	}
            }
            else
            {
            	this.DialogResult = DialogResult.OK;
            	if (!state.IsPasswordSecured)
            	{
            		if (MessageBox.Show("Your password is not secure enough or has expired. " + Environment.NewLine + "Do you want to change it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes)
            		{
            			// Use the Visual guard form to change the password
            			// You can replace it by your own form
            			VGChangePasswordForm form = new VGChangePasswordForm();
            			form.ShowDialog();
            		}
            	}
            }
            </code>
            <code lang="vb.net">
            Reauthenticate:
            Dim state As VGAuthenticationState = VGSecurityManager.Authenticate(userTextBox.Text, passwordTextBox.Text)
            If state.IsFailed Then
            	Me.DialogResult = DialogResult.None
            	If state.IsCanceled Then Return
            	If state.IsCredentialInvalid Then
            		If state.IsLastBadLogin Then
            		    MessageBox.Show("Invalid user or password. The next bad login will lock your account.")
            		Else
            			MessageBox.Show("Invalid user or password")
            		End If
            	ElseIf state.IsUserNotAuthorized Then
            		MessageBox.Show("user not authorized to log on to the application")
            	ElseIf state.IsUserAccountExpired Then
            		MessageBox.Show("your account is no more valid. Contact your administrator")
            	ElseIf state.IsUserAccountNotYetAvailable Then
            		MessageBox.Show("your account is not yet available.")
            	ElseIf state.MustChangePasswordAtNextLogon Then
                    If Not state.IsPasswordSecure Then
                        If state.IsPasswordExpired Then
                            MessageBox.Show("Your password has expired. You are required to change it.")
                        Else
                            MessageBox.Show("Your password is not secure enough. You are required to change it.")
                        End If
                    Else
                        MessageBox.Show("You are required to change your password at first logon.")
                    End If
            		Dim form As VGChangePasswordForm = New VGChangePasswordForm
                    form.UserName = userTextBox.Text
                    form.OldPassword = passwordTextBox.Text
            		If form.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
                        passwordTextBox.Text = form.NewPassword
                        GoTo Reauthenticate
                    End If
            	ElseIf state.IsUserAccountLockedOut Then
            		MessageBox.Show("your account is locked out. Contact your administrator.")
            	End If
            Else
            	Me.DialogResult = DialogResult.OK
            	If Not state.IsPasswordSecured Then
            		If MessageBox.Show("Your password is not secure enough. " + _
            			Environment.NewLine + "Do you want to change it?", "", _
            			MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
            			MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly) = DialogResult.Yes Then
            			' Use the Visual guard form to change the password
            			' You can replace it by your own form
            			Dim form As VGChangePasswordForm = New VGChangePasswordForm
            			form.ShowDialog()
            		End If
            	End If
            End If
            </code>
            </example>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.AuthorizationState">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> object representing the last authorization state.
            </summary>
            <remarks>You can use this value to test if the last authorization has failed or not and to check reason of the failure.
            </remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityManager.AuthenticationState"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.DefaultConfigurationFilename">
            <summary>
            Gets the default name of the file used as Visual Guard configuration file
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.SignOut">
            <summary>
            Unloads the roles and permissions granted to the current user.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadAnomymousSecurity">
            <summary>
            Loads the permissions for an anonymous session.
            </summary>
            <remarks>The application supports the anonymous session when a role is specified as anonymous role for your applcation and the option <c>anonymousSessionSupported</c> of your Visual Guard configuration file is equal to true.
            <para>To define an anonymous role, you must be connected to the repository with the Visual Guard console and modify the property <c>Anonymous Role</c> of your application.</para>
            <para>After modifying this property, you have to regenerate the Visual Guard configuration file of your application or edit it to modify the option <c>anonymousSessionSupported</c>.</para>
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException">The application does not allowed anonymous session or the role granted to the anonymous session is not valid.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadAnomymousSecurity(System.Security.Principal.WindowsIdentity)">
            <summary>
            Loads the permission for an anonymous session associated to the specified windows identity
            </summary>
            <param name="identity">the identity for which an anonymous session is loaded.</param>
            <remarks>The application supports the anonymous session when a role is specified as anonymous role for your applcation and the option <c>anonymousSessionSupported</c> of your Visual Guard configuration file is equal to true.
            <para>To define an anonymous role, you must be connected to the repository with the Visual Guard console and modify the property <c>Anonymous Role</c> of your application.</para>
            <para>After modifying this property, you have to regenerate the Visual Guard configuration file of your application or edit it to modify the option <c>anonymousSessionSupported</c>.</para>
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException">The application does not allowed anonymous session or the role granted to the anonymous session is not valid.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.IsAnonymousSessionSupported"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.IsAnonymousSessionSupported">
            <summary>
            Indicates whether an anonymous sessions are supported by the current application.
            </summary>
            <returns><c>true</c> if an anonymous role is defined for the application, false otherwise.</returns>
            <remarks>The application supports the anonymous session when a role is specified as anonymous role for your applcation and the option <c>anonymousSessionSupported</c> of your Visual Guard configuration file is equal to true.
            <para>To define an anonymous role, you must be connected to the repository with the Visual Guard console and modify the property <c>Anonymous Role</c> of your application.</para>
            <para>After modifying this property, you have to regenerate the Visual Guard configuration file of your application or edit it to modify the option <c>anonymousSessionSupported</c>.</para>
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadAnomymousSecurity"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.UpdateCredentialStatistics">
            <summary>
            Gets or sets a boolean value indicating if the statistics of credential must be updated or not.
            </summary>
            <value>true if you want to update credential statistics, false otherwise. The default value is true.</value>
            <remarks><P>By default, Visual Guard updates statistic information of credential after each authentication attempt.</P>
            <P>These statistics (time of last access, number of grace logon used, time of last password modification, password history...) are stored in the repository of the application.</P>
            If you do not use a password policy based on password or logon failed history, it is possible to disable this update by using this property. In this case, the performance of each authentication will be increased.
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.TraceLevel">
            <summary>
            Gets or sets the level of the Visual Guard trace.
            </summary>
            <remarks>
            This trace level specifies to Visual Guard what messages to trace.
            By default, the level is <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.TraceLevel">TraceLevel.Info</see> when a debugger is attached to the application and <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.TraceLevel">TraceLevel.Off</see> otherwise.
            You can also set the trace level by configuring a "VisualGuard" <see cref="T:System.Diagnostics.TraceSwitch"/> in your application configuration file.
            <para>
            <see cref="F:System.Diagnostic.TraceLevel.Off"/>: Visual Guard does not generate trace.
            <see cref="F:System.Diagnostic.TraceLevel.Error"/>: Visual Guard will trace only error messages.
            <see cref="F:System.Diagnostic.TraceLevel.Warning"/>: Visual Guard will trace error messages, Initialization information, Authentication or authorization or password modification status.
            <see cref="F:System.Diagnostic.TraceLevel.Info"/>: Visual Guard will trace error messages, Initialization information, Authentication or authorization or password modification status, information about permission sets and Security actions.
            <see cref="F:System.Diagnostic.TraceLevel.Verbose"/>: All messages. You can use this option to trace information when a problem occurs and send this trace to the support for helping us to resolve the problem.
            </para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.TraceListener">
            <summary>
            Gets or sets the <see cref="P:Novalys.VisualGuard.Security.VGSecurityManager.TraceListener"/> object used to trace Visual Guard messages.
            </summary>
            <value> If the value is null (Nothing), the Visual Guard messages will be only traced in the listeners attached to the <see cref="T:System.Diagnostics.Trace"/>.
            if the value is not null, the Visual Guard messages will be traced in the given listener and in the listeners attached to the <see cref="T:System.Diagnostics.Trace"/>.</value>
            <remarks>By default, if the trace is enabled, Visual Guard will trace its messages in the VGTRaceOut.txt file.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.Runtime">
            <summary>
            Gets the current <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> instance used by the security manager
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.IsPerformanceTracingEnabled">
            <summary>
            Gets or sets Performance tracing is activated or not for all runtimes
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.CheckContext(System.Boolean)">
            <summary>
            Check if the context of Visual Guard is valid.
            </summary>
            <param name="throwOnError">throw an error if the context is not valid</param>
            <returns>true if the Visual Guard context is valid, false otherwise.</returns>
            <remarks><P>You can call this method if you want to check if the context of Visual Guard is valid for the application.
            If you do not call this method, Visual Guard will check this information at the first call of the repository and will throw an exception at this time.</P>
            The method will check if Visual Guard configuration files are valid and if it is possible to access to the repository and if the application has enough permissions on this repository.</remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGInvalidRepositoryException">This exception will be thrown if the application cannot access to the repository.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">This exception will be thrown if Visual Guard configuration files are not available or if the parameters of these files are not valid.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.
            </summary>
            <value>true if the membership provider supports password reset; otherwise, false. </value>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the default membership provider requires the user to answer a password question for password reset and retrieval.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the supplied user name and password are valid.
            </summary>
            <param name="username">The name of the user to be validated.</param>
            <param name="password">The password for the specified user.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/>  indicating if the validation succeeds or not.</returns>
            <exception cref="T:System.ArgumentNullException">username or password is null.</exception>
            <exception cref="T:System.ArgumentException">username is empty.
            <para>or</para>
            user or password is longer than 64 characters.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.ApplicationType">
            <summary>
            gets the type of the application managed by Visual Guard
            </summary>
            <value>a <see cref="T:Novalys.VisualGuard.Security.VGApplicationType"/> indicating the type of the application (WinForm or ASP.Net). By default the value is <see cref="F:Novalys.VisualGuard.Security.VGApplicationType.WinForm"/>.</value>
            <remarks>This method supports the Visual Guard infrastructure and is not intended to be used directly from your code.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the repository is configured to require a unique e-mail address for each user name.
            </summary>
            <value>true if the repository requires a unique e-mail address; otherwise, false. The default is true.</value>
            <remarks>
            This value is defined in the Visual Guard repository and can be modified by editing the password policy in the Visual Guard console. 
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the password question and answer of the user.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <param name="newQuestion">The new password question of the user as string.</param>
            <param name="newAnswer">The new answer of the given password question as string.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState"/> representing the status of the modification.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The old password, the new password or the password confirmation are null.</para>
            <para>The name is null or empty.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name, password, new password answer is longer than 64 characters</para>
            <para>The new password question is longer than 256 characters</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <remarks>Visual Guard is case sensitive when it checks the password answer. We strongly recommend to store the password answer as a lowered string and to provide a lowered value of the password answer when you want to reset the password by using the password question and answer.
            <para>
            <code lang="CSharp">VGSecurityManager.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">VGSecurityManager.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.ApplicationName">
            <summary>
            gets the name of the application managed by Visual Guard
            </summary>
            <value>The name of the application.</value>
            <remarks>
            This value is defined in the Visual Guard repository and can be modified by editing the property 'name' of the application in the Visual Guard console. 
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.GeneratePassword(System.Int32,System.Int32)">
            <summary>
            Generates a random password of the specified length.
            </summary>
            <param name="length">The number of characters in the generated password. The length must be between 1 and 64 characters.</param>
            <param name="numberOfNonAlphanumericCharacters">The number of punctuation characters in the generated password.</param>
            <returns>A random password of the specified length.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="length"/> is less than 1 or greater than 64.
            <para> - or - </para>
            <para><paramref name="numberOfNonAlphanumericCharacters"/> is less than zero or greater than <paramref name="length"/></para></exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.GenerateDebugInformation">
            <summary>
            Gets or sets a <see cref="T:Novalys.VisualGuard.Security.VGDebugOptions"/> value indicating whether debug information should be included or not.
            </summary>
            <value>a <see cref="T:Novalys.VisualGuard.Security.VGDebugOptions"/> value indicating whether to include debug information</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.SetSecurity(System.Object,System.Type)">
            <summary>
            Sets the security corresponding to the specified type for the specified object.
            </summary>
            <param name="target">The object for which you want to set the security</param>
            <param name="type">a <see cref="T:System.Type"/> object specifying the type for which the actions are targeted. This type must be assignable from the type of the specified object.</param>
            <remarks><P>You need to call this method only once for each object instance.</P><P>In most of case, this method must be called at the end of constructor of the object (after the call of InitializeComponent method for components).
            This method registers the object in Visual Guard then it executes the actions defined for this target to be executed when the security is loaded.</P>
            <P>If some actions must be executed on other events, It handles these events. The actions associated to these events will be executed each time the events are raised.</P>
            <P>You can use this method when you define actions for an ancestor class. By default Visual Guard sets the security only for the type of the object and not for its ancestor.</P>
            <br/><b>For more information, you can consult:</b>
            <para><A href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</A></para>
            <para><A href="ApplySecurityInYourApp.htm">How to apply security in your application</A></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> or <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException">the type of <paramref name="target"/> is not an instance of a class derived from <paramref name="type"/>.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityManager.WriteLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Writes a new log entry as defined in the specified <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object to the log stored in the default Visual Guard repository.
            </summary>
            <param name="log">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object defining the content of the message.</param>
            <remarks>The message will be written in the log of the repository only when the log is enabled for this repository.
            <para>For more information about Logging features, see  <a href="Using Visual Guard Logging features.html">Using Visual Guard Logging features</a>.</para>
            </remarks>
            <seealso cref="P:Novalys.VisualGuard.Security.VGSecurityManager.LogEnabled"/>
            <exception cref="T:System.FormatException">the format specified in the title or in the message of the <paramref name="log"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="log"/> is null</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.LogEnabled">
            <summary>
            Gets a value indicating whether the log is enabled for the current repository.
            </summary>
            <remarks>To enable or disable logging, you must change the property "Log Enabled" of your repository in the Visual Guard console.
            <para>For more information about Logging features, see  <a href="Using Visual Guard Logging features.html">Using Visual Guard Logging features</a>.</para>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityManager.WriteLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.AllowAutomaticInterception">
            <summary>
            Gets or sets a boolean value indicating whether Visual Guard can use its automatic interception mechanism to intercept the instantication of Forms and automatically set the security to this instance.
            </summary>
            <remarks>By default, Visual Guard will intercept automatically the instanciation of class for which Visual Guard must apply security action. This interception is available only on classes derived from System.Windows.Forms.Form form WinForm application and System.Web.UI.Page or System.Web.UI.MasterPage for Web application.
            <para>This property must be set before loading the security of the user.</para>
            <para>When this option is set to false, You have to call the <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.SetSecurity(System.Object)"/> method for all secured objects.</para>
            <para>Automatic Interception in WinForm context requires <see cref="T:System.Security.Permissions.SecurityPermission"/> for operating whith infrastructure code and configuration of the remoting infrastructure. If you do not want to grant this permission to your application , you should set this option to false and call <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.SetSecurity(System.Object)"/> method for each secured class.</para>
            <para>For more information, see  <a href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</a></para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Unable to unload automatic interception. Some classes are already registered for interception. This method cannot be called after the security is loaded for a user and some security actions require automatic interception.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityManager.IncludeWindowsGroups">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that indicates whether role granted to Windows Groups are included to the list of role of a user.
            </summary>
            <returns>true if Windows groups are included; otherwise, false. The default is true.</returns>
            <remarks>if the Windows groups are not required, setting this property to false can improve performance by avoiding to load role granted to Windows group.</remarks>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGSecurityRuntime">
            <summary>
            Provides the main access point for classes interacting with the Visual Guard security system. This class cannot be inherited.
            </summary>
            <remarks>This class provides the same features as <see cref="T:Novalys.VisualGuard.Security.VGSecurityManager"/> and must be used when you want to manage more than one Visual Guard environment in a same application domain.
            <para>For example, you can create 2 instances of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class to access to 2 differents repository from your application or when you want to load the security of 2 different users in the same time (in server environment for example).</para>
            <para>When you create a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class based on an other instance, Visual Guard will share its cache between the 2 instances.</para>
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.SecurityLoaded">
            <summary>
             Occurs after the security permissions are loaded.
            </summary>
            <remarks>
            For more information about this event, you can see <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.SecurityLoaded"/>.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.UnableToSaveOffline">
            <summary>
             Occurs when you have a error during save offlinemode conposant.
            </summary>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.CheckForOnlineStatus">
            <summary>
             Occurs after VGRepository is created.
            </summary>
            <remarks>
            Allows whether VGrepository is online.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.AcceptOfflineMode">
            <summary>
             Occurs after VGRepository is created.
            </summary>
            <remarks>
            Allows whether VGrepository is online.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.ValidatingPassword">
            <summary>
            Occurs when a password is changed or is reset.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs"/> containing data related to this event.
            The <c>ValidatingPassword</c> event allows to cancel the password modification when the password is not valid.
            </remarks>
            <example>
            This example show a <see cref="E:Novalys.VisualGuard.Security.VGSecurityRuntime.ValidatingPassword"/> event that checks whether the password does not contain a list of invalid string.
            <code lang="vb.net">
            Private Sub OnValidatingPassword(ByVal sender As Object, ByVal e As VGValidatePasswordEventArgs)
               Dim invalidText() As String = New String() {"password", "novalys", "aaa", "bbb", "ccc"}
               For Each text As String In invalidText
                   If e.Password.IndexOf(text, StringComparison.CurrentCultureIgnoreCase) >= 0 Then
                       e.Cancel = True
                       Return
                   End If
               Next
               If e.Password.IndexOf(e.UserName, StringComparison.CurrentCultureIgnoreCase) >= 0 Then
                   e.Cancel = True
               End If
            End Sub
            </code>
            <code lang="C#">
            private void OnValidatingPassword (object sender, VGValidatePasswordEventArgs args)
            {
                string[] invalidText = new string[] { "pwd", "password", "passwd", "aaa", "bbb" };
                foreach (string text in invalidText)
                {
                    if (e.Password.IndexOf(text, StringComparison.CurrentCultureIgnoreCase) >= 0 
                    {
                        e.Cancel = true;
                        return;
                    }
                }
                if (e.Password.IndexOf(e.UserName, StringComparison.CurrentCultureIgnoreCase) >= 0)
                {
                   e.Cancel = true;
                }
            }
            </code>
            </example>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.CheckVersion">
            <summary>
             Allows to check if the version of the repository permissions is compatible with the version of the application.
            </summary>
            <remarks>
             Occurs after the authentication and before loading permissions.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.SecurityError">
            <summary>
             Occurs when Visual Guard loads security actions and a type are unknown or when Visual Guard sets the security of an object and an exception occurs.
            </summary>
            <remarks>
            For more information about this event, you can see <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.PermissionsLoading">
            <summary>
            Occurs before the permissions are loaded and allows filtering the list of user's roles.
            </summary>
            <remarks>
            For more information about this event, you can see <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.PermissionsLoading"/>.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.GroupsLoading">
            <summary>
            Occurs before the permissions are loaded and allows filtering the list of user's groups for contextual group selection.
            </summary>
            <remarks>
            For more information about this event, you can see <see cref="!:VGSecurityManager.GroupSelectionLoading"/>.
            </remarks>
        </member>
        <member name="E:Novalys.VisualGuard.Security.VGSecurityRuntime.SignedOut">
            <summary>
            Occurs when the current user is signed out.
            </summary>
            <remarks>
            The event handler receives an argument of type <see cref="T:System.EventArgs"/> containing data related to this event.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.#ctor(System.String)">
            <summary>
             Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> for the specified repository name.
            </summary>
            <param name="repositoryName">A string value containing the name of the repository. This value must exist in the list of repository defined in the Visual Guard configuration file.</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.#ctor(System.String,System.Guid)">
            <summary>
             Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> for the specified repository name and application id.
            </summary>
            <param name="repositoryName">A string value containing the name of the repository. This value must exist in the list of repository defined in the Visual Guard configuration file.</param>
            <param name="appId">The id of the application for which the security will be loaded</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.#ctor(System.Guid)">
            <summary>
             Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> for the specified application in the default repository.
            </summary>
            <param name="appId">The id of the application for which the security will be loaded</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> and use the repository defined as default in the Visual Guard configuration file.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> based on an existing runtime.
            </summary>
            <param name="runtime">the runtime used as source.</param>
            <remarks>
            This method allows to create a new instance of a runtime that will access to the same repository with the same application id. Visual Guard will use the settings of the existing runtime to access to the repository and
            it will use the same cache to store the information loaded from the repository.
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime,System.Guid)">
            <summary>
            Creates  a new instance of <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> based on an existing runtime and specifies the application managed by the new runtime.
            </summary>
            <param name="runtime">the runtime used as source.</param>
            <param name="appId">the id of the application.</param>
            <remarks>
            This method allows to create a new instance of a runtime that will access to the same repository as the original runtime but will load the security for the application identified by the specified id. Visual Guard will use the same settings as the original runtime and
            it will use the same cache to store the information loaded from the repository.
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Enabled">
            <summary>
            Gets or sets a value indicating if the Visual Guard security is enabled.
            </summary>
            <value>If the security is disabled, Visual Guard will not execute any more actions on the object of your application</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.String)">
            <summary>
            Authenticates a user by using Visual Guard or Database authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>
            For more information about this method, you can see <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            the <paramref name="name"/> is an empty string or is longer than 64 characters.
            <para>- or- </para>
            the <paramref name="password"/> is longer than 64 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard or Database authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.Security.SecureString)">
            <summary>
            Authenticates a user by using Visual Guard or Database authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>
            For more information about this method, you can see <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            the <paramref name="name"/> is an empty string or is longer than 64 characters.
            <para>- or- </para>
            the <paramref name="password"/> is SecureString.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard or Database authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Authenticates a user by using the specified authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <param name="mode">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the mode of authentication used to authenticate the user</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>
            For more information about this method, you can see <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">The value of <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/> or is a combination of several modes.
            <para>- or- </para>
            the <paramref name="name"/> is an empty string or is longer than 64 characters.
            <para>- or- </para>
            the <paramref name="password"/> is longer than 64 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c> and the <paramref name="mode"/> is not <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the specified authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.Security.SecureString,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Authenticates a user by using the specified authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <param name="mode">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the mode of authentication used to authenticate the user</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>
            For more information about this method, you can see <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">The value of <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/> or is a combination of several modes.
            <para>- or- </para>
            the <paramref name="name"/> is an empty string or is longer than 64 characters.
            <para>- or- </para>
            the <paramref name="password"/> is longer than 64 characters (secureString).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c> and the <paramref name="mode"/> is not <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the specified authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String)" -->
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential)">
            <summary>
            Authenticate the user by the VGICredential
            </summary>
            <param name="credential">Represente the credential of your user</param>
            <returns>Return the state of your user for the current VGRuntime</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(Novalys.VisualGuard.Security.Membership.VGAdfsServer)">
            <summary>
            Authenticates a federated user 
            </summary>
            <param name="adfsServer">Adfs server using for your current windows authentication.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
            <remarks>
            For more information about this method, you can see <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the specified authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(Novalys.VisualGuard.Security.Membership.VGAdfsServer,System.String,System.String)">
            <summary>
            Authenticates a federated user 
            </summary>
            <param name="adfsServer">Adfs server specific for this authentication</param>
            <param name="name">Name of your user sample (Novalys\Jsmith)</param>
            <param name="password">Password of user</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the authentication succeeds or not.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity">
            <summary>
            Loads the permission of the <see cref="M:System.Security.Principal.WindowsIdentity.GetCurrent"/> identity.
            </summary>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityRuntime.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permission sets granted to the roles.</remarks>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Windows authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Loads the permissions of a user identified by the user name by using the specified authentication mode.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="mode">the authentication mode used to authentiticate the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support specified authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(System.String)">
            <summary>
            Loads the permission of the user identified by the user name.
            </summary>
            <param name="name">the name of the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean)">
            <summary>
            Loads the permission of the given user name.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="isAuthenticated">Indicates the given user has been authenticated.</param>
            <param name="mode">the authentication mode used to authenticate the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the specified Visual Guard authentication mode.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="name"/> is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The <paramref name="name"/> is longer than 64 characters</para>
            - or -
            <para>The <paramref name="name"/> is empty.</para>
            - or -
            <para>The <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/>. If you want to load the security for a Windows account, you have to call <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(System.Security.Principal.IIdentity)"/></para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(Novalys.VisualGuard.Security.Token.VGToken)">
            <summary>
            Load a principal by VGToken
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(System.Security.Principal.IIdentity)">
            <summary>
            Loads the permission of the given <see cref="T:System.Security.Principal.IIdentity"/> object.
            </summary>
            <param name="identity">an <see cref="T:System.Security.Principal.IIdentity"/> object representing the user.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> representing the state of the authorization</returns>
            <remarks>If a user has more than one role in the application, you can use the <see cref="E:Novalys.VisualGuard.Security.VGSecurityRuntime.PermissionsLoading"/> event to allow the user to select a role in the granted roles list.
            By default, Visual Guard will create  permission set that will be a union of all permision sets granted to the roles.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="identity"/> or identity.Name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The identity.Name is longer than 64 characters</para>
            <para>The identity.Name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.UseAutomaticInterception">
            <summary>
            Gets or sets a boolean value indicating whether Visual Guard can use its automatic interception mechanism to intercept the instantication of Forms and automatically set the security to this instance.
            </summary>
            <remarks>By default, Visual Guard will intercept automatically the instanciation of class for which Visual Guard must apply security action. This interception is available only on classes derived from System.Windows.Forms.Form form WinForm application and System.Web.UI.Page or System.Web.UI.MasterPage for Web application.
            <para>This property must be set before loading the security of the user.</para>
            <para>When this option is set to false, You have to call the <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.SetSecurity(System.Object)"/> method for all secured objects.</para>
            <para>Automatic Interception in WinForm context requires <see cref="T:System.Security.Permissions.SecurityPermission"/> for operating whith infrastructure code and configuration of the remoting infrastructure. If you do not want to grant this permission to your application , you should set this option to false and call <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.SetSecurity(System.Object)"/> method for each secured class.</para>
            <para>For more information, see  <a href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</a></para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePassword(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential,System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="credential">credential object of the user</param>
            <param name="oldPassword">the old password of the given user.</param>
            <param name="newpassword">the new password of the given user.</param>
            <param name="passwordconfirmation">the confirmation of the new password.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationState"/> representing the status of the modification.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="oldPassword">the old password of the given user.</param>
            <param name="newPassword">the new password of the given user.</param>
            <param name="passwordConfirmation">the confirmation of the new password.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGPasswordModificationState"/> representing the status of the modification.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name, old password, the new password or the password confirmation is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The length name, old password, new password or password confirmation is greater than 64 characters</para>
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <seealso cref="E:Novalys.VisualGuard.Security.VGSecurityRuntime.ValidatingPassword"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the password of the current user, the runtime need to have a Principal.
            The current user needs to support password system.
            </summary>
            <param name="oldPassword">Provide the current password of the user</param>
            <param name="newPassword">Provide the new password of the user</param>
            <param name="passwordConfirmation">Provide the new password of the user</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePassword(System.Security.SecureString,System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Change the password of the current user, the runtime need to have a Principal.
            The current user needs to support password system.
            </summary>
            <param name="oldPassword">Provide the current password of the user</param>
            <param name="newPassword">Provide the new password of the user</param>
            <param name="passwordConfirmation">Provide the new password of the user</param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.GetPasswordQuestion(System.String)">
            <summary>
            Gets the password question of a specified user.
            </summary>
            <param name="name">the name of the user.</param>
            <returns>the password question of the user. null (Nothing) if the user does not have any password question.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name is longer than 64 characters</para>
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ResetPassword(System.String,System.String)">
            <summary>Resets a user's password to a new, automatically generated password.</summary>
            <param name="name">The name of the user to reset the password for. </param>
            <param name="passwordAnswer">The password answer for the specified user. </param>
            <returns>The new password for the specified user.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            or
            <para>The passwordAnswer is null and <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RequiresQuestionAndAnswer"/> is set to true.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name or passwordAnswer is longer than 64 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">passwordAnswer is invalid.
            <para>- or -</para>
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.EnablePasswordReset"/> is not set to true.</para>
            - Or -
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <para>
            <code lang="CSharp">user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePasswordQuestionAndAnswer(Novalys.VisualGuard.Security.Membership.VGMembershipUser,Novalys.VisualGuard.Security.AuthenticationModule.VGICredential,System.String,System.String)"/>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePassword(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ResetPassword(System.String)">
            <summary>Resets a user's password to a new, automatically generated password.</summary>
            <param name="name">The name of the user to reset the password for. </param>
            <returns>The new password for the specified user.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name is longer than 64 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RequiresQuestionAndAnswer"/> is set to true.</para>
            or
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.EnablePasswordReset"/> is not set to true.</para>
            or
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePassword(Novalys.VisualGuard.Security.AuthenticationModule.VGICredential,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ResetPassword(System.String,System.Boolean)">
            <summary>Resets a user's password to a new, automatically generated password.</summary>
            <param name="name">The name of the user to reset the password for. </param>
            <param name="ignoreRequiresQuestionAndAnswer">When the value is true ignore the option <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RequiresQuestionAndAnswer"/> and reset the password.</param>
            <returns>The new password for the specified user.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>The name is longer than 64 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipPasswordException">
            The user account is currently locked out or does not exist.
            <para>- or -</para>
            The generated password does not pass the password policy validation.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RequiresQuestionAndAnswer"/> is set to true and <paramref name="ignoreRequiresQuestionAndAnswer"/> is set to false.</para>
            or
            <para><see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.EnablePasswordReset"/> is not set to true.</para>
            or
            <para>the repository does not support Visual Guard authentication mode.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException"><paramref name="ignoreRequiresQuestionAndAnswer"/> is true and the current user does not have enough privileges to ignore password answer. The Membership access level of the application must be sufficient to allows this action or the 'Membership Manager' role must be granted to the user by using the Visual Guard console.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the password question and answer of the user.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the given user.</param>
            <param name="newQuestion">The new password question of the user as string.</param>
            <param name="newAnswer">The new answer of the given password question as string.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState"/> representing the status of the modification.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The old password, the new password or the password confirmation are null.</para>
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>name, password, newAnswer is longer than 64 characters</para>
            or
            <para>The newQuestion question is longer than 256 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <para>
            <code lang="CSharp">user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String)">
            <summary>
            Changes the password question and answer of the user.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="newQuestion">The new password question of the user as string.</param>
            <param name="newAnswer">The new answer of the given password question as string.</param>
            <returns>A <see cref="T:Novalys.VisualGuard.Security.VGPasswordQuestionAndAnswerModificationState"/> representing the status of the modification.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>The old password, the new password or the password confirmation are null.</para>
            <para>The name is null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>name, password, newAnswer is longer than 64 characters</para>
            or
            <para>The newQuestion question is longer than 256 characters</para>
            or
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <remarks><para>The password answer check is case sensitive. We strongly recommend to store the password answer as a lowered string and provide a lowered value of the password answer when you want to reset the password by using the password question and answer.</para>
            <para>
            <code lang="CSharp">user.ChangePasswordQuestionAndAnswer(myPassword.Text, newPasswordQuestion.Text, newPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            <para>
            <code lang="CSharp">user.ResetPassword(myPasswordAnswer.Text.ToLowerInvariant())</code>
            </para>
            </remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.PasswordPolicyMessage">
            <summary>
            Gets the message displayed to the user if the password does not match the validation rules.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Principal">
            <summary>
            Gets the <see cref="T:Novalys.VisualGuard.Security.VGIPrincipal"/> representing the security context of current user on whose behalf the application is running.
            this property is <c>null</c> (Nothing) before calling the <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.String)"/> or <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadSecurity(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> methods or is the authorization process has failed.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ReplaceCurrentPrincipal">
            <summary>
            Gets or sets a value indicating if the principal of the current thread (<seealso cref="P:System.Threading.Thread.CurrentPrincipal"/>).
            </summary>
            <remarks>Setting this value will only be effective if you set it before using the <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> method.
            By default the value is <c>true</c>. If your application already uses CurrentPrincipal properties (with a <see cref="T:System.Security.Principal.WindowsPrincipal"/> for example), you can set the value to false.</remarks>
            <value>true to replace the current principal of the thread, false otherwise.</value>
            <permission cref="T:System.Security.Permissions.SecurityPermission">The caller does not have the permission required to set the principal.</permission>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.AuthenticationState">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> object representing the last authentication state.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.AuthorizationState">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.VGAuthorizationState"/> object representing the last authorization state.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.SetSecurity(System.Object)">
            <summary>
            Sets the security for the specified object.
            </summary>
            <param name="target">The object for which you want to set the security</param>
            <remarks><P>You need to call this method only once for each object instance.</P><P>In most of case, this method must be called at the end of constructor of the object (after the call of InitializeComponent method for components).
            This method registers the object in Visual Guard then it executes the actions defined for this target to be executed when the security is loaded.</P>
            <P>If some actions must be executed on other events, It handles these events. The actions associated to these events will be executed each time the events are raised.</P>
            <para>If the target is an ancestor class, you must use the <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.SetSecurity(System.Object,System.Type)"/> method to specify the type of the ancestor for which the security must be set.</para>
            <br/><b>For more information, you can consult:</b>
            <para><A href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</A></para>
            <para><A href="ApplySecurityInYourApp.htm">How to apply security in your application</A></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null.</exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.SetSecurity(System.Object,System.Type)">
            <summary>
            Sets the security corresponding to the specified type for the specified object.
            </summary>
            <param name="target">The object for which you want to set the security</param>
            <param name="type">a <see cref="T:System.Type"/> object specifying the type for which the actions are targeted. This type must be assignable from the type of the specified object.</param>
            <remarks><P>You need to call this method only once for each object instance.</P><P>In most of case, this method must be called at the end of constructor of the object (after the call of InitializeComponent method for components).
            This method registers the object in Visual Guard then it executes the actions defined for this target to be executed when the security is loaded.</P>
            <P>If some actions must be executed on other events, It handles these events. The actions associated to these events will be executed each time the events are raised.</P>
            <P>You can use this method when you define actions for an ancestor class. By default Visual Guard sets the security only for the type of the object and not for its ancestor.</P>
            <br/><b>For more information, you can consult:</b>
            <para><A href="HowVisualGuardSecureApp.htm">How Visual Guard secures an application</A></para>
            <para><A href="ApplySecurityInYourApp.htm">How to apply security in your application</A></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> or <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException">the type of <paramref name="target"/> is not a sub class of <paramref name="type"/>.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ConfigurationFile">
            <summary>
            Gets or sets the configuration file used to load information from the repository
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Dispose">
            <summary>
            Releases all resources used by the current instance
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Finalize">
            <summary>
            The destructor of the object.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.SignOut">
            <summary>
            Unloads the roles and permissions granted to the current user.
            If you are in Web application use VGFormsAuthentication.SignOut() method
            </summary>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadAnomymousSecurity(System.Security.Principal.IIdentity)">
            <summary>
            Loads the permission for an anonymous session associated to the specified windows identity
            </summary>
            <param name="identity">the identity for which an anonymous session is loaded.</param>
            <remarks>The application supports the anonymous session when a role is specified as anonymous role for your applcation and the option <c>anonymousSessionSupported</c> of your Visual Guard configuration file is equal to true.
            <para>To define an anonymous role, you must be connected to the repository with the Visual Guard console and modify the property <c>Anonymous Role</c> of your application.</para>
            <para>After modifying this property, you have to regenerate the Visual Guard configuration file of your application or edit it to modify the option <c>anonymousSessionSupported</c>.</para>
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException">The application does not allowed anonymous session or the role granted to the anonymous session is not valid.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.IsAnonymousSessionSupported"/>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadAnomymousSecurity">
            <summary>
            Loads the permissions for an anonymous session.
            </summary>
            <remarks>The application supports the anonymous session when a role is specified as anonymous role for your applcation and the option <c>anonymousSessionSupported</c> of your Visual Guard configuration file is equal to true.
            <para>To define an anonymous role, you have to be connected to the repository with the Visual Guard console and modify the property <c>Anonymous Role</c> of your application.</para>
            <para>After modifying this property, you have to regenerate the Visual Guard configuration file of your application or edit it to modify the option <c>anonymousSessionSupported</c>.</para>
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGAnonymousSessionNotAllowedException">The application does not allowed anonymous session or the role granted to the anonymous session is not valid.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.IsAnonymousSessionSupported"/>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.IsAnonymousSessionSupported">
            <summary>
            Indicates whether an anonymous sessions are supported by the current application.
            </summary>
            <returns><c>true</c> if an anonymous role is defined for the application, false otherwise.</returns>
            <remarks>The application supports the anonymous session when a role is specified as anonymous role for your applcation and the option <c>anonymousSessionSupported</c> of your Visual Guard configuration file is equal to true.
            <para>To define an anonymous role, you must be connected to the repository with the Visual Guard console and modify the property <c>Anonymous Role</c> of your application.</para>
            <para>After modifying this property, you have to regenerate the Visual Guard configuration file of your application or edit it to modify the option <c>anonymousSessionSupported</c>.</para>
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <seealso cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.LoadAnomymousSecurity"/>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.DefaultRole">
            <summary>
            Gets the id of the default roles of the application.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <returns>the id of the default roles of the application. or <see cref="F:System.Guid.Empty"/> if the application does not support the Default Role feature.</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CheckCredential(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Checks if credentials are valid but does not load security permissions or change current principal.
            </summary>
            <param name="name">the name of the user.</param>
            <param name="password">the password of the user</param>
            <param name="mode">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> value indicating the authentication mode used to validate the user.</param>
            <returns>true if the credentials are valid, false otherwise.</returns>
            <remarks>this method does not update credential statistic</remarks>
            <exception cref="T:System.ArgumentException">The value of <paramref name="mode"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/> or is a combination of several modes.
            <para>- or- </para>
            the <paramref name="name"/> is an empty string or is longer than 64 characters or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>- or- </para>
            the <paramref name="password"/> is longer than 64 characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or the <paramref name="password"/> is <c>null (Nothing in VB)</c> and the <paramref name="mode"/> is not <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Windows"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support Visual Guard authentication mode.</para>
            <para>The name is empty.</para>
            </exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CheckContext(System.Boolean)">
            <summary>
            Check if the context of Visual Guard is valid.
            </summary>
            <param name="throwOnError">throw an error if the context is not valid</param>
            <returns>true if the Visual Guard context is valid, false otherwise.</returns>
            <remarks><P>You can call this method if you want to check if the context of Visual Guard is valid for the application.
            If you do not call this method, Visual Guard will check this information at the first call of the repository and will throw an exception at this time.</P>
            The method will check if Visual Guard configuration files are valid and if it is possible to access to the repository and if the application has enough permissions on this repository.</remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGInvalidRepositoryException">This exception will be thrown if the application cannot access to the repository.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">This exception will be thrown if Visual Guard configuration files are not available or if the parameters of these files are not valid.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.PasswordPolicy">
            <summary>
            Manager the password policy
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.EnablePasswordReset">
            <summary>
            Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.
            </summary>
            <value>true if the membership provider supports password reset; otherwise, false. </value>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value>The minimum number of special characters that must be present in a valid password.</value>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate if the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the default membership provider requires the user to answer a password question for password reset and retrieval.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.GraceLoginsAllowed">
            <summary>
            Gets a value indicating if theire is Consecutive Bad Logins Allowed.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ConsecutiveBadLoginsAllowed">
            <summary>
            Gets or sets the maximum number of consecutive invalid password.
            </summary>
            <value>the maximum number of consecutive invalid password. <see cref="F:System.Int32.MaxValue"/> means that invalid password attempts are not checked.</value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.HistoryLength">
            <summary>
            Gets a value indicating the History Length of the password.
            </summary>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.PasswordValidation">
            <summary>
            Gets or sets the configured regular expression used for validating the password format.
            </summary>
            <value>The configured regular expression used for validating the password format.</value>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the supplied user name and password are valid by using the authentication mode <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> mode.
            </summary>
            <param name="username">The name of the user to be validated.</param>
            <param name="password">The password for the specified user.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the validation succeeds or not.</returns>
            <remarks>This method do not changes the <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Principal"/> property or the <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.AuthenticationState"/> property. You must use the method <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> to authenticate the current user.</remarks>
            <exception cref="T:System.ArgumentNullException">username or password is null.</exception>
            <exception cref="T:System.ArgumentException">username is empty  or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            user or password is longer than 64 characters.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>the repository does not support the <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.VisualGuard"/> or <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.Database"/> mode.</para>
            </exception>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ValidateUser(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)">
            <summary>
            Verifies that the supplied user name and password are valid.
            </summary>
            <param name="username">The name of the user to be validated.</param>
            <param name="password">The password for the specified user.</param>
            <param name="mode">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> value indicating the authentication mode used to validate the user.</param>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationState"/> indicating if the validation succeeds or not.</returns>
            <remarks>This method do not changes the <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Principal"/> property or the <see cref="P:Novalys.VisualGuard.Security.VGSecurityRuntime.AuthenticationState"/> property. You must use the method <see cref="M:Novalys.VisualGuard.Security.VGSecurityRuntime.Authenticate(System.String,System.String,Novalys.VisualGuard.Security.VGAuthenticationMode)"/> to authenticate the current user.</remarks>
            <exception cref="T:System.ArgumentNullException">username or password is null.</exception>
            <exception cref="T:System.ArgumentException">username is empty or contains invalid chars ('\', '/', '?', '*', '%', ';', ''', '"', ':', '|', '[', ']', '+', '=', ',').
            <para>or</para>
            username or password is longer than 64 characters.</exception>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ApplicationType">
            <summary>
            Indicates the type of application managed by Visual Guard
            </summary>
            <value>a <see cref="T:Novalys.VisualGuard.Security.VGApplicationType"/> indicating the type of the application (WinForm or ASP.Net). By default the value is <see cref="F:Novalys.VisualGuard.Security.VGApplicationType.WinForm"/>.</value>
            <remarks>This method supports the Visual Guard infrastructure and is not intended to be used directly from your code.</remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ApplicationName">
            <summary>
            gets the name of the application managed by Visual Guard
            </summary>
            <value>The name of the application.</value>
            <remarks>
            This value is defined in the Visual Guard repository and can be modified by editing the property 'name' of the application in the Visual Guard console. 
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ApplicationId">
            <summary>
            Gets or sets the id of the application managed by Visual Guard
            </summary>
            <value>The id of the application.</value>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            <remarks>This method reinitializes the current security context and will unload the security permissions granted to the current user. When the specified application id is equal to <see cref="F:System.Guid.Empty"/>, Visual Guard will use the id specified in the configuration file.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the repository is configured to require a unique e-mail address for each user name.
            </summary>
            <value>true if the repository requires a unique e-mail address; otherwise, false. The default is true.</value>
            <remarks>
            This value is defined in the Visual Guard repository and can be modified by editing the password policy in the Visual Guard console. 
            </remarks>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
            
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.ActivatePerformanceTracing(System.Boolean)">
            <summary>
            Enable or disable performance tracing
            </summary>
            <param name="isActivate">Set it to true if you want to activate performance tracing else false</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.IdentityModules">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RuntimeModules">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.WebUserInterfaces">
            <summary>
            Get a Web User Interface Manager 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Tools">
            <summary>
            Get a tools of Visual-Guard
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Domains">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.AdfsServers">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.WebPortals">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.TokenManager">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Administration">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGAdministrationInstance"/> object used to manage the user rights of VG
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Groups">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGGroupsInstance"/> object used to manage user membership in groups for the application managed by this runtime
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Deployment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.EventLogs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Roles">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to manage user membership in roles for the application managed by this runtime
            </summary>
            
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.PermissionSets">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to manage user membership in roles for the application managed by this runtime
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Permissions">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRolesInstance"/> object used to manage user membership in roles for the application managed by this runtime
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Repository">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGRepositoryInstance"/> object used to manage repository informations
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Application">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGApplicationInstance"/> object used to manage Application informations
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Auditing">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGAuditingInstance"/> object used to manage permissions for Auditing purpose.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Modules">
            <summary>
            Manage VG modules
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Membership">
            <summary>
            Gets a <see cref="T:Novalys.VisualGuard.Security.Membership.VGMembershipInstance"/> object used to manage membership information for the application managed by this runtime
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Profile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Monitoring">
            <summary>
            Represents Monitoring API - which contains methods for monitoring graphs.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.Licence">
            <summary>
            The licence of the repository
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/>.
            </summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/>.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.AllowedAuthenticationModes">
            <summary>
            Gets the authentication modes defined in the configuration file and supported by the repository.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.SupportedAuthenticationModes">
            <summary>
            Gets the authentication modes supported by the repository.
            </summary>
            <returns>a <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> value indicating the modes supported by the repository.</returns>
            <exception cref="T:Novalys.VisualGuard.Security.VGConfigurationException">The configuration file is not valid
            <para>or</para>
            A problem occurs during the connection to the repository.
            <para>or</para>
            The version of the repository or the version of the permissions is not supported by the application.
            </exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RepositoryName">
            <summary>
            Specifies the name of the repository used by the runtime.
            </summary>
            <value>The name of the repository. This value must exist in the list of repository defined in the Visual Guard configuration file.
            <para>When the value is null. The runtime will use the reposiotry defined as default.</para></value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.RepositoryDescription">
            <summary>
            Get the description of the repository used by the runtime.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.WriteLog(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Writes a new log entry as defined in the specified <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object in the repository represented by this runtime.
            </summary>
            <param name="log">A <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> object defining the content of the message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="log"/> is null</exception>
            <exception cref="T:System.FormatException">the format specified in the title or in the message of the <paramref name="log"/> is not valid.</exception>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.LogEnabled">
            <summary>
            Gets a value indicating whether the log is enabled for the repository.
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CreateRuntimeForOracle(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class and initializes a connection to a repository using Oracle as the backing store.
            </summary>
            <param name="repositoryName">the name of the repository</param>
            <param name="supportedAuthenticationModes">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the authentication mode supported by the security runtime. This value must be equal or a subset of the value defined in the repository.</param>
            <param name="anonymousSessionSupported">A boolean value indicating whether the security runtime supports anonymous session.</param>
            <param name="applicationId">The Visual Guard unique identifier of the application managed by the security runtime.</param>
            <param name="connectionString">The connection string used to establish the connection to the database containing the repository tables.</param>
            <param name="schema">the name of the Oracle schema containing the Visual Guard database objects. The name of the Oracle schema is case sensitive (in most of case the value should be uppercased).</param>
            <param name="cacheDuration">The length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> or <paramref name="connectionString"/> or <paramref name="schema"/> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryName"/> is an empty string.
            <para>- or-</para>
            <paramref name="supportedAuthenticationModes"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cacheDuration"/> is negative.</exception>
            <remarks>this method requires to deploy the assembly "Novalys.VisualGuard.Security.Oracle.dll" with your application.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CreateRuntimeForOracle(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class and initializes a connection to a repository using Oracle as the backing store.
            </summary>
            <param name="repositoryName">the name of the repository</param>
            <param name="supportedAuthenticationModes">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the authentication mode supported by the security runtime. This value must be equal or a subset of the value defined in the repository.</param>
            <param name="anonymousSessionSupported">A boolean value indicating whether the security runtime supports anonymous session.</param>
            <param name="applicationId">The Visual Guard unique identifier of the application managed by the security runtime.</param>
            <param name="connectionString">The connection string used to establish the connection to the database containing the repository tables.</param>
            <param name="schema">the name of the Oracle schema containing the Visual Guard database objects. The name of the Oracle schema is case sensitive (in most of case the value should be uppercased).</param>
            <param name="cacheDuration">The length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository.</param>
            <param name="includeWindowsGroups">Indicates whether role granted to Windows Groups are included to the list of role of a user.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> or <paramref name="connectionString"/> or <paramref name="schema"/> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryName"/> is an empty string.
            <para>- or-</para>
            <paramref name="supportedAuthenticationModes"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cacheDuration"/> is negative.</exception>
            <remarks>this method requires to deploy the assembly "Novalys.VisualGuard.Security.Oracle.dll" with your application.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CreateRuntimeForSQLServer(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class and initializes a connection to a repository using SQLServer as the backing store.
            </summary>
            <param name="repositoryName">the name of the repository</param>
            <param name="supportedAuthenticationModes">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the authentication mode supported by the security runtime. This value must be equal or a subset of the value defined in the repository.</param>
            <param name="anonymousSessionSupported">A boolean value indicating whether the security runtime supports anonymous session.</param>
            <param name="applicationId">The Visual Guard unique identifier of the application managed by the security runtime.</param>
            <param name="connectionString">The connection string used to establish the connection to the database containing the repository tables.</param>
            <param name="cacheDuration">The length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> or <paramref name="connectionString"/> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryName"/> is an empty string.
            <para>- or-</para>
            <paramref name="supportedAuthenticationModes"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cacheDuration"/> is negative.</exception>
            <remarks>this method requires to deploy the assembly "Novalys.VisualGuard.Security.SQLServer.dll" with your application.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CreateRuntimeForSQLServer(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class and initializes a connection to a repository using SQLServer as the backing store.
            </summary>
            <param name="repositoryName">the name of the repository</param>
            <param name="supportedAuthenticationModes">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the authentication mode supported by the security runtime. This value must be equal or a subset of the value defined in the repository.</param>
            <param name="anonymousSessionSupported">A boolean value indicating whether the security runtime supports anonymous session.</param>
            <param name="applicationId">The Visual Guard unique identifier of the application managed by the security runtime.</param>
            <param name="connectionString">The connection string used to establish the connection to the database containing the repository tables.</param>
            <param name="cacheDuration">The length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository.</param>
            <param name="includeWindowsGroups">Indicates whether role granted to Windows Groups are included to the list of role of a user.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> or <paramref name="connectionString"/> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryName"/> is an empty string.
            <para>- or-</para>
            <paramref name="supportedAuthenticationModes"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cacheDuration"/> is negative.</exception>
            <remarks>this method requires to deploy the assembly "Novalys.VisualGuard.Security.SQLServer.dll" with your application.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CreateRuntimeForFile(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class and initializes a connection to a repository based on files.
            </summary>
            <param name="repositoryName">the name of the repository</param>
            <param name="supportedAuthenticationModes">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the authentication mode supported by the security runtime. This value must be equal or a subset of the value defined in the repository.</param>
            <param name="anonymousSessionSupported">A boolean value indicating whether the security runtime supports anonymous session.</param>
            <param name="applicationId">The Visual Guard unique identifier of the application managed by the security runtime.</param>
            <param name="repositoryPath">The path of the folder containing the repository files.</param>
            <param name="cacheDuration">The length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> or <paramref name="repositoryPath"/> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryName"/> is an empty string.
            <para>- or-</para>
            <paramref name="supportedAuthenticationModes"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/> or indicates that database authentication mode is supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cacheDuration"/> is negative.</exception>
            <remarks>this method requires to deploy the assembly "Novalys.VisualGuard.Security.File.dll" with your application.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGSecurityRuntime.CreateRuntimeForFile(System.String,Novalys.VisualGuard.Security.VGAuthenticationMode,System.Boolean,System.Guid,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class and initializes a connection to a repository based on files.
            </summary>
            <param name="repositoryName">the name of the repository</param>
            <param name="supportedAuthenticationModes">A <see cref="T:Novalys.VisualGuard.Security.VGAuthenticationMode"/> indicating the authentication mode supported by the security runtime. This value must be equal or a subset of the value defined in the repository.</param>
            <param name="anonymousSessionSupported">A boolean value indicating whether the security runtime supports anonymous session.</param>
            <param name="applicationId">The Visual Guard unique identifier of the application managed by the security runtime.</param>
            <param name="repositoryPath">The path of the folder containing the repository files.</param>
            <param name="cacheDuration">The length of time in seconds that Visual Guard caches a repository item before trying to reload them from the repository.</param>
            <param name="includeWindowsGroups">Indicates whether role granted to Windows Groups are included to the list of role of a user.</param>
            <returns>A new instance of the <see cref="T:Novalys.VisualGuard.Security.VGSecurityRuntime"/> class</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> or <paramref name="repositoryPath"/> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryName"/> is an empty string.
            <para>- or-</para>
            <paramref name="supportedAuthenticationModes"/> is equal to <see cref="F:Novalys.VisualGuard.Security.VGAuthenticationMode.None"/> or indicates that database authentication mode is supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cacheDuration"/> is negative.</exception>
            <remarks>this method requires to deploy the assembly "Novalys.VisualGuard.Security.File.dll" with your application.</remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.IncludeWindowsGroups">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that indicates whether role granted to Windows Groups are included to the list of role of a user.
            </summary>
            <returns>true if Windows groups are included; otherwise, false. The default is true.</returns>
            <remarks>if the Windows groups are not required, setting this property to false can improve performance by avoiding to load role granted to Windows groups.
            <para>When the license stored in the repository does not supports Windows Groups, this option is ignored.</para></remarks>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGSecurityRuntime.ConnectionStatus">
            <summary>
            Return if the current connection is Online or Offline
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGServer.Model.UserCredentialData.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGServer.Model.UserCredentialData.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGServer.Model.UserCredentialData.VGAuthenticationMode">
            <summary>
            VGAuthenticationMode
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGUnauthorizedAnonymousUserException">
            <summary>
            Exception thrown when the method <see cref="M:Novalys.VisualGuard.Security.VGSecurityManager.LoadAnomymousSecurity"/> is called and the defined anonymous user is not authorized to access to the application.
            </summary>
            <remarks>To correct this problem you must grant a role of the application to the anonymous user.</remarks>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGUnauthorizedAnonymousUserException.#ctor(System.String)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGUnauthorizedAnonymousUserException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGUnauthorizedAnonymousUserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a newly created instance of <see cref="T:Novalys.VisualGuard.Security.VGUnauthorizedAnonymousUserException"></see>
            </summary>
            <param name="errorMessage">Error message from caller</param>
            <param name="innerException">Any nested exception</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGUnauthorizedAnonymousUserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The object that holds the serialized object data</param>
            <param name="context">The contextual information about the source or destination</param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGUserOperationStatus">
            <summary>
            Define a generic status for user operation
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGUserOperationStatus.Success">
            <summary>
            The operation succeeds. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGUserOperationStatus.Failure">
            <summary>
            The operation fails. 
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGUserOperationStatus.BadUserId">
            <summary>
            This userID is not correspond for this module system
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGUserOperationStatus.UserNotFound">
            <summary>
            The password modification fails. The current password is locked out and must be unlocked by an administrator before changing the password
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.VGUserOperationStatus.ErrorProvider">
            <summary>
            The identity module have a internal error
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGValidatePasswordEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.ValidatingPassword"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs">
            <summary>
            <para>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.ValidatingPassword"/> event.
            </para>
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs"/> class with an action, the node it was performed upon, and the parent node.</para>
            </summary>
            <param name="userName">The membership user name for the current create-user, change-password, or reset-password action.
            </param>
            <param name="password">The new password for the specified membership user.
            </param>
            <param name="isNewUser">true if the event is occurring while a new user is being created; otherwise, false.
            </param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs.Cancel">
            <summary>
            Gets or sets a value that indicates whether the current create-user, change-password, or reset-password action will be canceled.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs.FailureInformation">
            <summary>
            Gets or sets an exception that describes the reason for the password-validation failure.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs.IsNewUser">
            <summary>
            Gets a value that indicates whether the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.ValidatingPassword"/> event is being raised during a call to the CreateUser method. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs.Password">
            <summary>
            Gets the password for the current create-user, change-password, or reset-password action. 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGValidatePasswordEventArgs.UserName">
            <summary>
            Gets the name of the membership user for the current create-user, change-password, or reset-password action.
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGLogWritingEventHandler">
            <summary>
            Represents the method that handles a <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.LogWriting"/> event.
            </summary>
            <param name="sender">
            <para>The source of the event.</para>
            </param>
            <param name="e">
            <para>A <see cref="T:Novalys.VisualGuard.Security.VGLogWritingEventArgs"/> that contains the event data.</para>
            </param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.VGLogWritingEventArgs">
            <summary>
            <para>
            Provides data for the <see cref="E:Novalys.VisualGuard.Security.VGSecurityManager.LogWriting"/> event.
            </para>
            </summary>    
        </member>
        <member name="M:Novalys.VisualGuard.Security.VGLogWritingEventArgs.#ctor(Novalys.VisualGuard.Security.Logging.VGLogEntry)">
            <summary>
            Creates a new instance of <see cref="T:Novalys.VisualGuard.Security.VGLogWritingEventArgs"/> class.
            </summary>
            <param name="entry">the log entry to write in the repository log.</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.VGLogWritingEventArgs.Entry">
            <summary>
            <para>Gets the <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> representing the log entry to write in repository.</para>
            </summary>
            <value>
            <para>The <see cref="T:Novalys.VisualGuard.Security.Logging.VGLogEntry"/> representing the log entry to write in repository.</para>
            </value>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetGroup.VariableName">
            <summary>
            By default the variable name is "Groups"
            </summary>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.FindBy">
            <summary>
            Type of the finder
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.FindValue">
            <summary>
            Value try to find
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.ApplicationId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.VariableName">
            <summary>
            By default the variable name is Roles
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetRole.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the get role node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUserFindBy">
            <summary>
            User finder type
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUserFindBy.Name">
            <summary>
            Find by name
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUserFindBy.Id">
            <summary>
            Find by Id
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser">
            <summary>
            Get user and set in variable
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.FindBy">
            <summary>
            Type of the finder
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.FindValue">
            <summary>
            The value for the search
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.VariableName">
            <summary>
            By default the variable name is <see cref="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowConstants.VARIABLEKEY_USER"/>
            </summary>        
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetUser.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable">
            <summary>
            Get variable for the <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext"/> 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.VariableName">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.Value">
            <summary>
            Value of the variable
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Check the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeGetVariable.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog">
            <summary>
            Write an event in the log
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.EventId">
            <summary>
            Event id of the log
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.Title">
            <summary>
            Title of the log
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.Message">
            <summary>
            Message of the log
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.Severity">
            <summary>
            Severity of LogEntry
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Valid the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeLog.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromGroup.GroupId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromGroup.RoleId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromGroup.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromGroup.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromGroup.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser">
            <summary>
            Remove the role of the user
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser.RoleId">
            <summary>
            Role ID
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute remove role from user
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveRoleFromUser.RemoveRoleFromUser(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Remove the role of the user
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveUserFromGroup">
            <summary>
            Remove user of the group
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveUserFromGroup.UserId">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveUserFromGroup.GroupId">
            <summary>
            Group Ids
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveUserFromGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveUserFromGroup.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeRemoveUserFromGroup.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail">
            <summary>
            Send an email
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.To">
            <summary>
            Send to, separe by , or ;
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.Subject">
            <summary>
            Subject of the email
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.From">
            <summary>
            Who send this email
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.Message">
            <summary>
            Message of the email
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.SenderDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.ReceiverDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSendEmail.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable">
            <summary>
            Set a variable in the context
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.VariableName">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.Value">
            <summary>
            Value of the variable
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSetVariable.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.VGExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.ThenSequence">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.ElseSequence">
            <summary>
            
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.GetDictionary(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIf.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIfCondition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIfCondition.CurrentUserId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIfCondition.CurrentUserName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIfCondition.Principal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeIfCondition.Runtime">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1">
            <summary>
            Switch node to select the good  
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.SwitchOn">
            <summary>
            Variable Name to switch on.
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.SwitchCases">
            <summary>
            Switch case
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.DefaultCaseSequence">
            <summary>
            Default node by execute
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.AddCase(`0,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence)">
            <summary>
            
            </summary>
            <param name="switchCase"></param>
            <param name="caseSequence"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the switch node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeSwitch`1.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode">
            <summary>
            Node of the wokflow
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.dict">
            <summary>
            Local store of the node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Id">
            <summary>
            Id of the node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Name">
            <summary>
            Name of the node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Description">
            <summary>
            Description of the node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.DisplayName">
            <summary>
            Display node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Children">
            <summary>
            All sub sequences of the current node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.ExpressionLanguage">
            <summary>
            Caching the expression
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Clone">
            <summary>
            Clone the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Make the action by node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.GetValue``1(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,System.String)">
            <summary>
            Get value of the variable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="variableText"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node, if it is valid
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.ParseExpression(System.String)">
            <summary>
            Parse the expression
            </summary>
            <param name="vgExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.GetDictionary(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Get all variables of the context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.GetExpressionValue``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluate the expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vgExpression"></param>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode.ReplaceExpressionText(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,System.String)">
            <summary>
            Convertion of the expression
            </summary>
            <param name="context"></param>
            <param name="expressionText"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowSequences">
            <summary>
            Represente a list of Node
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowSequences.Item(System.String)">
            <summary>
            Get the child by Name
            </summary>
            <param name="childrenName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowSequences.Contains(System.String)">
            <summary>
            Check if the child exists
            </summary>
            <param name="childrenName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowSequences.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowSequences.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeDelay">
            <summary>
            Delay node
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeDelay.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeDelay.Duration">
            <summary>
            Set the duration of the delay
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeDelay.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the Delay Node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeDelay.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Validate the node
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeExit">
            <summary>
            Exit of the process
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeExit.#ctor">
            <summary>
            Contsructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeExit.Reason">
            <summary>
            Inform the reason of the exit of the process
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeExit.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the exit of the process
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeExit.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Check if the Node is valid
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeStop">
            <summary>
            Stop the process of a time
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeStop.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeStop.Duration">
            <summary>
            Time of the stop
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeStop.Execute(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition)">
            <summary>
            Execute the node
            </summary>
            <param name="context"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNodeStop.ValidateNode(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Check if the node is valide
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGIWorkFlowTrigger">
            <summary>
            Represente the Trigger of the <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGIWorkFlowTrigger.TriggerData">
            <summary>
            Save the data in VGStore
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerType">
            <summary>
            Type of the trigger
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerType.EventLogId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerType.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerType.Schedule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTrigger">
            <summary>
            Represente the type of trigger a <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTrigger.TriggerData">
            <summary>
            Data of the trigger
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTrigger.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTrigger.TriggerType">
            <summary>
            Return the type of the trigger
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTrigger.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTrigger.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByEventLogId">
            <summary>
            Start the VGWorkFlow by EventIDs
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByEventLogId.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByEventLogId.TriggerType">
            <summary>
            Return the type the trigger
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByEventLogId.EventId">
            <summary>
            Return the events need to be execute
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByEventLogId.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByEventLogId.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByInterval">
            <summary>
            Represente a trigger of interval time to execution a workflow
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByInterval.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByInterval.TriggerType">
            <summary>
            Type of the scheduler
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByInterval.Interval">
            <summary>
            Interval of the time, the VGWorkFlow need to be execute
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByInterval.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerByInterval.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialisation
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerBySchedule">
            <summary>
            Represente the scheduler of one workflow
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerBySchedule.#ctor">
            <summary>
            Constractor
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerBySchedule.TriggerType">
            <summary>
            Return the type of the scheduler
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerBySchedule.ScheduleOn">
            <summary>
            Time when the process need to be start
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerBySchedule.OccursOn">
            <summary>
            Selection of the days, the process need to be start
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGWorkFlowTriggerBySchedule.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGScheduleTime">
            <summary>
            Represente the schedule time of the process
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGScheduleTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGScheduleTime.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGScheduleTime.Hours">
            <summary>
            Hous
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGScheduleTime.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGScheduleTime.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek">
            <summary>
            Represente the Days of the week
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Sunday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Monday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Tuesday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Wednesday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Thursday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Friday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Saturday">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Daily">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Weekdays">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.Triggers.VGDaysOfWeek.Weekends">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext">
            <summary>
            Represente the context of the execution
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime)">
            <summary>
            Constructor
            </summary>
            <param name="runtime"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.#ctor(Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="runtime"></param>
            <param name="cxt"></param>
            <param name="sequenceId"></param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.Id">
            <summary>
            Id of the context
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.SequenceId">
            <summary>
            Sequence if of the execution
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.Runtime">
            <summary>
            Return the runtime 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.Variables">
            <summary>
            Return the list of varibale
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialize
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation">
            <summary>
            Represente the data of the workflow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.Variables">
            <summary>
            List of variables
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.TimeStamp">
            <summary>
            Last update of the object
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.Clone">
            <summary>
            Clone the Workflow object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.Id">
            <summary>
            Represente the Id of the workflow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.RepositoryId">
            <summary>
            Return the Id of the workflow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.IsBuiltIn">
            <summary>
            Return if the object is protected
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.NewRepositoryId">
            <summary>
            return the new id 
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowDataInformation.IsRepositoryIdChanged">
            <summary>
            Return the Id is changed
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation">
            <summary>
            Represente the WorkFlow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.Id">
            <summary>
            return the id of the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.Name">
            <summary>
            return the name of the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.Description">
            <summary>
            Return the description of the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.IsActive">
            <summary>
            Check if the process is actived
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.IsConcurrency">
            <summary>
            Define if the Process can be multiple in the same time
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.IsCustomProcess">
            <summary>
            If it is custom process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.Trigger">
            <summary>
            Return the trigger
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.TraceLevel">
            <summary>
            Level of the trace
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.RepositoryId">
            <summary>
            Id of the VGWorkflowProcess
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.IsBuiltIn">
            <summary>
            If it is protected
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.TimeStamp">
            <summary>
            Return the time of the last update
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.NewRepositoryId">
            <summary>
            Return the new id of the element
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.IsRepositoryIdChanged">
            <summary>
            Check if the id is changed
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.RootSequence">
            <summary>
            Return the root sequence to start the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.Variables">
            <summary>
            return the list of variables
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.ProcessType">
            <summary>
            Return the type of the process
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="processInfoName"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation.Clone">
            <summary>
            Clone the process information
            </summary>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation">
            <summary>
            Represente a workflow in process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.Id">
            <summary>
            Process of the instance
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.Contexts">
            <summary>
            Context of the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.CurrentNode">
            <summary>
            Current node of the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.VGWorkFlowProcessId">
            <summary>
            Id of the workflow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.VGWorkFlowProcess">
            <summary>
            Return the process information
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.StartDate">
            <summary>
            The date of the start
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.NextMoveOn">
            <summary>
            When it is next move
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.Log">
            <summary>
            The log of the process
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.Status">
            <summary>
            The status of the process
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.#ctor(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInformation)">
            <summary>
            Constructor
            </summary>
            <param name="processInfo"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.HasContext(System.Guid)">
            <summary>
            
            </summary>
            <param name="sequenceId"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.GetContext(System.Guid,Novalys.VisualGuard.Security.VGSecurityRuntime,Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowContext)">
            <summary>
            Return the context 
            </summary>
            <param name="sequenceId"></param>
            <param name="runtime"></param>
            <param name="cxt"></param>
            <returns></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.Name">
            <summary>
            Name of the workflow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.RepositoryId">
            <summary>
            Id of the element
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.IsBuiltIn">
            <summary>
            if it is protected
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.TimeStamp">
            <summary>
            Return time of the last update
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.NewRepositoryId">
            <summary>
            Return the new id
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.IsRepositoryIdChanged">
            <summary>
            If the repository changed
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation.Clone">
            <summary>
            Clone the VGWorkFlowProcessInstanceInformation
            </summary>
            <returns>return <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessInstanceInformation"/></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus">
            <summary>
            Status of the workflow process
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus.Wait">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus.Paused">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus.Running">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessStatus.Failed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType">
            <summary>
            Type of the trigger for the VGWorkflow
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType.ProcessOnUserAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType.ProcessReport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType.ProcessAuditor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType.ProcessByScheduleTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType.ProcessDefinedVG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowProcessType.ProcessCustom">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence">
            <summary>
            Sequence of the workflow
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.#ctor(System.String)">
            <summary>
            Constructor of VGWorkFlowSequence
            </summary>
            <param name="name">Name of the sequence</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.Id">
            <summary>
            New Guid for Sequence
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.Name">
            <summary>
            Return the name of the sequence
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.Nodes">
            <summary>
            List of the nodes inside of the sequence
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.Add(Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode)">
            <summary>
            Add the node of the sequence
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.Remove(Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode)">
            <summary>
            Remove the node of the sequence
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindNodeByName(System.String)">
            <summary>
            Find <see cref="T:Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode"/> by name
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindIndexOfNode(Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindNodeById(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>        
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindSequenceByNode(Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode)">
            <summary>
            Find the sequence of the node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindNodeContainerBySequence(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence)">
            <summary>
            Find the node container of the sequence
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindParent(Novalys.VisualGuard.Security.WorkFlow.Nodes.VGWorkFlowNode)">
            <summary>
            Find the parent node of the workflow
            </summary>
            <param name="node"></param>
            <returns>return the parent</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence.FindParent(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowSequence)">
            <summary>
            Find the parent
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition">
            <summary>
            Represente the transition of the workflow
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition.NextSequence">
            <summary>
            return the next sequence
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition.Delay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowTransition.Log">
            <summary>
            Log of the workflow process
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable">
            <summary>
            Represente the variable of the workflow
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/>
            </summary>
            <param name="name">Name of the variable</param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.#ctor(System.Guid,System.String)">
            <summary>
            Constructor of <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/>
            </summary>
            <param name="id">Id of the variable</param>
            <param name="name">Name of the variable</param>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.Id">
            <summary>
            If of the variable
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.Name">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.Description">
            <summary>
            Description of the variable
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.Value">
            <summary>
            Represente the value of the <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/>
            </summary>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.VariableType">
            <summary>
            Return the type of the variable <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.GetValue``1">
            <summary>
            Return the value by T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception>The caller does not have the required permission. </exception>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable.Clone">
            <summary>
            Clone the variable 
            </summary>
            <returns> <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/> </returns>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType">
            <summary>
            Represente the type of the variable
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.Boolean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.Int32">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.TimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.Email">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGUser">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGUsers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGRole">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGRoles">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGGroup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGGroups">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGPermissionSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGPermissionSets">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGPermission">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGPermissions">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGApplication">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGWorkFlow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariableType.VGEntityProfileAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables">
            <summary>
            Represente the list of <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/>
            </summary>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.Item(System.String)">
            <summary>
            Find a variable by name
            </summary>
            <param name="variableName">Variable name</param>
            <returns>return <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/> or null </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.Contains(System.String)">
            <summary>
            Check if the variable name exist
            </summary>
            <param name="variableName">Name of the variable</param>
            <returns>Return true of false </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.Contains(System.Guid)">
            <summary>
            Check if the variable id exist
            </summary>
            <param name="id">Id of the variable</param>
            <returns>Return true of false </returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.ToList">
            <summary>
            Return a list of <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/>
            </summary>
            <returns>Return the list</returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.Add(Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable)">
            <summary>
            Add variable in the list
            </summary>
            <param name="variable"> <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/></param>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.FindAll(System.Predicate{Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable})">
            <summary>
            Find all variables
            </summary>
            <param name="match"></param>
            <returns>Return a Variable <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/></returns>
        </member>
        <member name="M:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.Find(System.Predicate{Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable})">
            <summary>
            Find a variable
            </summary>
            <param name="match"></param>
            <returns>Return a Variable <see cref="T:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariable"/></returns>
        </member>
        <member name="P:Novalys.VisualGuard.Security.WorkFlow.VGWorkFlowVariables.Count">
            <summary>
            Return the number of variables
            </summary>
        </member>
    </members>
</doc>
